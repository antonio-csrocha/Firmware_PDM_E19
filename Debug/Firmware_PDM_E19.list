
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105d4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08010798  08010798  00020798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010800  08010800  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  08010800  08010800  00020800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010808  08010808  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010808  08010808  00020808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801080c  0801080c  0002080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08010810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a0c  20000190  080109a0  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  20002b9c  080109a0  00032b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c9b2  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052a2  00000000  00000000  0005cb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00061e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  000637c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e68  00000000  00000000  00064f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238c9  00000000  00000000  0008ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e630f  00000000  00000000  000b1699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001979a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006abc  00000000  00000000  001979fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08010780 	.word	0x08010780

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	08010780 	.word	0x08010780

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <AT24Cxx_Read>:
 */

#include "AT24Cxx.h"

HAL_StatusTypeDef AT24Cxx_Read(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	461a      	mov	r2, r3
 8000508:	460b      	mov	r3, r1
 800050a:	817b      	strh	r3, [r7, #10]
 800050c:	4613      	mov	r3, r2
 800050e:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
 8000510:	897b      	ldrh	r3, [r7, #10]
 8000512:	09db      	lsrs	r3, r3, #7
 8000514:	b29b      	uxth	r3, r3
 8000516:	b21b      	sxth	r3, r3
 8000518:	f003 030e 	and.w	r3, r3, #14
 800051c:	b21b      	sxth	r3, r3
 800051e:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 8000522:	b21b      	sxth	r3, r3
 8000524:	b299      	uxth	r1, r3
 8000526:	897a      	ldrh	r2, [r7, #10]
 8000528:	2301      	movs	r3, #1
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	893b      	ldrh	r3, [r7, #8]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f006 fc16 	bl	8006d68 <HAL_I2C_Mem_Read>
 800053c:	4603      	mov	r3, r0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <AT24Cxx_Write_DMA>:
{
	return HAL_I2C_Mem_Write(hi2c, 0xA0 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
}

HAL_StatusTypeDef AT24Cxx_Write_DMA(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af02      	add	r7, sp, #8
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	461a      	mov	r2, r3
 8000552:	460b      	mov	r3, r1
 8000554:	817b      	strh	r3, [r7, #10]
 8000556:	4613      	mov	r3, r2
 8000558:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write_DMA(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size);
 800055a:	897b      	ldrh	r3, [r7, #10]
 800055c:	09db      	lsrs	r3, r3, #7
 800055e:	b29b      	uxth	r3, r3
 8000560:	b21b      	sxth	r3, r3
 8000562:	f003 030e 	and.w	r3, r3, #14
 8000566:	b21b      	sxth	r3, r3
 8000568:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 800056c:	b21b      	sxth	r3, r3
 800056e:	b299      	uxth	r1, r3
 8000570:	897a      	ldrh	r2, [r7, #10]
 8000572:	893b      	ldrh	r3, [r7, #8]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f006 fe19 	bl	80071b4 <HAL_I2C_Mem_Write_DMA>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f004 f872 	bl	8004678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f89c 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fd50 	bl	800103c <MX_GPIO_Init>
  MX_ADC1_Init();
 800059c:	f000 f90a 	bl	80007b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a0:	f000 f994 	bl	80008cc <MX_ADC2_Init>
  MX_DMA_Init();
 80005a4:	f000 fd0c 	bl	8000fc0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005a8:	f00f fac4 	bl	800fb34 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 80005ac:	f000 fa18 	bl	80009e0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80005b0:	f000 fa60 	bl	8000a74 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005b4:	f000 fa8c 	bl	8000ad0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b8:	f000 fb28 	bl	8000c0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005bc:	f000 fb9c 	bl	8000cf8 <MX_TIM3_Init>
  MX_TIM6_Init();
 80005c0:	f000 fc10 	bl	8000de4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80005c4:	f000 fc44 	bl	8000e50 <MX_TIM7_Init>
  MX_TIM8_Init();
 80005c8:	f000 fc76 	bl	8000eb8 <MX_TIM8_Init>
  MX_CRC_Init();
 80005cc:	f000 fa3e 	bl	8000a4c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 80005d0:	4932      	ldr	r1, [pc, #200]	; (800069c <main+0x110>)
 80005d2:	4833      	ldr	r0, [pc, #204]	; (80006a0 <main+0x114>)
 80005d4:	f001 fe6a 	bl	80022ac <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Convert ADC values to data channels
	if(Accumulator_Delay == 0)
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <main+0x118>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <main+0x5a>
	{
		PDM_Read_Data(&Data_Conversion);
 80005e0:	4831      	ldr	r0, [pc, #196]	; (80006a8 <main+0x11c>)
 80005e2:	f003 f9d1 	bl	8003988 <PDM_Read_Data>
	}

	//check if output currents are below thresholds and timeouts
	if(Accumulator_Output_Check >= OUTPUT_FUSE_FREQ)
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <main+0x120>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b18      	cmp	r3, #24
 80005ec:	d901      	bls.n	80005f2 <main+0x66>
	{
		PDM_Output_Fuse();
 80005ee:	f002 fae7 	bl	8002bc0 <PDM_Output_Fuse>
	}

	//Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	if(Accumulator_Msg_10Hz >= DATA_FREQ_10HZ)
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <main+0x124>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fa:	d306      	bcc.n	800060a <main+0x7e>
	{
		Accumulator_Msg_10Hz = 0;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <main+0x124>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 8000602:	2101      	movs	r1, #1
 8000604:	4826      	ldr	r0, [pc, #152]	; (80006a0 <main+0x114>)
 8000606:	f000 fec7 	bl	8001398 <PDM_CAN_Transmit_Data>
	}

	//Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	if(Accumulator_Msg_25Hz >= DATA_FREQ_25HZ)
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0x128>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000612:	d306      	bcc.n	8000622 <main+0x96>
	{
		Accumulator_Msg_25Hz = 0;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <main+0x128>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 800061a:	2102      	movs	r1, #2
 800061c:	4820      	ldr	r0, [pc, #128]	; (80006a0 <main+0x114>)
 800061e:	f000 febb 	bl	8001398 <PDM_CAN_Transmit_Data>
	}

	//Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	if(Accumulator_Msg_50Hz >= DATA_FREQ_50HZ)
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <main+0x12c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2bc7      	cmp	r3, #199	; 0xc7
 8000628:	d906      	bls.n	8000638 <main+0xac>
	{
		Accumulator_Msg_50Hz = 0;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <main+0x12c>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 8000630:	2103      	movs	r1, #3
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <main+0x114>)
 8000634:	f000 feb0 	bl	8001398 <PDM_CAN_Transmit_Data>
	}

	//Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	if(Accumulator_Msg_80Hz >= DATA_FREQ_80HZ)
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <main+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b7c      	cmp	r3, #124	; 0x7c
 800063e:	d906      	bls.n	800064e <main+0xc2>
	{
		Accumulator_Msg_10Hz = 0;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <main+0x124>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 8000646:	2104      	movs	r1, #4
 8000648:	4815      	ldr	r0, [pc, #84]	; (80006a0 <main+0x114>)
 800064a:	f000 fea5 	bl	8001398 <PDM_CAN_Transmit_Data>
	}

	//Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	if(Accumulator_Msg_100Hz >= DATA_FREQ_100HZ)
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <main+0x134>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b63      	cmp	r3, #99	; 0x63
 8000654:	d906      	bls.n	8000664 <main+0xd8>
	{
		Accumulator_Msg_100Hz = 0;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0x134>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 800065c:	2105      	movs	r1, #5
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x114>)
 8000660:	f000 fe9a 	bl	8001398 <PDM_CAN_Transmit_Data>
	}

	//Checks if USB accumulator is above time threshold
	if((Accumulator_USB_Data >= DATA_FREQ_USB))
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x138>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066c:	d3b4      	bcc.n	80005d8 <main+0x4c>
	{
		Accumulator_USB_Data = 0;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x138>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]

		//If connected, send data channels via USB
		if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) && (USB_Connected_Flag == 1))
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <main+0x13c>)
 800067a:	f006 f9cd 	bl	8006a18 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d106      	bne.n	8000692 <main+0x106>
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0x140>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d102      	bne.n	8000692 <main+0x106>
			PDM_USB_Transmit_Data();
 800068c:	f002 f818 	bl	80026c0 <PDM_USB_Transmit_Data>
 8000690:	e002      	b.n	8000698 <main+0x10c>
		//If disconnected reset flag
		else
			USB_Connected_Flag = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <main+0x140>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	if(Accumulator_Delay == 0)
 8000698:	e79e      	b.n	80005d8 <main+0x4c>
 800069a:	bf00      	nop
 800069c:	200004d0 	.word	0x200004d0
 80006a0:	20001204 	.word	0x20001204
 80006a4:	200011a0 	.word	0x200011a0
 80006a8:	20000e3c 	.word	0x20000e3c
 80006ac:	2000052c 	.word	0x2000052c
 80006b0:	20001118 	.word	0x20001118
 80006b4:	20000e40 	.word	0x20000e40
 80006b8:	20000f2c 	.word	0x20000f2c
 80006bc:	20001000 	.word	0x20001000
 80006c0:	20000f50 	.word	0x20000f50
 80006c4:	2000122c 	.word	0x2000122c
 80006c8:	40020000 	.word	0x40020000
 80006cc:	20000fb4 	.word	0x20000fb4

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f010 f846 	bl	8010770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <SystemClock_Config+0xdc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <SystemClock_Config+0xdc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xe0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <SystemClock_Config+0xe0>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000744:	23b4      	movs	r3, #180	; 0xb4
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f00a fe6d 	bl	800b438 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 fd96 	bl	8001294 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000768:	f00a f834 	bl	800a7d4 <HAL_PWREx_EnableOverDrive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000772:	f000 fd8f 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2105      	movs	r1, #5
 8000794:	4618      	mov	r0, r3
 8000796:	f00a f86d 	bl	800a874 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a0:	f000 fd78 	bl	8001294 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	; 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <MX_ADC1_Init+0x108>)
 80007c8:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <MX_ADC1_Init+0x10c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007cc:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_ADC1_Init+0x108>)
 80007ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_ADC1_Init+0x108>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_ADC1_Init+0x108>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_ADC1_Init+0x108>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_ADC1_Init+0x108>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_ADC1_Init+0x108>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_ADC1_Init+0x108>)
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <MX_ADC1_Init+0x110>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_ADC1_Init+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_ADC1_Init+0x108>)
 8000802:	2205      	movs	r2, #5
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_ADC1_Init+0x108>)
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_ADC1_Init+0x108>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_ADC1_Init+0x108>)
 8000816:	f003 ffc5 	bl	80047a4 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fd38 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800082c:	2307      	movs	r3, #7
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_ADC1_Init+0x108>)
 8000836:	f003 fff9 	bl	800482c <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fd28 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000844:	2301      	movs	r3, #1
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_ADC1_Init+0x108>)
 8000852:	f003 ffeb 	bl	800482c <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 fd1a 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000860:	2302      	movs	r3, #2
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_ADC1_Init+0x108>)
 800086e:	f003 ffdd 	bl	800482c <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000878:	f000 fd0c 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087c:	2303      	movs	r3, #3
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ADC1_Init+0x108>)
 800088a:	f003 ffcf 	bl	800482c <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000894:	f000 fcfe 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_ADC1_Init+0x114>)
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800089c:	2305      	movs	r3, #5
 800089e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_ADC1_Init+0x108>)
 80008a6:	f003 ffc1 	bl	800482c <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80008b0:	f000 fcf0 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000e5c 	.word	0x20000e5c
 80008c0:	40012000 	.word	0x40012000
 80008c4:	0f000001 	.word	0x0f000001
 80008c8:	10000012 	.word	0x10000012

080008cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008e0:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <MX_ADC2_Init+0x10c>)
 80008e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008ec:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <MX_ADC2_Init+0x108>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_ADC2_Init+0x108>)
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <MX_ADC2_Init+0x110>)
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_ADC2_Init+0x108>)
 800091a:	2205      	movs	r2, #5
 800091c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000928:	2201      	movs	r2, #1
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800092c:	4829      	ldr	r0, [pc, #164]	; (80009d4 <MX_ADC2_Init+0x108>)
 800092e:	f003 ff39 	bl	80047a4 <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 fcac 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800093c:	2304      	movs	r3, #4
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000944:	2307      	movs	r3, #7
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4821      	ldr	r0, [pc, #132]	; (80009d4 <MX_ADC2_Init+0x108>)
 800094e:	f003 ff6d 	bl	800482c <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 fc9c 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800095c:	2305      	movs	r3, #5
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	481a      	ldr	r0, [pc, #104]	; (80009d4 <MX_ADC2_Init+0x108>)
 800096a:	f003 ff5f 	bl	800482c <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000974:	f000 fc8e 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000978:	2306      	movs	r3, #6
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800097c:	2303      	movs	r3, #3
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_ADC2_Init+0x108>)
 8000986:	f003 ff51 	bl	800482c <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000990:	f000 fc80 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000994:	2307      	movs	r3, #7
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_ADC2_Init+0x108>)
 80009a2:	f003 ff43 	bl	800482c <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80009ac:	f000 fc72 	bl	8001294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009b0:	230e      	movs	r3, #14
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009b4:	2305      	movs	r3, #5
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_ADC2_Init+0x108>)
 80009be:	f003 ff35 	bl	800482c <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80009c8:	f000 fc64 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000428 	.word	0x20000428
 80009d8:	40012100 	.word	0x40012100
 80009dc:	0f000001 	.word	0x0f000001

080009e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_CAN1_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009ec:	2205      	movs	r2, #5
 80009ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_CAN1_Init+0x64>)
 80009f8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009fc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a00:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_CAN1_Init+0x64>)
 8000a32:	f004 f929 	bl	8004c88 <HAL_CAN_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 fc2a 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20001204 	.word	0x20001204
 8000a48:	40006400 	.word	0x40006400

08000a4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_CRC_Init+0x20>)
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <MX_CRC_Init+0x24>)
 8000a54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_CRC_Init+0x20>)
 8000a58:	f005 f95b 	bl	8005d12 <HAL_CRC_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a62:	f000 fc17 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000524 	.word	0x20000524
 8000a70:	40023000 	.word	0x40023000

08000a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <MX_I2C1_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_I2C1_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000ab2:	f006 f815 	bl	8006ae0 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 fbea 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200004d0 	.word	0x200004d0
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	00061a80 	.word	0x00061a80

08000ad0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	; 0x58
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2220      	movs	r2, #32
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00f fe31 	bl	8010770 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b0e:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b10:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <MX_TIM1_Init+0x138>)
 8000b12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17;
 8000b14:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b16:	2211      	movs	r2, #17
 8000b18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b20:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3a:	4832      	ldr	r0, [pc, #200]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b3c:	f00a ff1a 	bl	800b974 <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b46:	f000 fba5 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b54:	4619      	mov	r1, r3
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b58:	f00b fadc 	bl	800c114 <HAL_TIM_ConfigClockSource>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b62:	f000 fb97 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b66:	4827      	ldr	r0, [pc, #156]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b68:	f00a fff3 	bl	800bb52 <HAL_TIM_PWM_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b72:	f000 fb8f 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b82:	4619      	mov	r1, r3
 8000b84:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000b86:	f00b fec5 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b90:	f000 fb80 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b94:	2360      	movs	r3, #96	; 0x60
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000bb6:	f00b f9eb 	bl	800bf90 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bc0:	f000 fb68 	bl	8001294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000be8:	f00b ff10 	bl	800ca0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000bf2:	f000 fb4f 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM1_Init+0x134>)
 8000bf8:	f003 fb7a 	bl	80042f0 <HAL_TIM_MspPostInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20001004 	.word	0x20001004
 8000c08:	40010000 	.word	0x40010000

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c64:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c66:	f00a fe85 	bl	800b974 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c70:	f000 fb10 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c82:	f00b fa47 	bl	800c114 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c8c:	f000 fb02 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c92:	f00a ff5e 	bl	800bb52 <HAL_TIM_PWM_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c9c:	f000 fafa 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000cb0:	f00b fe30 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cba:	f000 faeb 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000cd6:	f00b f95b 	bl	800bf90 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ce0:	f000 fad8 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_TIM2_Init+0xe8>)
 8000ce6:	f003 fb03 	bl	80042f0 <HAL_TIM_MspPostInit>

}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000111c 	.word	0x2000111c

08000cf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <MX_TIM3_Init+0xe8>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d30:	2208      	movs	r2, #8
 8000d32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4e:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d50:	f00a fe10 	bl	800b974 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d5a:	f000 fa9b 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481c      	ldr	r0, [pc, #112]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d6c:	f00b f9d2 	bl	800c114 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d76:	f000 fa8d 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d7c:	f00a fee9 	bl	800bb52 <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d86:	f000 fa85 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d9a:	f00b fdbb 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000da4:	f000 fa76 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	220c      	movs	r2, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000dc0:	f00b f8e6 	bl	800bf90 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dca:	f000 fa63 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000dd0:	f003 fa8e 	bl	80042f0 <HAL_TIM_MspPostInit>

}
 8000dd4:	bf00      	nop
 8000dd6:	3738      	adds	r7, #56	; 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000df4 	.word	0x20000df4
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000df4:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <MX_TIM6_Init+0x68>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000dfa:	2259      	movs	r2, #89	; 0x59
 8000dfc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e14:	f00a fdae 	bl	800b974 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e1e:	f000 fa39 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_TIM6_Init+0x64>)
 8000e30:	f00b fd70 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e3a:	f000 fa2b 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000fb8 	.word	0x20000fb8
 8000e4c:	40001000 	.word	0x40001000

08000e50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <MX_TIM7_Init+0x64>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e72:	2209      	movs	r2, #9
 8000e74:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e7e:	f00a fd79 	bl	800b974 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000e88:	f000 fa04 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM7_Init+0x60>)
 8000e9a:	f00b fd3b 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000ea4:	f000 f9f6 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000126c 	.word	0x2000126c
 8000eb4:	40001400 	.word	0x40001400

08000eb8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b092      	sub	sp, #72	; 0x48
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2220      	movs	r2, #32
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00f fc44 	bl	8010770 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000eea:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <MX_TIM8_Init+0x104>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000ef0:	2211      	movs	r2, #17
 8000ef2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000efc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f14:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f16:	f00a fe1c 	bl	800bb52 <HAL_TIM_PWM_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000f20:	f000 f9b8 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	4619      	mov	r1, r3
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f34:	f00b fcee 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000f3e:	f000 f9a9 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f42:	2370      	movs	r3, #112	; 0x70
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	2204      	movs	r2, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f68:	f00b f812 	bl	800bf90 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f72:	f000 f98f 	bl	8001294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000f9a:	f00b fd37 	bl	800ca0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000fa4:	f000 f976 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM8_Init+0x100>)
 8000faa:	f003 f9a1 	bl	80042f0 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3748      	adds	r7, #72	; 0x48
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200003dc 	.word	0x200003dc
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_DMA_Init+0x78>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <MX_DMA_Init+0x78>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_DMA_Init+0x78>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_DMA_Init+0x78>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <MX_DMA_Init+0x78>)
 8000fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_DMA_Init+0x78>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2011      	movs	r0, #17
 8001004:	f004 fe41 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001008:	2011      	movs	r0, #17
 800100a:	f004 fe5a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2038      	movs	r0, #56	; 0x38
 8001014:	f004 fe39 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001018:	2038      	movs	r0, #56	; 0x38
 800101a:	f004 fe52 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	203a      	movs	r0, #58	; 0x3a
 8001024:	f004 fe31 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001028:	203a      	movs	r0, #58	; 0x3a
 800102a:	f004 fe4a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	4b88      	ldr	r3, [pc, #544]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a87      	ldr	r2, [pc, #540]	; (8001278 <MX_GPIO_Init+0x23c>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	4b81      	ldr	r3, [pc, #516]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a80      	ldr	r2, [pc, #512]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b7e      	ldr	r3, [pc, #504]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0320 	and.w	r3, r3, #32
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b7a      	ldr	r3, [pc, #488]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a79      	ldr	r2, [pc, #484]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b77      	ldr	r3, [pc, #476]	; (8001278 <MX_GPIO_Init+0x23c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b73      	ldr	r3, [pc, #460]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a72      	ldr	r2, [pc, #456]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b6c      	ldr	r3, [pc, #432]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a6b      	ldr	r2, [pc, #428]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a64      	ldr	r2, [pc, #400]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b62      	ldr	r3, [pc, #392]	; (8001278 <MX_GPIO_Init+0x23c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a5d      	ldr	r2, [pc, #372]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <MX_GPIO_Init+0x23c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <MX_GPIO_Init+0x23c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a56      	ldr	r2, [pc, #344]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b54      	ldr	r3, [pc, #336]	; (8001278 <MX_GPIO_Init+0x23c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	213c      	movs	r1, #60	; 0x3c
 8001136:	4851      	ldr	r0, [pc, #324]	; (800127c <MX_GPIO_Init+0x240>)
 8001138:	f005 fc86 	bl	8006a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001142:	484f      	ldr	r0, [pc, #316]	; (8001280 <MX_GPIO_Init+0x244>)
 8001144:	f005 fc80 	bl	8006a48 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800114e:	484d      	ldr	r0, [pc, #308]	; (8001284 <MX_GPIO_Init+0x248>)
 8001150:	f005 fc7a 	bl	8006a48 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8001154:	233c      	movs	r3, #60	; 0x3c
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4844      	ldr	r0, [pc, #272]	; (800127c <MX_GPIO_Init+0x240>)
 800116c:	f005 f9cc 	bl	8006508 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001170:	230f      	movs	r3, #15
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4840      	ldr	r0, [pc, #256]	; (8001288 <MX_GPIO_Init+0x24c>)
 8001186:	f005 f9bf 	bl	8006508 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800118a:	f24f 0330 	movw	r3, #61488	; 0xf030
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001190:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	483a      	ldr	r0, [pc, #232]	; (800128c <MX_GPIO_Init+0x250>)
 80011a2:	f005 f9b1 	bl	8006508 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80011a6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4830      	ldr	r0, [pc, #192]	; (8001280 <MX_GPIO_Init+0x244>)
 80011c0:	f005 f9a2 	bl	8006508 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80011c4:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x248>)
 80011de:	f005 f993 	bl	8006508 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80011e2:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4825      	ldr	r0, [pc, #148]	; (8001290 <MX_GPIO_Init+0x254>)
 80011fa:	f005 f985 	bl	8006508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	2006      	movs	r0, #6
 8001204:	f004 fd41 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001208:	2006      	movs	r0, #6
 800120a:	f004 fd5a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	2007      	movs	r0, #7
 8001214:	f004 fd39 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001218:	2007      	movs	r0, #7
 800121a:	f004 fd52 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	2008      	movs	r0, #8
 8001224:	f004 fd31 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001228:	2008      	movs	r0, #8
 800122a:	f004 fd4a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	2009      	movs	r0, #9
 8001234:	f004 fd29 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001238:	2009      	movs	r0, #9
 800123a:	f004 fd42 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	200a      	movs	r0, #10
 8001244:	f004 fd21 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001248:	200a      	movs	r0, #10
 800124a:	f004 fd3a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	2017      	movs	r0, #23
 8001254:	f004 fd19 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001258:	2017      	movs	r0, #23
 800125a:	f004 fd32 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2101      	movs	r1, #1
 8001262:	2028      	movs	r0, #40	; 0x28
 8001264:	f004 fd11 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001268:	2028      	movs	r0, #40	; 0x28
 800126a:	f004 fd2a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40021000 	.word	0x40021000
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40021800 	.word	0x40021800
 8001288:	40021400 	.word	0x40021400
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, uint8_t CAN_BaudRate)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f003 fde6 	bl	8004e7e <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	if(CAN_BaudRate == CAN_Disable)
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <PDM_CAN_Init+0x1c>
	{
		return HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e02b      	b.n	8001314 <PDM_CAN_Init+0x74>
	}
	else if(CAN_BaudRate == CAN_125kbps)
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d103      	bne.n	80012ca <PDM_CAN_Init+0x2a>
	{
		hcan->Init.Prescaler = 40;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2228      	movs	r2, #40	; 0x28
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	e013      	b.n	80012f2 <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_250kbps)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d103      	bne.n	80012d8 <PDM_CAN_Init+0x38>
	{
		hcan->Init.Prescaler = 20;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2214      	movs	r2, #20
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	e00c      	b.n	80012f2 <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_500kbps)
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d103      	bne.n	80012e6 <PDM_CAN_Init+0x46>
	{
		hcan->Init.Prescaler = 10;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	220a      	movs	r2, #10
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	e005      	b.n	80012f2 <PDM_CAN_Init+0x52>
	}

	else if(CAN_BaudRate == CAN_1000kbps)
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d102      	bne.n	80012f2 <PDM_CAN_Init+0x52>
	{
		hcan->Init.Prescaler = 5;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2205      	movs	r2, #5
 80012f0:	605a      	str	r2, [r3, #4]
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f003 fcc8 	bl	8004c88 <HAL_CAN_Init>

	//Initialize receive callbacks if there is at least one PWM CAN enabled
	if((PWM_Pin_Status & 0xF0) != 0x00)
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <PDM_CAN_Init+0x7c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <PDM_CAN_Init+0x6c>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001304:	2102      	movs	r1, #2
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f004 f96b 	bl	80055e2 <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f003 feb9 	bl	8005084 <HAL_CAN_Start>
 8001312:	4603      	mov	r3, r0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000ea4 	.word	0x20000ea4

08001320 <PDM_PWM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
HAL_StatusTypeDef PDM_PWM_CAN_Filter_Config(CAN_HandleTypeDef *hcan, PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
	//Double check if PWM CAN is enabled for this specific output
	if(((PWM_Pin_Status >> pwm_out_number) & 0x10) != OUTPUT_PWM_CAN_ENABLE)
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <PDM_PWM_CAN_Filter_Config+0x74>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	fa42 f303 	asr.w	r3, r2, r3
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <PDM_PWM_CAN_Filter_Config+0x26>
		return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e022      	b.n	800138c <PDM_PWM_CAN_Filter_Config+0x6c>

	CAN_FilterTypeDef CAN_Filter_Config;

	//Sets CAN filter configuration
	CAN_Filter_Config.FilterBank = pwm_out_number;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 800134e:	2301      	movs	r3, #1
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_Filter_Config.FilterIdHigh = pwm_struct->Command_Var_CAN_ID[0] >> 13;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	0b5b      	lsrs	r3, r3, #13
 8001358:	613b      	str	r3, [r7, #16]
	CAN_Filter_Config.FilterIdLow = (pwm_struct->Command_Var_CAN_ID[0] << 3) & 0xFFF8;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	b29b      	uxth	r3, r3
 8001362:	617b      	str	r3, [r7, #20]
	CAN_Filter_Config.FilterMaskIdHigh = pwm_struct->Command_Var_CAN_ID[1] >> 13;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	0b5b      	lsrs	r3, r3, #13
 800136a:	61bb      	str	r3, [r7, #24]
	CAN_Filter_Config.FilterMaskIdLow = (pwm_struct->Command_Var_CAN_ID[1] << 3) & 0xFFF8;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	b29b      	uxth	r3, r3
 8001374:	61fb      	str	r3, [r7, #28]
	CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
	CAN_Filter_Config.FilterActivation = ENABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	633b      	str	r3, [r7, #48]	; 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &CAN_Filter_Config);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f003 fd9d 	bl	8004ec4 <HAL_CAN_ConfigFilter>
 800138a:	4603      	mov	r3, r0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3738      	adds	r7, #56	; 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000ea4 	.word	0x20000ea4

08001398 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

	//Selects CAN transmission ID based on data transmission frequency
	switch(data_freq)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d821      	bhi.n	80013f4 <PDM_CAN_Transmit_Data+0x5c>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <PDM_CAN_Transmit_Data+0x20>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013ed 	.word	0x080013ed
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	080013dd 	.word	0x080013dd
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013cd 	.word	0x080013cd
	{
	case Data_Freq_100Hz:
		CAN_Tx_Message.ExtId = 0x1E35C003;
 80013cc:	4b58      	ldr	r3, [pc, #352]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80013ce:	4a59      	ldr	r2, [pc, #356]	; (8001534 <PDM_CAN_Transmit_Data+0x19c>)
 80013d0:	605a      	str	r2, [r3, #4]
		break;
 80013d2:	e011      	b.n	80013f8 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_80Hz:
		CAN_Tx_Message.ExtId = 0x1E35C004;
 80013d4:	4b56      	ldr	r3, [pc, #344]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80013d6:	4a58      	ldr	r2, [pc, #352]	; (8001538 <PDM_CAN_Transmit_Data+0x1a0>)
 80013d8:	605a      	str	r2, [r3, #4]
		break;
 80013da:	e00d      	b.n	80013f8 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_50Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 80013dc:	4b54      	ldr	r3, [pc, #336]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80013de:	4a57      	ldr	r2, [pc, #348]	; (800153c <PDM_CAN_Transmit_Data+0x1a4>)
 80013e0:	605a      	str	r2, [r3, #4]
		break;
 80013e2:	e009      	b.n	80013f8 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_25Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 80013e4:	4b52      	ldr	r3, [pc, #328]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80013e6:	4a55      	ldr	r2, [pc, #340]	; (800153c <PDM_CAN_Transmit_Data+0x1a4>)
 80013e8:	605a      	str	r2, [r3, #4]
		break;
 80013ea:	e005      	b.n	80013f8 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_10Hz:
		CAN_Tx_Message.ExtId = 0x1E35C006;
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80013ee:	4a54      	ldr	r2, [pc, #336]	; (8001540 <PDM_CAN_Transmit_Data+0x1a8>)
 80013f0:	605a      	str	r2, [r3, #4]
		break;
 80013f2:	e001      	b.n	80013f8 <PDM_CAN_Transmit_Data+0x60>
	default:
		return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e096      	b.n	8001526 <PDM_CAN_Transmit_Data+0x18e>
	}

	//Prepares transmission header
	CAN_Tx_Message.DLC = 0;
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
	CAN_Tx_Message.IDE = CAN_ID_EXT;
 80013fe:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 8001400:	2204      	movs	r2, #4
 8001402:	609a      	str	r2, [r3, #8]
	CAN_Tx_Message.RTR = CAN_RTR_DATA;
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
	CAN_Tx_Message.TransmitGlobalTime = DISABLE;
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 800140c:	2200      	movs	r2, #0
 800140e:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	73bb      	strb	r3, [r7, #14]
 8001414:	e068      	b.n	80014e8 <PDM_CAN_Transmit_Data+0x150>
	{
		//Place data and ID inside transmission buffer if the data has the same frequency as selected
		if(Data_Freq_Buffer[i] == data_freq)
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <PDM_CAN_Transmit_Data+0x1ac>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	429a      	cmp	r2, r3
 8001420:	d141      	bne.n	80014a6 <PDM_CAN_Transmit_Data+0x10e>
		{
			CAN_Tx_Data[CAN_Tx_Message.DLC]		 = Data_ID_Buffer[i] >> 8;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <PDM_CAN_Transmit_Data+0x1b0>)
 8001426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	b2d1      	uxtb	r1, r2
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 8001436:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 1] |= Data_ID_Buffer[i] & 0xFF;
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	3301      	adds	r3, #1
 800143e:	4a43      	ldr	r2, [pc, #268]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	b25a      	sxtb	r2, r3
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	4940      	ldr	r1, [pc, #256]	; (8001548 <PDM_CAN_Transmit_Data+0x1b0>)
 8001448:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b25a      	sxtb	r2, r3
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	3301      	adds	r3, #1
 8001458:	b2d1      	uxtb	r1, r2
 800145a:	4a3c      	ldr	r2, [pc, #240]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 800145c:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 2]  = Data_Buffer[i] >> 8;
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	4a3b      	ldr	r2, [pc, #236]	; (8001550 <PDM_CAN_Transmit_Data+0x1b8>)
 8001462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	3302      	adds	r3, #2
 8001470:	b2d1      	uxtb	r1, r2
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 8001474:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Tx_Message.DLC + 3] |= Data_Buffer[i] & 0xFF;
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	3303      	adds	r3, #3
 800147c:	4a33      	ldr	r2, [pc, #204]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	b25a      	sxtb	r2, r3
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	4932      	ldr	r1, [pc, #200]	; (8001550 <PDM_CAN_Transmit_Data+0x1b8>)
 8001486:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b25a      	sxtb	r2, r3
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	3303      	adds	r3, #3
 8001496:	b2d1      	uxtb	r1, r2
 8001498:	4a2c      	ldr	r2, [pc, #176]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 800149a:	54d1      	strb	r1, [r2, r3]

			CAN_Tx_Message.DLC += 4;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	3304      	adds	r3, #4
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80014a4:	6113      	str	r3, [r2, #16]
		}

		//Sends transmission buffer if it's full
		if(CAN_Tx_Message.DLC == 8)
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d119      	bne.n	80014e2 <PDM_CAN_Transmit_Data+0x14a>
		{
			ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <PDM_CAN_Transmit_Data+0x1bc>)
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 80014b2:	491f      	ldr	r1, [pc, #124]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f003 fe72 	bl	800519e <HAL_CAN_AddTxMessage>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]

			//Wait Transmission finish
			for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80014be:	2300      	movs	r3, #0
 80014c0:	737b      	strb	r3, [r7, #13]
 80014c2:	e002      	b.n	80014ca <PDM_CAN_Transmit_Data+0x132>
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
 80014c6:	3301      	adds	r3, #1
 80014c8:	737b      	strb	r3, [r7, #13]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f003 ff42 	bl	8005354 <HAL_CAN_GetTxMailboxesFreeLevel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d002      	beq.n	80014dc <PDM_CAN_Transmit_Data+0x144>
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d9f3      	bls.n	80014c4 <PDM_CAN_Transmit_Data+0x12c>

			CAN_Tx_Message.DLC = 0;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73bb      	strb	r3, [r7, #14]
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	2b1d      	cmp	r3, #29
 80014ec:	d993      	bls.n	8001416 <PDM_CAN_Transmit_Data+0x7e>
		}
	}

	//If there is only one data channel not sent, send it alone
	if(CAN_Tx_Message.DLC == 4)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d116      	bne.n	8001524 <PDM_CAN_Transmit_Data+0x18c>
	{
		ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <PDM_CAN_Transmit_Data+0x1bc>)
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <PDM_CAN_Transmit_Data+0x1b4>)
 80014fa:	490d      	ldr	r1, [pc, #52]	; (8001530 <PDM_CAN_Transmit_Data+0x198>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f003 fe4e 	bl	800519e <HAL_CAN_AddTxMessage>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001506:	2300      	movs	r3, #0
 8001508:	733b      	strb	r3, [r7, #12]
 800150a:	e002      	b.n	8001512 <PDM_CAN_Transmit_Data+0x17a>
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	733b      	strb	r3, [r7, #12]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f003 ff1e 	bl	8005354 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b03      	cmp	r3, #3
 800151c:	d002      	beq.n	8001524 <PDM_CAN_Transmit_Data+0x18c>
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d9f3      	bls.n	800150c <PDM_CAN_Transmit_Data+0x174>
	}

	return ret_val;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000e44 	.word	0x20000e44
 8001534:	1e35c003 	.word	0x1e35c003
 8001538:	1e35c004 	.word	0x1e35c004
 800153c:	1e35c005 	.word	0x1e35c005
 8001540:	1e35c006 	.word	0x1e35c006
 8001544:	20000f30 	.word	0x20000f30
 8001548:	20001164 	.word	0x20001164
 800154c:	200012b4 	.word	0x200012b4
 8001550:	20001230 	.word	0x20001230
 8001554:	200003d8 	.word	0x200003d8

08001558 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
	uint8_t receive_flag = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
	uint32_t rx_id = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]

	if(CAN_Rx_Message.IDE == CAN_ID_STD)
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <PDM_CAN_Process_Rx_Data+0x184>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <PDM_CAN_Process_Rx_Data+0x1e>
	{
		rx_id = CAN_Rx_Message.StdId;
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <PDM_CAN_Process_Rx_Data+0x184>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	e002      	b.n	800157c <PDM_CAN_Process_Rx_Data+0x24>
	}else{
		rx_id = CAN_Rx_Message.ExtId;
 8001576:	4b59      	ldr	r3, [pc, #356]	; (80016dc <PDM_CAN_Process_Rx_Data+0x184>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i = 0; i < 4; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	e0a4      	b.n	80016cc <PDM_CAN_Process_Rx_Data+0x174>
	{
		//Checks if received message contains data to any PWN CAN output
		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[0])
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4a56      	ldr	r2, [pc, #344]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001586:	f44f 710c 	mov.w	r1, #560	; 0x230
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	331c      	adds	r3, #28
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	429a      	cmp	r2, r3
 8001598:	d13c      	bne.n	8001614 <PDM_CAN_Process_Rx_Data+0xbc>
		{
			PWM_Pins[i].Command_Var[0]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0]]) << 8;
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 800159e:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	3318      	adds	r3, #24
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <PDM_CAN_Process_Rx_Data+0x18c>)
 80015b0:	5c9b      	ldrb	r3, [r3, r2]
 80015b2:	021a      	lsls	r2, r3, #8
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	b210      	sxth	r0, r2
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 80015ba:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	3326      	adds	r3, #38	; 0x26
 80015c6:	4602      	mov	r2, r0
 80015c8:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[0] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0] + 1]) & 0xFF;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 80015ce:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3326      	adds	r3, #38	; 0x26
 80015da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 80015e2:	f44f 700c 	mov.w	r0, #560	; 0x230
 80015e6:	fb00 f303 	mul.w	r3, r0, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	3318      	adds	r3, #24
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <PDM_CAN_Process_Rx_Data+0x18c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	b210      	sxth	r0, r2
 80015fe:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001600:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	3326      	adds	r3, #38	; 0x26
 800160c:	4602      	mov	r2, r0
 800160e:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
		}

		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[1])
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001618:	f44f 710c 	mov.w	r1, #560	; 0x230
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	3320      	adds	r3, #32
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d13c      	bne.n	80016a6 <PDM_CAN_Process_Rx_Data+0x14e>
		{
			PWM_Pins[i].Command_Var[1]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1]]) << 8;
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001630:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3319      	adds	r3, #25
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	021a      	lsls	r2, r3, #8
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	b210      	sxth	r0, r2
 800164a:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 800164c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	3328      	adds	r3, #40	; 0x28
 8001658:	4602      	mov	r2, r0
 800165a:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[1] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1] + 1]) & 0xFF;
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001660:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	3328      	adds	r3, #40	; 0x28
 800166c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001674:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001678:	fb00 f303 	mul.w	r3, r0, r3
 800167c:	4413      	add	r3, r2
 800167e:	3319      	adds	r3, #25
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	b21a      	sxth	r2, r3
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	430a      	orrs	r2, r1
 800168e:	b210      	sxth	r0, r2
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 8001692:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4413      	add	r3, r2
 800169c:	3328      	adds	r3, #40	; 0x28
 800169e:	4602      	mov	r2, r0
 80016a0:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
		}

		//If the received message contains data to any PWM CAN output, set it's duty cycle
		if(receive_flag == 1)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d10c      	bne.n	80016c6 <PDM_CAN_Process_Rx_Data+0x16e>
		{
			PDM_PWM_Output_Process(&PWM_Pins[i], i);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f44f 720c 	mov.w	r2, #560	; 0x230
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <PDM_CAN_Process_Rx_Data+0x188>)
 80016b8:	4413      	add	r3, r2
 80016ba:	79fa      	ldrb	r2, [r7, #7]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 ffe4 	bl	800368c <PDM_PWM_Output_Process>
			return;
 80016c4:	e007      	b.n	80016d6 <PDM_CAN_Process_Rx_Data+0x17e>
	for(uint8_t i = 0; i < 4; i++)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	3301      	adds	r3, #1
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	f67f af57 	bls.w	8001582 <PDM_CAN_Process_Rx_Data+0x2a>
		}
	}

	return;
 80016d4:	bf00      	nop
}
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000ed0 	.word	0x20000ed0
 80016e0:	20000534 	.word	0x20000534
 80016e4:	20001110 	.word	0x20001110

080016e8 <PDM_Load_Config_Buffer>:

//Use to load pin, current limit and basic pwm control into a buffer
//uint8_t *data_buffer - buffer to receive configuration
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Load_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 80016e8:	b490      	push	{r4, r7}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80016fa:	f040 82d0 	bne.w	8001c9e <PDM_Load_Config_Buffer+0x5b6>
		return;

	uint16_t data_index = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	82fb      	strh	r3, [r7, #22]

	//Loads output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	82bb      	strh	r3, [r7, #20]
 8001706:	e0e4      	b.n	80018d2 <PDM_Load_Config_Buffer+0x1ea>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001708:	2300      	movs	r3, #0
 800170a:	74fb      	strb	r3, [r7, #19]
 800170c:	e073      	b.n	80017f6 <PDM_Load_Config_Buffer+0x10e>
		{
			Output_Pin[i].Enabled_Inputs[j]  = data_buffer[data_index++] << 8;
 800170e:	8afb      	ldrh	r3, [r7, #22]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	82fa      	strh	r2, [r7, #22]
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	8aba      	ldrh	r2, [r7, #20]
 8001720:	7cf9      	ldrb	r1, [r7, #19]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b29c      	uxth	r4, r3
 8001726:	4881      	ldr	r0, [pc, #516]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	4622      	mov	r2, r4
 8001734:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			Output_Pin[i].Enabled_Inputs[j] |= data_buffer[data_index++] & 0xFF;
 8001738:	8afb      	ldrh	r3, [r7, #22]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	82fa      	strh	r2, [r7, #22]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461c      	mov	r4, r3
 8001748:	8aba      	ldrh	r2, [r7, #20]
 800174a:	7cf9      	ldrb	r1, [r7, #19]
 800174c:	4877      	ldr	r0, [pc, #476]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	440b      	add	r3, r1
 8001758:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800175c:	b21a      	sxth	r2, r3
 800175e:	b223      	sxth	r3, r4
 8001760:	4313      	orrs	r3, r2
 8001762:	b21b      	sxth	r3, r3
 8001764:	8aba      	ldrh	r2, [r7, #20]
 8001766:	7cf9      	ldrb	r1, [r7, #19]
 8001768:	b29c      	uxth	r4, r3
 800176a:	4870      	ldr	r0, [pc, #448]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	440b      	add	r3, r1
 8001776:	4622      	mov	r2, r4
 8001778:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

			Output_Pin[i].Input_Levels[j]	 = data_buffer[data_index++] << 8;
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	82fa      	strh	r2, [r7, #22]
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	8aba      	ldrh	r2, [r7, #20]
 800178e:	7cf9      	ldrb	r1, [r7, #19]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b29c      	uxth	r4, r3
 8001794:	4865      	ldr	r0, [pc, #404]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	440b      	add	r3, r1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4403      	add	r3, r0
 80017a4:	4622      	mov	r2, r4
 80017a6:	809a      	strh	r2, [r3, #4]
			Output_Pin[i].Input_Levels[j]	|= data_buffer[data_index++] & 0xFF;
 80017a8:	8afb      	ldrh	r3, [r7, #22]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	82fa      	strh	r2, [r7, #22]
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461c      	mov	r4, r3
 80017b8:	8aba      	ldrh	r2, [r7, #20]
 80017ba:	7cf9      	ldrb	r1, [r7, #19]
 80017bc:	485b      	ldr	r0, [pc, #364]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	440b      	add	r3, r1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4403      	add	r3, r0
 80017cc:	889b      	ldrh	r3, [r3, #4]
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	b223      	sxth	r3, r4
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	8aba      	ldrh	r2, [r7, #20]
 80017d8:	7cf9      	ldrb	r1, [r7, #19]
 80017da:	b29c      	uxth	r4, r3
 80017dc:	4853      	ldr	r0, [pc, #332]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	440b      	add	r3, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4403      	add	r3, r0
 80017ec:	4622      	mov	r2, r4
 80017ee:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 2 ; j++)
 80017f0:	7cfb      	ldrb	r3, [r7, #19]
 80017f2:	3301      	adds	r3, #1
 80017f4:	74fb      	strb	r3, [r7, #19]
 80017f6:	7cfb      	ldrb	r3, [r7, #19]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d988      	bls.n	800170e <PDM_Load_Config_Buffer+0x26>
		}
		Output_Pin[i].Current_Thresholds   = data_buffer[data_index++] << 8;
 80017fc:	8afb      	ldrh	r3, [r7, #22]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	82fa      	strh	r2, [r7, #22]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	8aba      	ldrh	r2, [r7, #20]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b298      	uxth	r0, r3
 8001812:	4946      	ldr	r1, [pc, #280]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3308      	adds	r3, #8
 8001820:	4602      	mov	r2, r0
 8001822:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Current_Thresholds  |= data_buffer[data_index++] & 0xFF;
 8001824:	8afb      	ldrh	r3, [r7, #22]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	82fa      	strh	r2, [r7, #22]
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	8aba      	ldrh	r2, [r7, #20]
 8001836:	493d      	ldr	r1, [pc, #244]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3308      	adds	r3, #8
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b21a      	sxth	r2, r3
 8001848:	b203      	sxth	r3, r0
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	8aba      	ldrh	r2, [r7, #20]
 8001850:	b298      	uxth	r0, r3
 8001852:	4936      	ldr	r1, [pc, #216]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3308      	adds	r3, #8
 8001860:	4602      	mov	r2, r0
 8001862:	801a      	strh	r2, [r3, #0]

		Output_Pin[i].Timeout_Output_Fuse  = data_buffer[data_index++] << 8;
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	82fa      	strh	r2, [r7, #22]
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	8aba      	ldrh	r2, [r7, #20]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b298      	uxth	r0, r3
 800187a:	492c      	ldr	r1, [pc, #176]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	330a      	adds	r3, #10
 8001888:	4602      	mov	r2, r0
 800188a:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Timeout_Output_Fuse |= data_buffer[data_index++] & 0xFF;
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	82fa      	strh	r2, [r7, #22]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	8aba      	ldrh	r2, [r7, #20]
 800189e:	4923      	ldr	r1, [pc, #140]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	330a      	adds	r3, #10
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	b203      	sxth	r3, r0
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	8aba      	ldrh	r2, [r7, #20]
 80018b8:	b298      	uxth	r0, r3
 80018ba:	491c      	ldr	r1, [pc, #112]	; (800192c <PDM_Load_Config_Buffer+0x244>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	330a      	adds	r3, #10
 80018c8:	4602      	mov	r2, r0
 80018ca:	801a      	strh	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	82bb      	strh	r3, [r7, #20]
 80018d2:	8abb      	ldrh	r3, [r7, #20]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	f67f af17 	bls.w	8001708 <PDM_Load_Config_Buffer+0x20>
	}

	//Loads CAN bus baud rate
	CAN_Baud_Rate = data_buffer[data_index++];
 80018da:	8afb      	ldrh	r3, [r7, #22]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	82fa      	strh	r2, [r7, #22]
 80018e0:	461a      	mov	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <PDM_Load_Config_Buffer+0x248>)
 80018ea:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs general configuration (PWM CAN and PWM enabled)
	PWM_Pin_Status = data_buffer[data_index++];
 80018ec:	8afb      	ldrh	r3, [r7, #22]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	82fa      	strh	r2, [r7, #22]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <PDM_Load_Config_Buffer+0x24c>)
 80018fc:	701a      	strb	r2, [r3, #0]

	//Loads PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	823b      	strh	r3, [r7, #16]
 8001902:	e1b4      	b.n	8001c6e <PDM_Load_Config_Buffer+0x586>
	{
		PWM_Pins[i].PWM_Frequency = data_buffer[data_index++];
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	82fa      	strh	r2, [r7, #22]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	441a      	add	r2, r3
 8001910:	8a3b      	ldrh	r3, [r7, #16]
 8001912:	7810      	ldrb	r0, [r2, #0]
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <PDM_Load_Config_Buffer+0x250>)
 8001916:	f44f 710c 	mov.w	r1, #560	; 0x230
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	4602      	mov	r2, r0
 8001922:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e082      	b.n	8001a30 <PDM_Load_Config_Buffer+0x348>
 800192a:	bf00      	nop
 800192c:	20001050 	.word	0x20001050
 8001930:	2000104c 	.word	0x2000104c
 8001934:	20000ea4 	.word	0x20000ea4
 8001938:	20000534 	.word	0x20000534
		{
			PWM_Pins[i].Input_DC_Preset_Enable[j]  = data_buffer[data_index++] << 8;
 800193c:	8afb      	ldrh	r3, [r7, #22]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	82fa      	strh	r2, [r7, #22]
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b299      	uxth	r1, r3
 800194c:	8a3a      	ldrh	r2, [r7, #16]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	0209      	lsls	r1, r1, #8
 8001952:	b28c      	uxth	r4, r1
 8001954:	4939      	ldr	r1, [pc, #228]	; (8001a3c <PDM_Load_Config_Buffer+0x354>)
 8001956:	f44f 708c 	mov.w	r0, #280	; 0x118
 800195a:	fb00 f202 	mul.w	r2, r0, r2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	440b      	add	r3, r1
 8001964:	4622      	mov	r2, r4
 8001966:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset_Enable[j] |= data_buffer[data_index++] & 0xFF;
 8001968:	8afb      	ldrh	r3, [r7, #22]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	82fa      	strh	r2, [r7, #22]
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461c      	mov	r4, r3
 8001978:	8a3a      	ldrh	r2, [r7, #16]
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	492f      	ldr	r1, [pc, #188]	; (8001a3c <PDM_Load_Config_Buffer+0x354>)
 800197e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001982:	fb00 f202 	mul.w	r2, r0, r2
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	b21a      	sxth	r2, r3
 8001990:	b223      	sxth	r3, r4
 8001992:	4313      	orrs	r3, r2
 8001994:	b219      	sxth	r1, r3
 8001996:	8a3a      	ldrh	r2, [r7, #16]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	b28c      	uxth	r4, r1
 800199c:	4927      	ldr	r1, [pc, #156]	; (8001a3c <PDM_Load_Config_Buffer+0x354>)
 800199e:	f44f 708c 	mov.w	r0, #280	; 0x118
 80019a2:	fb00 f202 	mul.w	r2, r0, r2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	4622      	mov	r2, r4
 80019ae:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Input_DC_Preset[j] 		   = data_buffer[data_index++] << 8;
 80019b0:	8afb      	ldrh	r3, [r7, #22]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	82fa      	strh	r2, [r7, #22]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b299      	uxth	r1, r3
 80019c0:	8a3a      	ldrh	r2, [r7, #16]
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	0209      	lsls	r1, r1, #8
 80019c6:	b28c      	uxth	r4, r1
 80019c8:	491c      	ldr	r1, [pc, #112]	; (8001a3c <PDM_Load_Config_Buffer+0x354>)
 80019ca:	f44f 708c 	mov.w	r0, #280	; 0x118
 80019ce:	fb00 f202 	mul.w	r2, r0, r2
 80019d2:	4413      	add	r3, r2
 80019d4:	3304      	adds	r3, #4
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	440b      	add	r3, r1
 80019da:	4622      	mov	r2, r4
 80019dc:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset[j] 		  |= data_buffer[data_index++] & 0xFF;
 80019de:	8afb      	ldrh	r3, [r7, #22]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	82fa      	strh	r2, [r7, #22]
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461c      	mov	r4, r3
 80019ee:	8a3a      	ldrh	r2, [r7, #16]
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	4912      	ldr	r1, [pc, #72]	; (8001a3c <PDM_Load_Config_Buffer+0x354>)
 80019f4:	f44f 708c 	mov.w	r0, #280	; 0x118
 80019f8:	fb00 f202 	mul.w	r2, r0, r2
 80019fc:	4413      	add	r3, r2
 80019fe:	3304      	adds	r3, #4
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	440b      	add	r3, r1
 8001a04:	889b      	ldrh	r3, [r3, #4]
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	b223      	sxth	r3, r4
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b219      	sxth	r1, r3
 8001a0e:	8a3a      	ldrh	r2, [r7, #16]
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	b28c      	uxth	r4, r1
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <PDM_Load_Config_Buffer+0x354>)
 8001a16:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001a1a:	fb00 f202 	mul.w	r2, r0, r2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3304      	adds	r3, #4
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
 8001a26:	4622      	mov	r2, r4
 8001a28:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 4; j++)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d982      	bls.n	800193c <PDM_Load_Config_Buffer+0x254>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
 8001a3a:	e111      	b.n	8001c60 <PDM_Load_Config_Buffer+0x578>
 8001a3c:	20000534 	.word	0x20000534
		{
			PWM_Pins[i].Duty_Cycle_Preset[j]	 = data_buffer[data_index++] << 8;
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	82fa      	strh	r2, [r7, #22]
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	8a3a      	ldrh	r2, [r7, #16]
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	0209      	lsls	r1, r1, #8
 8001a56:	b28c      	uxth	r4, r1
 8001a58:	4993      	ldr	r1, [pc, #588]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001a5a:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001a5e:	fb00 f202 	mul.w	r2, r0, r2
 8001a62:	4413      	add	r3, r2
 8001a64:	3308      	adds	r3, #8
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	440b      	add	r3, r1
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Duty_Cycle_Preset[j]	|= data_buffer[data_index++] & 0xFF;
 8001a6e:	8afb      	ldrh	r3, [r7, #22]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	82fa      	strh	r2, [r7, #22]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	8a3a      	ldrh	r2, [r7, #16]
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	4989      	ldr	r1, [pc, #548]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001a84:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001a88:	fb00 f202 	mul.w	r2, r0, r2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3308      	adds	r3, #8
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	440b      	add	r3, r1
 8001a94:	889b      	ldrh	r3, [r3, #4]
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	b223      	sxth	r3, r4
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b219      	sxth	r1, r3
 8001a9e:	8a3a      	ldrh	r2, [r7, #16]
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	b28c      	uxth	r4, r1
 8001aa4:	4980      	ldr	r1, [pc, #512]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001aa6:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001aaa:	fb00 f202 	mul.w	r2, r0, r2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	440b      	add	r3, r1
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Command_Var_Position[j]  = data_buffer[data_index++];
 8001aba:	8afb      	ldrh	r3, [r7, #22]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	82fa      	strh	r2, [r7, #22]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	1899      	adds	r1, r3, r2
 8001ac6:	8a3a      	ldrh	r2, [r7, #16]
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	780c      	ldrb	r4, [r1, #0]
 8001acc:	4976      	ldr	r1, [pc, #472]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001ace:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001ad2:	fb00 f202 	mul.w	r2, r0, r2
 8001ad6:	440a      	add	r2, r1
 8001ad8:	4413      	add	r3, r2
 8001ada:	3318      	adds	r3, #24
 8001adc:	4622      	mov	r2, r4
 8001ade:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_CAN_ID[j]	 = data_buffer[data_index++] << 24;
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	82fa      	strh	r2, [r7, #22]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	0619      	lsls	r1, r3, #24
 8001af0:	8a3a      	ldrh	r2, [r7, #16]
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
 8001af4:	460c      	mov	r4, r1
 8001af6:	496c      	ldr	r1, [pc, #432]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001af8:	208c      	movs	r0, #140	; 0x8c
 8001afa:	fb00 f202 	mul.w	r2, r0, r2
 8001afe:	4413      	add	r3, r2
 8001b00:	3306      	adds	r3, #6
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	605c      	str	r4, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 16;
 8001b08:	8afb      	ldrh	r3, [r7, #22]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	82fa      	strh	r2, [r7, #22]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	041c      	lsls	r4, r3, #16
 8001b18:	8a3a      	ldrh	r2, [r7, #16]
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	4962      	ldr	r1, [pc, #392]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001b1e:	208c      	movs	r0, #140	; 0x8c
 8001b20:	fb00 f202 	mul.w	r2, r0, r2
 8001b24:	4413      	add	r3, r2
 8001b26:	3306      	adds	r3, #6
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4620      	mov	r0, r4
 8001b30:	8a39      	ldrh	r1, [r7, #16]
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	4302      	orrs	r2, r0
 8001b36:	485c      	ldr	r0, [pc, #368]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001b38:	248c      	movs	r4, #140	; 0x8c
 8001b3a:	fb04 f101 	mul.w	r1, r4, r1
 8001b3e:	440b      	add	r3, r1
 8001b40:	3306      	adds	r3, #6
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 8;
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	82fa      	strh	r2, [r7, #22]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	021c      	lsls	r4, r3, #8
 8001b58:	8a3a      	ldrh	r2, [r7, #16]
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	4952      	ldr	r1, [pc, #328]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001b5e:	208c      	movs	r0, #140	; 0x8c
 8001b60:	fb00 f202 	mul.w	r2, r0, r2
 8001b64:	4413      	add	r3, r2
 8001b66:	3306      	adds	r3, #6
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4620      	mov	r0, r4
 8001b70:	8a39      	ldrh	r1, [r7, #16]
 8001b72:	7bbb      	ldrb	r3, [r7, #14]
 8001b74:	4302      	orrs	r2, r0
 8001b76:	484c      	ldr	r0, [pc, #304]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001b78:	248c      	movs	r4, #140	; 0x8c
 8001b7a:	fb04 f101 	mul.w	r1, r4, r1
 8001b7e:	440b      	add	r3, r1
 8001b80:	3306      	adds	r3, #6
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4403      	add	r3, r0
 8001b86:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] & 0xFF;
 8001b88:	8afb      	ldrh	r3, [r7, #22]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	82fa      	strh	r2, [r7, #22]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461c      	mov	r4, r3
 8001b98:	8a3a      	ldrh	r2, [r7, #16]
 8001b9a:	7bbb      	ldrb	r3, [r7, #14]
 8001b9c:	4942      	ldr	r1, [pc, #264]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001b9e:	208c      	movs	r0, #140	; 0x8c
 8001ba0:	fb00 f202 	mul.w	r2, r0, r2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4620      	mov	r0, r4
 8001bb0:	8a39      	ldrh	r1, [r7, #16]
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	4302      	orrs	r2, r0
 8001bb6:	483c      	ldr	r0, [pc, #240]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001bb8:	248c      	movs	r4, #140	; 0x8c
 8001bba:	fb04 f101 	mul.w	r1, r4, r1
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3306      	adds	r3, #6
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4403      	add	r3, r0
 8001bc6:	605a      	str	r2, [r3, #4]

			PWM_Pins[i].Map_Lengths[j]			 = data_buffer[data_index++] & 0xFF;
 8001bc8:	8afb      	ldrh	r3, [r7, #22]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	82fa      	strh	r2, [r7, #22]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1899      	adds	r1, r3, r2
 8001bd4:	8a3a      	ldrh	r2, [r7, #16]
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	780c      	ldrb	r4, [r1, #0]
 8001bda:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001bdc:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001be0:	fb00 f202 	mul.w	r2, r0, r2
 8001be4:	440a      	add	r2, r1
 8001be6:	4413      	add	r3, r2
 8001be8:	3324      	adds	r3, #36	; 0x24
 8001bea:	4622      	mov	r2, r4
 8001bec:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_Lim[j][0]	 = data_buffer[data_index++] << 8;
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	82fa      	strh	r2, [r7, #22]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	0219      	lsls	r1, r3, #8
 8001bfe:	8a3a      	ldrh	r2, [r7, #16]
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	b20c      	sxth	r4, r1
 8001c04:	4928      	ldr	r1, [pc, #160]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001c06:	208c      	movs	r0, #140	; 0x8c
 8001c08:	fb00 f202 	mul.w	r2, r0, r2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	330a      	adds	r3, #10
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	4622      	mov	r2, r4
 8001c16:	805a      	strh	r2, [r3, #2]
			PWM_Pins[i].Command_Var_Lim[j][1]	|= data_buffer[data_index++] & 0xFF;
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	82fa      	strh	r2, [r7, #22]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461c      	mov	r4, r3
 8001c28:	8a3a      	ldrh	r2, [r7, #16]
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	491e      	ldr	r1, [pc, #120]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001c2e:	208c      	movs	r0, #140	; 0x8c
 8001c30:	fb00 f202 	mul.w	r2, r0, r2
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8001c3e:	b221      	sxth	r1, r4
 8001c40:	8a3a      	ldrh	r2, [r7, #16]
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	4301      	orrs	r1, r0
 8001c46:	b20c      	sxth	r4, r1
 8001c48:	4917      	ldr	r1, [pc, #92]	; (8001ca8 <PDM_Load_Config_Buffer+0x5c0>)
 8001c4a:	208c      	movs	r0, #140	; 0x8c
 8001c4c:	fb00 f202 	mul.w	r2, r0, r2
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	4622      	mov	r2, r4
 8001c58:	859a      	strh	r2, [r3, #44]	; 0x2c
		for(uint8_t j = 0; j < 2; j++)
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	73bb      	strb	r3, [r7, #14]
 8001c60:	7bbb      	ldrb	r3, [r7, #14]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	f67f aeec 	bls.w	8001a40 <PDM_Load_Config_Buffer+0x358>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001c68:	8a3b      	ldrh	r3, [r7, #16]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	823b      	strh	r3, [r7, #16]
 8001c6e:	8a3b      	ldrh	r3, [r7, #16]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	f67f ae47 	bls.w	8001904 <PDM_Load_Config_Buffer+0x21c>
		}
	}

	//Loads each data channel transmission frequency
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	81bb      	strh	r3, [r7, #12]
 8001c7a:	e00c      	b.n	8001c96 <PDM_Load_Config_Buffer+0x5ae>
	{
		Data_Freq_Buffer[i] = data_buffer[data_index++];
 8001c7c:	8afb      	ldrh	r3, [r7, #22]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	82fa      	strh	r2, [r7, #22]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	441a      	add	r2, r3
 8001c88:	89bb      	ldrh	r3, [r7, #12]
 8001c8a:	7811      	ldrb	r1, [r2, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <PDM_Load_Config_Buffer+0x5c4>)
 8001c8e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001c90:	89bb      	ldrh	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	81bb      	strh	r3, [r7, #12]
 8001c96:	89bb      	ldrh	r3, [r7, #12]
 8001c98:	2b1d      	cmp	r3, #29
 8001c9a:	d9ef      	bls.n	8001c7c <PDM_Load_Config_Buffer+0x594>
	}

	return;
 8001c9c:	e000      	b.n	8001ca0 <PDM_Load_Config_Buffer+0x5b8>
		return;
 8001c9e:	bf00      	nop
}
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc90      	pop	{r4, r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000534 	.word	0x20000534
 8001cac:	20000f30 	.word	0x20000f30

08001cb0 <PDM_Load_Map_Buffer>:

//Use to load pwm 3D map into a buffer
//uint8_t *data_buffer - buffer to receive 3D map
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_MAP_BUFFER_SIZE)
static void PDM_Load_Map_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001cb0:	b4b0      	push	{r4, r5, r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_MAP_BUFFER_SIZE)
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001cc2:	d169      	bne.n	8001d98 <PDM_Load_Map_Buffer+0xe8>
		return;

	uint16_t data_index = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	81fb      	strh	r3, [r7, #14]

	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	81bb      	strh	r3, [r7, #12]
 8001ccc:	e060      	b.n	8001d90 <PDM_Load_Map_Buffer+0xe0>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	72fb      	strb	r3, [r7, #11]
 8001cd2:	e057      	b.n	8001d84 <PDM_Load_Map_Buffer+0xd4>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	72bb      	strb	r3, [r7, #10]
 8001cd8:	e04e      	b.n	8001d78 <PDM_Load_Map_Buffer+0xc8>
			{
				PWM_Pins[i].Duty_Cycle_Map[j][k]  = data_buffer[data_index++] << 8;
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	81fa      	strh	r2, [r7, #14]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	89b8      	ldrh	r0, [r7, #12]
 8001cec:	7afa      	ldrb	r2, [r7, #11]
 8001cee:	7ab9      	ldrb	r1, [r7, #10]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29d      	uxth	r5, r3
 8001cf4:	4c2b      	ldr	r4, [pc, #172]	; (8001da4 <PDM_Load_Map_Buffer+0xf4>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d00:	fb02 f200 	mul.w	r2, r2, r0
 8001d04:	4413      	add	r3, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	3334      	adds	r3, #52	; 0x34
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4423      	add	r3, r4
 8001d0e:	462a      	mov	r2, r5
 8001d10:	80da      	strh	r2, [r3, #6]
				PWM_Pins[i].Duty_Cycle_Map[j][k] |= data_buffer[data_index++] & 0xFF;
 8001d12:	89fb      	ldrh	r3, [r7, #14]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	81fa      	strh	r2, [r7, #14]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461d      	mov	r5, r3
 8001d22:	89b8      	ldrh	r0, [r7, #12]
 8001d24:	7afa      	ldrb	r2, [r7, #11]
 8001d26:	7ab9      	ldrb	r1, [r7, #10]
 8001d28:	4c1e      	ldr	r4, [pc, #120]	; (8001da4 <PDM_Load_Map_Buffer+0xf4>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d34:	fb02 f200 	mul.w	r2, r2, r0
 8001d38:	4413      	add	r3, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3334      	adds	r3, #52	; 0x34
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4423      	add	r3, r4
 8001d42:	88db      	ldrh	r3, [r3, #6]
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	b22b      	sxth	r3, r5
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	89b8      	ldrh	r0, [r7, #12]
 8001d4e:	7afa      	ldrb	r2, [r7, #11]
 8001d50:	7ab9      	ldrb	r1, [r7, #10]
 8001d52:	b29d      	uxth	r5, r3
 8001d54:	4c13      	ldr	r4, [pc, #76]	; (8001da4 <PDM_Load_Map_Buffer+0xf4>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d60:	fb02 f200 	mul.w	r2, r2, r0
 8001d64:	4413      	add	r3, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	3334      	adds	r3, #52	; 0x34
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4423      	add	r3, r4
 8001d6e:	462a      	mov	r2, r5
 8001d70:	80da      	strh	r2, [r3, #6]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001d72:	7abb      	ldrb	r3, [r7, #10]
 8001d74:	3301      	adds	r3, #1
 8001d76:	72bb      	strb	r3, [r7, #10]
 8001d78:	7abb      	ldrb	r3, [r7, #10]
 8001d7a:	2b0e      	cmp	r3, #14
 8001d7c:	d9ad      	bls.n	8001cda <PDM_Load_Map_Buffer+0x2a>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	3301      	adds	r3, #1
 8001d82:	72fb      	strb	r3, [r7, #11]
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	2b0e      	cmp	r3, #14
 8001d88:	d9a4      	bls.n	8001cd4 <PDM_Load_Map_Buffer+0x24>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001d8a:	89bb      	ldrh	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	81bb      	strh	r3, [r7, #12]
 8001d90:	89bb      	ldrh	r3, [r7, #12]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d99b      	bls.n	8001cce <PDM_Load_Map_Buffer+0x1e>
			}
		}
	}

	return;
 8001d96:	e000      	b.n	8001d9a <PDM_Load_Map_Buffer+0xea>
		return;
 8001d98:	bf00      	nop
}
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bcb0      	pop	{r4, r5, r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000534 	.word	0x20000534

08001da8 <PDM_Write_Config_Buffer>:

//Use to write pin, current limit and basic pwm control into their respective variables
//uint8_t *data_buffer - buffer to send config
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_BUFFER_SIZE)
static void PDM_Write_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001da8:	b490      	push	{r4, r7}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_BUFFER_SIZE)
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001dba:	f040 820b 	bne.w	80021d4 <PDM_Write_Config_Buffer+0x42c>
		return;

	uint16_t data_index = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	82fb      	strh	r3, [r7, #22]

	//Writes output configurations (enabled inputs, levels, fuse current thresholds and fuse timeouts)
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	82bb      	strh	r3, [r7, #20]
 8001dc6:	e0a1      	b.n	8001f0c <PDM_Write_Config_Buffer+0x164>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	74fb      	strb	r3, [r7, #19]
 8001dcc:	e050      	b.n	8001e70 <PDM_Write_Config_Buffer+0xc8>
		{
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] >> 8;
 8001dce:	8aba      	ldrh	r2, [r7, #20]
 8001dd0:	7cf9      	ldrb	r1, [r7, #19]
 8001dd2:	4891      	ldr	r0, [pc, #580]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	440b      	add	r3, r1
 8001dde:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	8afb      	ldrh	r3, [r7, #22]
 8001de8:	1c59      	adds	r1, r3, #1
 8001dea:	82f9      	strh	r1, [r7, #22]
 8001dec:	4619      	mov	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	440b      	add	r3, r1
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] & 0xFF;
 8001df6:	8aba      	ldrh	r2, [r7, #20]
 8001df8:	7cf9      	ldrb	r1, [r7, #19]
 8001dfa:	4887      	ldr	r0, [pc, #540]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	440b      	add	r3, r1
 8001e06:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8001e0a:	8afb      	ldrh	r3, [r7, #22]
 8001e0c:	1c59      	adds	r1, r3, #1
 8001e0e:	82f9      	strh	r1, [r7, #22]
 8001e10:	4619      	mov	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	440b      	add	r3, r1
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] >> 8;
 8001e1a:	8aba      	ldrh	r2, [r7, #20]
 8001e1c:	7cf9      	ldrb	r1, [r7, #19]
 8001e1e:	487e      	ldr	r0, [pc, #504]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4403      	add	r3, r0
 8001e2e:	889b      	ldrh	r3, [r3, #4]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	8afb      	ldrh	r3, [r7, #22]
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	82f9      	strh	r1, [r7, #22]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	440b      	add	r3, r1
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] & 0xFF;
 8001e44:	8aba      	ldrh	r2, [r7, #20]
 8001e46:	7cf9      	ldrb	r1, [r7, #19]
 8001e48:	4873      	ldr	r0, [pc, #460]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4403      	add	r3, r0
 8001e58:	889a      	ldrh	r2, [r3, #4]
 8001e5a:	8afb      	ldrh	r3, [r7, #22]
 8001e5c:	1c59      	adds	r1, r3, #1
 8001e5e:	82f9      	strh	r1, [r7, #22]
 8001e60:	4619      	mov	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	440b      	add	r3, r1
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2 ; j++)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	74fb      	strb	r3, [r7, #19]
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d9ab      	bls.n	8001dce <PDM_Write_Config_Buffer+0x26>
		}
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds >> 8;
 8001e76:	8aba      	ldrh	r2, [r7, #20]
 8001e78:	4967      	ldr	r1, [pc, #412]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3308      	adds	r3, #8
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	1c59      	adds	r1, r3, #1
 8001e90:	82f9      	strh	r1, [r7, #22]
 8001e92:	4619      	mov	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	440b      	add	r3, r1
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds & 0xFF;
 8001e9c:	8aba      	ldrh	r2, [r7, #20]
 8001e9e:	495e      	ldr	r1, [pc, #376]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3308      	adds	r3, #8
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	8afb      	ldrh	r3, [r7, #22]
 8001eb0:	1c59      	adds	r1, r3, #1
 8001eb2:	82f9      	strh	r1, [r7, #22]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	440b      	add	r3, r1
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse >> 8;
 8001ebe:	8aba      	ldrh	r2, [r7, #20]
 8001ec0:	4955      	ldr	r1, [pc, #340]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	330a      	adds	r3, #10
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	1c59      	adds	r1, r3, #1
 8001ed8:	82f9      	strh	r1, [r7, #22]
 8001eda:	4619      	mov	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	440b      	add	r3, r1
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse & 0xFF;
 8001ee4:	8aba      	ldrh	r2, [r7, #20]
 8001ee6:	494c      	ldr	r1, [pc, #304]	; (8002018 <PDM_Write_Config_Buffer+0x270>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	330a      	adds	r3, #10
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	8afb      	ldrh	r3, [r7, #22]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	82f9      	strh	r1, [r7, #22]
 8001efc:	4619      	mov	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	440b      	add	r3, r1
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001f06:	8abb      	ldrh	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	82bb      	strh	r3, [r7, #20]
 8001f0c:	8abb      	ldrh	r3, [r7, #20]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	f67f af5a 	bls.w	8001dc8 <PDM_Write_Config_Buffer+0x20>
	}

	//Writes CAN bus baud rate
	data_buffer[data_index++] = CAN_Baud_Rate;
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	82fa      	strh	r2, [r7, #22]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a3e      	ldr	r2, [pc, #248]	; (800201c <PDM_Write_Config_Buffer+0x274>)
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs general configuration (PWM CAN and PWM enabled)
	data_buffer[data_index++] = PWM_Pin_Status;
 8001f26:	8afb      	ldrh	r3, [r7, #22]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	82fa      	strh	r2, [r7, #22]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <PDM_Write_Config_Buffer+0x278>)
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	701a      	strb	r2, [r3, #0]

	//Writes PWM outputs specific configuration (frequency, duty cycle presets and enabled inputs,
	//command variable position inside CAN packet, CAN packet ID, 3D map lengths and limits)
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	823b      	strh	r3, [r7, #16]
 8001f3c:	e145      	b.n	80021ca <PDM_Write_Config_Buffer+0x422>
	{
		data_buffer[data_index++] = PWM_Pins[i].PWM_Frequency;
 8001f3e:	8a3a      	ldrh	r2, [r7, #16]
 8001f40:	8afb      	ldrh	r3, [r7, #22]
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	82f9      	strh	r1, [r7, #22]
 8001f46:	4619      	mov	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	4935      	ldr	r1, [pc, #212]	; (8002024 <PDM_Write_Config_Buffer+0x27c>)
 8001f4e:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001f52:	fb00 f202 	mul.w	r2, r0, r2
 8001f56:	440a      	add	r2, r1
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e054      	b.n	800200c <PDM_Write_Config_Buffer+0x264>
		{
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] >> 8;
 8001f62:	8a3a      	ldrh	r2, [r7, #16]
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	492f      	ldr	r1, [pc, #188]	; (8002024 <PDM_Write_Config_Buffer+0x27c>)
 8001f68:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001f6c:	fb00 f202 	mul.w	r2, r0, r2
 8001f70:	4413      	add	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	440b      	add	r3, r1
 8001f76:	889b      	ldrh	r3, [r3, #4]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	82f9      	strh	r1, [r7, #22]
 8001f82:	4619      	mov	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	440b      	add	r3, r1
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] & 0xFF;
 8001f8c:	8a3a      	ldrh	r2, [r7, #16]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	4924      	ldr	r1, [pc, #144]	; (8002024 <PDM_Write_Config_Buffer+0x27c>)
 8001f92:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001f96:	fb00 f202 	mul.w	r2, r0, r2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	440b      	add	r3, r1
 8001fa0:	889a      	ldrh	r2, [r3, #4]
 8001fa2:	8afb      	ldrh	r3, [r7, #22]
 8001fa4:	1c59      	adds	r1, r3, #1
 8001fa6:	82f9      	strh	r1, [r7, #22]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	440b      	add	r3, r1
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] >> 8;
 8001fb2:	8a3a      	ldrh	r2, [r7, #16]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	491b      	ldr	r1, [pc, #108]	; (8002024 <PDM_Write_Config_Buffer+0x27c>)
 8001fb8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001fbc:	fb00 f202 	mul.w	r2, r0, r2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	440b      	add	r3, r1
 8001fc8:	889b      	ldrh	r3, [r3, #4]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	8afb      	ldrh	r3, [r7, #22]
 8001fd0:	1c59      	adds	r1, r3, #1
 8001fd2:	82f9      	strh	r1, [r7, #22]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	440b      	add	r3, r1
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] & 0xFF;
 8001fde:	8a3a      	ldrh	r2, [r7, #16]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4910      	ldr	r1, [pc, #64]	; (8002024 <PDM_Write_Config_Buffer+0x27c>)
 8001fe4:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001fe8:	fb00 f202 	mul.w	r2, r0, r2
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	889a      	ldrh	r2, [r3, #4]
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	82f9      	strh	r1, [r7, #22]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	440b      	add	r3, r1
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 4; j++)
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	3301      	adds	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d9a7      	bls.n	8001f62 <PDM_Write_Config_Buffer+0x1ba>
		}

		for(uint8_t j = 0; j < 2; j++)
 8002012:	2300      	movs	r3, #0
 8002014:	73bb      	strb	r3, [r7, #14]
 8002016:	e0d1      	b.n	80021bc <PDM_Write_Config_Buffer+0x414>
 8002018:	20001050 	.word	0x20001050
 800201c:	2000104c 	.word	0x2000104c
 8002020:	20000ea4 	.word	0x20000ea4
 8002024:	20000534 	.word	0x20000534
		{
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] >> 8;
 8002028:	8a3a      	ldrh	r2, [r7, #16]
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	496c      	ldr	r1, [pc, #432]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 800202e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002032:	fb00 f202 	mul.w	r2, r0, r2
 8002036:	4413      	add	r3, r2
 8002038:	3308      	adds	r3, #8
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	440b      	add	r3, r1
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29a      	uxth	r2, r3
 8002044:	8afb      	ldrh	r3, [r7, #22]
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	82f9      	strh	r1, [r7, #22]
 800204a:	4619      	mov	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	440b      	add	r3, r1
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] & 0xFF;
 8002054:	8a3a      	ldrh	r2, [r7, #16]
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	4961      	ldr	r1, [pc, #388]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 800205a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800205e:	fb00 f202 	mul.w	r2, r0, r2
 8002062:	4413      	add	r3, r2
 8002064:	3308      	adds	r3, #8
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	440b      	add	r3, r1
 800206a:	889a      	ldrh	r2, [r3, #4]
 800206c:	8afb      	ldrh	r3, [r7, #22]
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	82f9      	strh	r1, [r7, #22]
 8002072:	4619      	mov	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	440b      	add	r3, r1
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Position[j];
 800207c:	8a39      	ldrh	r1, [r7, #16]
 800207e:	7bba      	ldrb	r2, [r7, #14]
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	1c58      	adds	r0, r3, #1
 8002084:	82f8      	strh	r0, [r7, #22]
 8002086:	4618      	mov	r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4403      	add	r3, r0
 800208c:	4854      	ldr	r0, [pc, #336]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 800208e:	f44f 740c 	mov.w	r4, #560	; 0x230
 8002092:	fb04 f101 	mul.w	r1, r4, r1
 8002096:	4401      	add	r1, r0
 8002098:	440a      	add	r2, r1
 800209a:	3218      	adds	r2, #24
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 24;
 80020a0:	8a3a      	ldrh	r2, [r7, #16]
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	494e      	ldr	r1, [pc, #312]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 80020a6:	208c      	movs	r0, #140	; 0x8c
 80020a8:	fb00 f202 	mul.w	r2, r0, r2
 80020ac:	4413      	add	r3, r2
 80020ae:	3306      	adds	r3, #6
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0e1a      	lsrs	r2, r3, #24
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	82f9      	strh	r1, [r7, #22]
 80020be:	4619      	mov	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	440b      	add	r3, r1
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 16;
 80020c8:	8a3a      	ldrh	r2, [r7, #16]
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	4944      	ldr	r1, [pc, #272]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 80020ce:	208c      	movs	r0, #140	; 0x8c
 80020d0:	fb00 f202 	mul.w	r2, r0, r2
 80020d4:	4413      	add	r3, r2
 80020d6:	3306      	adds	r3, #6
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0c1a      	lsrs	r2, r3, #16
 80020e0:	8afb      	ldrh	r3, [r7, #22]
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	82f9      	strh	r1, [r7, #22]
 80020e6:	4619      	mov	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	440b      	add	r3, r1
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 8;
 80020f0:	8a3a      	ldrh	r2, [r7, #16]
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	493a      	ldr	r1, [pc, #232]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 80020f6:	208c      	movs	r0, #140	; 0x8c
 80020f8:	fb00 f202 	mul.w	r2, r0, r2
 80020fc:	4413      	add	r3, r2
 80020fe:	3306      	adds	r3, #6
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	0a1a      	lsrs	r2, r3, #8
 8002108:	8afb      	ldrh	r3, [r7, #22]
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	82f9      	strh	r1, [r7, #22]
 800210e:	4619      	mov	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	440b      	add	r3, r1
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] & 0xFF;
 8002118:	8a3a      	ldrh	r2, [r7, #16]
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	4930      	ldr	r1, [pc, #192]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 800211e:	208c      	movs	r0, #140	; 0x8c
 8002120:	fb00 f202 	mul.w	r2, r0, r2
 8002124:	4413      	add	r3, r2
 8002126:	3306      	adds	r3, #6
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	8afb      	ldrh	r3, [r7, #22]
 8002130:	1c59      	adds	r1, r3, #1
 8002132:	82f9      	strh	r1, [r7, #22]
 8002134:	4619      	mov	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	440b      	add	r3, r1
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Map_Lengths[j];
 800213e:	8a39      	ldrh	r1, [r7, #16]
 8002140:	7bba      	ldrb	r2, [r7, #14]
 8002142:	8afb      	ldrh	r3, [r7, #22]
 8002144:	1c58      	adds	r0, r3, #1
 8002146:	82f8      	strh	r0, [r7, #22]
 8002148:	4618      	mov	r0, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4403      	add	r3, r0
 800214e:	4824      	ldr	r0, [pc, #144]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 8002150:	f44f 740c 	mov.w	r4, #560	; 0x230
 8002154:	fb04 f101 	mul.w	r1, r4, r1
 8002158:	4401      	add	r1, r0
 800215a:	440a      	add	r2, r1
 800215c:	3224      	adds	r2, #36	; 0x24
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] >> 8;
 8002162:	8a3a      	ldrh	r2, [r7, #16]
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	491e      	ldr	r1, [pc, #120]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 8002168:	208c      	movs	r0, #140	; 0x8c
 800216a:	fb00 f202 	mul.w	r2, r0, r2
 800216e:	4413      	add	r3, r2
 8002170:	330a      	adds	r3, #10
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800217a:	121b      	asrs	r3, r3, #8
 800217c:	b21a      	sxth	r2, r3
 800217e:	8afb      	ldrh	r3, [r7, #22]
 8002180:	1c59      	adds	r1, r3, #1
 8002182:	82f9      	strh	r1, [r7, #22]
 8002184:	4619      	mov	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	440b      	add	r3, r1
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] & 0xFF;
 800218e:	8a3a      	ldrh	r2, [r7, #16]
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	4913      	ldr	r1, [pc, #76]	; (80021e0 <PDM_Write_Config_Buffer+0x438>)
 8002194:	208c      	movs	r0, #140	; 0x8c
 8002196:	fb00 f202 	mul.w	r2, r0, r2
 800219a:	4413      	add	r3, r2
 800219c:	330a      	adds	r3, #10
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80021a6:	8afb      	ldrh	r3, [r7, #22]
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	82f9      	strh	r1, [r7, #22]
 80021ac:	4619      	mov	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	440b      	add	r3, r1
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2; j++)
 80021b6:	7bbb      	ldrb	r3, [r7, #14]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73bb      	strb	r3, [r7, #14]
 80021bc:	7bbb      	ldrb	r3, [r7, #14]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f67f af32 	bls.w	8002028 <PDM_Write_Config_Buffer+0x280>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80021c4:	8a3b      	ldrh	r3, [r7, #16]
 80021c6:	3301      	adds	r3, #1
 80021c8:	823b      	strh	r3, [r7, #16]
 80021ca:	8a3b      	ldrh	r3, [r7, #16]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	f67f aeb6 	bls.w	8001f3e <PDM_Write_Config_Buffer+0x196>
		}
	}

	return;
 80021d2:	e000      	b.n	80021d6 <PDM_Write_Config_Buffer+0x42e>
		return;
 80021d4:	bf00      	nop
}
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc90      	pop	{r4, r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000534 	.word	0x20000534

080021e4 <PDM_Write_Map_Buffer>:

//Use to load pwm 3D map into their respective variables
//uint8_t *data_buffer - buffer to send 3D map
//uint16_t Size - size of the buffer, must match the size of the configuration (EEPROM_MAP_BUFFER_SIZE)
static void PDM_Write_Map_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 80021e4:	b490      	push	{r4, r7}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
	//Checks if data buffer has the correct size
	if(Size != EEPROM_MAP_BUFFER_SIZE)
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80021f6:	d151      	bne.n	800229c <PDM_Write_Map_Buffer+0xb8>
		return;

	uint16_t data_index = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	81fb      	strh	r3, [r7, #14]

	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	81bb      	strh	r3, [r7, #12]
 8002200:	e048      	b.n	8002294 <PDM_Write_Map_Buffer+0xb0>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002202:	2300      	movs	r3, #0
 8002204:	72fb      	strb	r3, [r7, #11]
 8002206:	e03f      	b.n	8002288 <PDM_Write_Map_Buffer+0xa4>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8002208:	2300      	movs	r3, #0
 800220a:	72bb      	strb	r3, [r7, #10]
 800220c:	e036      	b.n	800227c <PDM_Write_Map_Buffer+0x98>
			{
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] >> 8;
 800220e:	89b8      	ldrh	r0, [r7, #12]
 8002210:	7afa      	ldrb	r2, [r7, #11]
 8002212:	7ab9      	ldrb	r1, [r7, #10]
 8002214:	4c24      	ldr	r4, [pc, #144]	; (80022a8 <PDM_Write_Map_Buffer+0xc4>)
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002220:	fb02 f200 	mul.w	r2, r2, r0
 8002224:	4413      	add	r3, r2
 8002226:	440b      	add	r3, r1
 8002228:	3334      	adds	r3, #52	; 0x34
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4423      	add	r3, r4
 800222e:	88db      	ldrh	r3, [r3, #6]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	b29a      	uxth	r2, r3
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	81f9      	strh	r1, [r7, #14]
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	440b      	add	r3, r1
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] & 0xFF;
 8002244:	89b8      	ldrh	r0, [r7, #12]
 8002246:	7afa      	ldrb	r2, [r7, #11]
 8002248:	7ab9      	ldrb	r1, [r7, #10]
 800224a:	4c17      	ldr	r4, [pc, #92]	; (80022a8 <PDM_Write_Map_Buffer+0xc4>)
 800224c:	4613      	mov	r3, r2
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002256:	fb02 f200 	mul.w	r2, r2, r0
 800225a:	4413      	add	r3, r2
 800225c:	440b      	add	r3, r1
 800225e:	3334      	adds	r3, #52	; 0x34
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4423      	add	r3, r4
 8002264:	88da      	ldrh	r2, [r3, #6]
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	81f9      	strh	r1, [r7, #14]
 800226c:	4619      	mov	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	440b      	add	r3, r1
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8002276:	7abb      	ldrb	r3, [r7, #10]
 8002278:	3301      	adds	r3, #1
 800227a:	72bb      	strb	r3, [r7, #10]
 800227c:	7abb      	ldrb	r3, [r7, #10]
 800227e:	2b0e      	cmp	r3, #14
 8002280:	d9c5      	bls.n	800220e <PDM_Write_Map_Buffer+0x2a>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002282:	7afb      	ldrb	r3, [r7, #11]
 8002284:	3301      	adds	r3, #1
 8002286:	72fb      	strb	r3, [r7, #11]
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	2b0e      	cmp	r3, #14
 800228c:	d9bc      	bls.n	8002208 <PDM_Write_Map_Buffer+0x24>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800228e:	89bb      	ldrh	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	81bb      	strh	r3, [r7, #12]
 8002294:	89bb      	ldrh	r3, [r7, #12]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d9b3      	bls.n	8002202 <PDM_Write_Map_Buffer+0x1e>
			}
		}
	}

	return;
 800229a:	e000      	b.n	800229e <PDM_Write_Map_Buffer+0xba>
		return;
 800229c:	bf00      	nop
}
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc90      	pop	{r4, r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000534 	.word	0x20000534

080022ac <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	6018      	str	r0, [r3, #0]
 80022b8:	463b      	mov	r3, r7
 80022ba:	6019      	str	r1, [r3, #0]
	uint8_t data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE];

	//Reads general configuration from EEPROM
	AT24Cxx_Read(hi2c, 0x0000, data_buffer, EEPROM_BUFFER_SIZE);
 80022bc:	f107 0208 	add.w	r2, r7, #8
 80022c0:	4638      	mov	r0, r7
 80022c2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80022c6:	2100      	movs	r1, #0
 80022c8:	6800      	ldr	r0, [r0, #0]
 80022ca:	f7fe f917 	bl	80004fc <AT24Cxx_Read>

	//Loads configuration into global variables
	PDM_Load_Config_Buffer(data_buffer, EEPROM_BUFFER_SIZE);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fa06 	bl	80016e8 <PDM_Load_Config_Buffer>

	//Reads PWM 3D maps from EEPROM
	AT24Cxx_Read(hi2c, EEPROM_BUFFER_SIZE, &data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80022e4:	4638      	mov	r0, r7
 80022e6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80022ea:	f44f 7190 	mov.w	r1, #288	; 0x120
 80022ee:	6800      	ldr	r0, [r0, #0]
 80022f0:	f7fe f904 	bl	80004fc <AT24Cxx_Read>

	//Load maps into global PWM structs
	PDM_Load_Map_Buffer(&data_buffer[EEPROM_BUFFER_SIZE], EEPROM_MAP_BUFFER_SIZE);
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80022fc:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fcd5 	bl	8001cb0 <PDM_Load_Map_Buffer>

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 8002306:	f000 fa53 	bl	80027b0 <PDM_Hard_Code_Config>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 800230a:	2300      	movs	r3, #0
 800230c:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
 8002310:	e00d      	b.n	800232e <PDM_Init+0x82>
 8002312:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8002316:	f8b7 24ae 	ldrh.w	r2, [r7, #1198]	; 0x4ae
 800231a:	0052      	lsls	r2, r2, #1
 800231c:	b291      	uxth	r1, r2
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <PDM_Init+0xe0>)
 8002320:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002324:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8002328:	3301      	adds	r3, #1
 800232a:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
 800232e:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8002332:	2b1d      	cmp	r3, #29
 8002334:	d9ed      	bls.n	8002312 <PDM_Init+0x66>

	//Initializes each PWM able output
	for(uint8_t i = 0; i < 4; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
 800233c:	e012      	b.n	8002364 <PDM_Init+0xb8>
	{
		PDM_PWM_Init(hcan, &PWM_Pins[i], i);
 800233e:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 8002342:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <PDM_Init+0xe4>)
 800234c:	1899      	adds	r1, r3, r2
 800234e:	f897 24ad 	ldrb.w	r2, [r7, #1197]	; 0x4ad
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f001 f8c3 	bl	80034e0 <PDM_PWM_Init>
	for(uint8_t i = 0; i < 4; i++)
 800235a:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800235e:	3301      	adds	r3, #1
 8002360:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
 8002364:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 8002368:	2b03      	cmp	r3, #3
 800236a:	d9e8      	bls.n	800233e <PDM_Init+0x92>
	}

	//Checks input pin levels
	PDM_Input_Process();
 800236c:	f000 fab6 	bl	80028dc <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, CAN_Baud_Rate);
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <PDM_Init+0xe8>)
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4611      	mov	r1, r2
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f7fe ff91 	bl	80012a0 <PDM_CAN_Init>

	//Sets outputs based on input levels
	PDM_Output_Process();
 800237e:	f000 fbad 	bl	8002adc <PDM_Output_Process>

	return;
 8002382:	bf00      	nop
}
 8002384:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20001164 	.word	0x20001164
 8002390:	20000534 	.word	0x20000534
 8002394:	2000104c 	.word	0x2000104c

08002398 <PDM_USB_Receive>:
//Will setup pwm 3D maps if Data[0] == 0xF0 and Data[1] == 0xF0
//uint8_t *Data - buffer received via USB port
//uint16_t Size - size of the buffer must be 6 bytes bigger than the information received (2 bytes of command and 4 bytes of CRC)
//Returns HAL_I2C_Mem_Write_DMA status
HAL_StatusTypeDef PDM_USB_Receive(uint8_t *Data, uint16_t Size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
	uint16_t data_address = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	82fb      	strh	r3, [r7, #22]
	uint32_t crc[2];

	//Checks first 2 bytes from USB buffer for command
	if((Data[0] == (USB_COMMAND_WRITE_CONFIG >> 8)) && (Data[1] == (USB_COMMAND_WRITE_CONFIG & 0xFF)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d10d      	bne.n	80023cc <PDM_USB_Receive+0x34>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3301      	adds	r3, #1
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d108      	bne.n	80023cc <PDM_USB_Receive+0x34>
	{
		//Checks received buffer size
		if((Size + 6) != EEPROM_BUFFER_SIZE)
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 80023c0:	d001      	beq.n	80023c6 <PDM_USB_Receive+0x2e>
			return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e080      	b.n	80024c8 <PDM_USB_Receive+0x130>

		//Select EEPROM address to write general configurations
		data_address = 0x0000;
 80023c6:	2300      	movs	r3, #0
 80023c8:	82fb      	strh	r3, [r7, #22]
 80023ca:	e026      	b.n	800241a <PDM_USB_Receive+0x82>
	}
	else if((Data[0] == (USB_COMMAND_WRITE_MAP >> 8)) && (Data[1] == (USB_COMMAND_WRITE_MAP & 0xFF)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2bc0      	cmp	r3, #192	; 0xc0
 80023d2:	d10f      	bne.n	80023f4 <PDM_USB_Receive+0x5c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3301      	adds	r3, #1
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d10a      	bne.n	80023f4 <PDM_USB_Receive+0x5c>
	{
		//Checks received buffer size
		if((Size + 6) != EEPROM_MAP_BUFFER_SIZE)
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	f240 327e 	movw	r2, #894	; 0x37e
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d001      	beq.n	80023ec <PDM_USB_Receive+0x54>
			return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e06d      	b.n	80024c8 <PDM_USB_Receive+0x130>

		//Select EEPROM address to write PWM 3D maps
		data_address = EEPROM_MAP_BUFFER_SIZE;
 80023ec:	f44f 7361 	mov.w	r3, #900	; 0x384
 80023f0:	82fb      	strh	r3, [r7, #22]
 80023f2:	e012      	b.n	800241a <PDM_USB_Receive+0x82>
	}
	else if((Data[0] == (USB_COMMAND_WRITE_CONFIG >> 8)) && (Data[1] == (USB_COMMAND_WRITE_CONFIG & 0xFF)) && (Size == 2))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d10c      	bne.n	8002416 <PDM_USB_Receive+0x7e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <PDM_USB_Receive+0x7e>
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d104      	bne.n	8002416 <PDM_USB_Receive+0x7e>
	{
		//Enables USB data transmission
		USB_Connected_Flag = 1;
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <PDM_USB_Receive+0x138>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e058      	b.n	80024c8 <PDM_USB_Receive+0x130>
	}
	else
		//Unknown command
		return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e056      	b.n	80024c8 <PDM_USB_Receive+0x130>

	//Calculate data buffer checksum
	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, (Size - 4) / (sizeof(uint32_t)));
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	3b04      	subs	r3, #4
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	482b      	ldr	r0, [pc, #172]	; (80024d4 <PDM_USB_Receive+0x13c>)
 8002426:	f003 fc90 	bl	8005d4a <HAL_CRC_Calculate>
 800242a:	4603      	mov	r3, r0
 800242c:	60fb      	str	r3, [r7, #12]

	crc[1]  = Data[Size - 4] << 24;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	3b04      	subs	r3, #4
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	613b      	str	r3, [r7, #16]
	crc[1] |= Data[Size - 3] << 16;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	3a03      	subs	r2, #3
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	440a      	add	r2, r1
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	0412      	lsls	r2, r2, #16
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
	crc[1] |= Data[Size - 2] << 8;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	3a02      	subs	r2, #2
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	440a      	add	r2, r1
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	0212      	lsls	r2, r2, #8
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
	crc[1] |= Data[Size - 1] & 0xFF;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	3a01      	subs	r2, #1
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	440a      	add	r2, r1
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

	//Compare received buffer calculated and received
	if(crc[0] != crc[1])
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <PDM_USB_Receive+0xe4>
		return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e025      	b.n	80024c8 <PDM_USB_Receive+0x130>

	if((Data[0] == (USB_COMMAND_WRITE_CONFIG >> 8)) && (Data[1] == (USB_COMMAND_WRITE_CONFIG & 0xFF)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d10e      	bne.n	80024a2 <PDM_USB_Receive+0x10a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3301      	adds	r3, #1
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d109      	bne.n	80024a2 <PDM_USB_Receive+0x10a>
		//Load received configuration into global variables
		PDM_Load_Config_Buffer(&Data[2], Size - 4);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	1c9a      	adds	r2, r3, #2
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	3b04      	subs	r3, #4
 8002496:	b29b      	uxth	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7ff f924 	bl	80016e8 <PDM_Load_Config_Buffer>
 80024a0:	e008      	b.n	80024b4 <PDM_USB_Receive+0x11c>
	else
		//Load received PWM 3D maps into PWM structs
		PDM_Load_Map_Buffer(&Data[2], Size - 4);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1c9a      	adds	r2, r3, #2
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	3b04      	subs	r3, #4
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7ff fbfe 	bl	8001cb0 <PDM_Load_Map_Buffer>

	//Writes received configuration into EEPROM
	return AT24Cxx_Write_DMA(&hi2c1, data_address, &Data[2], Size - 4);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1c9a      	adds	r2, r3, #2
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	3b04      	subs	r3, #4
 80024bc:	b29b      	uxth	r3, r3
 80024be:	8af9      	ldrh	r1, [r7, #22]
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <PDM_USB_Receive+0x140>)
 80024c2:	f7fe f840 	bl	8000546 <AT24Cxx_Write_DMA>
 80024c6:	4603      	mov	r3, r0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000fb4 	.word	0x20000fb4
 80024d4:	20000524 	.word	0x20000524
 80024d8:	200004d0 	.word	0x200004d0

080024dc <PDM_USB_Transmit_Config>:

//Sends pins, current limits, basic pwm controls and pwm 3D maps via USB port
//uint8_t *command - request for loaded configuration
//uint16_t Size - check if the command only has 2 bytes
void PDM_USB_Transmit_Config(uint8_t *command, uint16_t Size)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	6018      	str	r0, [r3, #0]
 80024e8:	460a      	mov	r2, r1
 80024ea:	1cbb      	adds	r3, r7, #2
 80024ec:	801a      	strh	r2, [r3, #0]
	//Check size and first 2 bytes from USB buffer for command
	if((command[0] != (USB_COMMAND_READ_CONFIG >> 8)) && (command[1] != (USB_COMMAND_READ_CONFIG & 0xFF)) && (Size != 6))
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d00a      	beq.n	800250e <PDM_USB_Transmit_Config+0x32>
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d004      	beq.n	800250e <PDM_USB_Transmit_Config+0x32>
 8002504:	1cbb      	adds	r3, r7, #2
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	2b06      	cmp	r3, #6
 800250a:	f040 80d0 	bne.w	80026ae <PDM_USB_Transmit_Config+0x1d2>
		return;

	uint8_t data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE + 12];
	uint32_t crc[2];

	crc[1] = USB_COMMAND_READ_CONFIG;
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	f248 0201 	movw	r2, #32769	; 0x8001
 8002516:	605a      	str	r2, [r3, #4]
	crc[0] = HAL_CRC_Calculate(&hcrc, &crc[1], 1);
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	3304      	adds	r3, #4
 800251e:	2201      	movs	r2, #1
 8002520:	4619      	mov	r1, r3
 8002522:	4866      	ldr	r0, [pc, #408]	; (80026bc <PDM_USB_Transmit_Config+0x1e0>)
 8002524:	f003 fc11 	bl	8005d4a <HAL_CRC_Calculate>
 8002528:	4602      	mov	r2, r0
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	601a      	str	r2, [r3, #0]

	//Return if calculated CRC is different from received CRC
	if(crc[0] != crc[1])
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 80b8 	bne.w	80026b2 <PDM_USB_Transmit_Config+0x1d6>
		return;

	//Load general configuration from global variables
	PDM_Write_Config_Buffer(&data_buffer[2], EEPROM_BUFFER_SIZE);
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	3302      	adds	r3, #2
 8002548:	f44f 7190 	mov.w	r1, #288	; 0x120
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc2b 	bl	8001da8 <PDM_Write_Config_Buffer>

	//Load command into transmission buffer
	data_buffer[0] = USB_COMMAND_WRITE_CONFIG >> 8;
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = USB_COMMAND_WRITE_CONFIG & 0xFF;
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	2202      	movs	r2, #2
 8002560:	705a      	strb	r2, [r3, #1]

	//Calculate buffer CRC
	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[0], (EEPROM_BUFFER_SIZE + 2) / (sizeof(uint32_t)));
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	2248      	movs	r2, #72	; 0x48
 8002568:	4619      	mov	r1, r3
 800256a:	4854      	ldr	r0, [pc, #336]	; (80026bc <PDM_USB_Transmit_Config+0x1e0>)
 800256c:	f003 fbed 	bl	8005d4a <HAL_CRC_Calculate>
 8002570:	4602      	mov	r2, r0
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	601a      	str	r2, [r3, #0]

	//Load CRC into transmission buffer
	data_buffer[EEPROM_BUFFER_SIZE + 2]  = crc[0] >> 24;
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0e1b      	lsrs	r3, r3, #24
 8002580:	b2da      	uxtb	r2, r3
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
	data_buffer[EEPROM_BUFFER_SIZE + 3] |= crc[0] >> 16;
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
	data_buffer[EEPROM_BUFFER_SIZE + 4] |= crc[0] >> 8;
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	f893 2124 	ldrb.w	r2, [r3, #292]	; 0x124
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	data_buffer[EEPROM_BUFFER_SIZE + 5] |= crc[0] & 0xFF;
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

	//Transmit general configuration buffer via USB
	CDC_Transmit_FS(data_buffer, EEPROM_BUFFER_SIZE + 6);
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	f44f 7193 	mov.w	r1, #294	; 0x126
 80025ea:	4618      	mov	r0, r3
 80025ec:	f00d fbb2 	bl	800fd54 <CDC_Transmit_FS>

	//Load PWM 3D maps from PWM structs
	PDM_Write_Map_Buffer(&data_buffer[EEPROM_BUFFER_SIZE + 8], EEPROM_MAP_BUFFER_SIZE);
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025f8:	f44f 7161 	mov.w	r1, #900	; 0x384
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fdf1 	bl	80021e4 <PDM_Write_Map_Buffer>

	//Load command into transmission buffer
	data_buffer[EEPROM_BUFFER_SIZE + 6] = USB_COMMAND_WRITE_MAP >> 8;
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	22c0      	movs	r2, #192	; 0xc0
 8002608:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	data_buffer[EEPROM_BUFFER_SIZE + 7] = USB_COMMAND_WRITE_MAP & 0xFF;
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	2203      	movs	r2, #3
 8002612:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	//Calculate buffer CRC
	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) &data_buffer[EEPROM_BUFFER_SIZE + 6], (EEPROM_MAP_BUFFER_SIZE + 2) / (sizeof(uint32_t)));
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	f503 7393 	add.w	r3, r3, #294	; 0x126
 800261e:	22e1      	movs	r2, #225	; 0xe1
 8002620:	4619      	mov	r1, r3
 8002622:	4826      	ldr	r0, [pc, #152]	; (80026bc <PDM_USB_Transmit_Config+0x1e0>)
 8002624:	f003 fb91 	bl	8005d4a <HAL_CRC_Calculate>
 8002628:	4602      	mov	r2, r0
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	601a      	str	r2, [r3, #0]

	//Load CRC into transmission buffer
	data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE + 8]  = crc[0] >> 24;
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0e1b      	lsrs	r3, r3, #24
 8002638:	b2da      	uxtb	r2, r3
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
	data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE + 9] |= crc[0] >> 16;
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	f893 24ad 	ldrb.w	r2, [r3, #1197]	; 0x4ad
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
	data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE + 10] |= crc[0] >> 8;
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	f893 24ae 	ldrb.w	r2, [r3, #1198]	; 0x4ae
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b2da      	uxtb	r2, r3
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
	data_buffer[EEPROM_BUFFER_SIZE + EEPROM_MAP_BUFFER_SIZE + 11] |= crc[0] & 0xFF;
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	f893 24af 	ldrb.w	r2, [r3, #1199]	; 0x4af
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b2da      	uxtb	r2, r3
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af

	//Transmit PWM 3D map buffer via USB
	CDC_Transmit_FS(&data_buffer[EEPROM_BUFFER_SIZE + 6], EEPROM_MAP_BUFFER_SIZE + 6);
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80026a2:	f240 318a 	movw	r1, #906	; 0x38a
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00d fb54 	bl	800fd54 <CDC_Transmit_FS>

	return;
 80026ac:	e002      	b.n	80026b4 <PDM_USB_Transmit_Config+0x1d8>
		return;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <PDM_USB_Transmit_Config+0x1d8>
		return;
 80026b2:	bf00      	nop
}
 80026b4:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000524 	.word	0x20000524

080026c0 <PDM_USB_Transmit_Data>:

//Sends data channels via USB
void PDM_USB_Transmit_Data()
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b094      	sub	sp, #80	; 0x50
 80026c4:	af00      	add	r7, sp, #0
	uint8_t data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 6];
	uint32_t crc = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48

	//Load data channels inside transmission buffer
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80026d0:	e031      	b.n	8002736 <PDM_USB_Transmit_Data+0x76>
	{
		data_buffer[(i * 2) + 2]  = Data_Buffer[i] >> 8;
 80026d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <PDM_USB_Transmit_Data+0xe8>)
 80026d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026e4:	3301      	adds	r3, #1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80026ee:	440b      	add	r3, r1
 80026f0:	f803 2c4c 	strb.w	r2, [r3, #-76]
		data_buffer[(i * 2) + 3] |= Data_Buffer[i] & 0xFF;
 80026f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	3303      	adds	r3, #3
 80026fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002700:	4413      	add	r3, r2
 8002702:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002706:	b25a      	sxtb	r2, r3
 8002708:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800270c:	4926      	ldr	r1, [pc, #152]	; (80027a8 <PDM_USB_Transmit_Data+0xe8>)
 800270e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002712:	b25b      	sxtb	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b25a      	sxtb	r2, r3
 8002718:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	3303      	adds	r3, #3
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002726:	440b      	add	r3, r1
 8002728:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800272c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002730:	3301      	adds	r3, #1
 8002732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800273a:	2b1d      	cmp	r3, #29
 800273c:	d9c9      	bls.n	80026d2 <PDM_USB_Transmit_Data+0x12>
	}

	//Load command into transmission buffer
	data_buffer[0] = USB_COMMAND_READ_DATA >> 8;
 800273e:	2320      	movs	r3, #32
 8002740:	713b      	strb	r3, [r7, #4]
	data_buffer[1] = USB_COMMAND_READ_DATA & 0xFF;
 8002742:	2304      	movs	r3, #4
 8002744:	717b      	strb	r3, [r7, #5]

	//Calculate buffer CRC
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) data_buffer, (NBR_OF_DATA_CHANNELS + 2) / sizeof(uint32_t));
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2208      	movs	r2, #8
 800274a:	4619      	mov	r1, r3
 800274c:	4817      	ldr	r0, [pc, #92]	; (80027ac <PDM_USB_Transmit_Data+0xec>)
 800274e:	f003 fafc 	bl	8005d4a <HAL_CRC_Calculate>
 8002752:	64b8      	str	r0, [r7, #72]	; 0x48

	//Load CRC into transmission buffer
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 2]  = crc >> 24;
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	0e1b      	lsrs	r3, r3, #24
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 3] |= crc >> 16;
 800275e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 4] |= crc >> 8;
 8002770:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 5] |= crc & 0xFF;
 8002782:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4313      	orrs	r3, r2
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	//Transmit data buffer via USB
	CDC_Transmit_FS(data_buffer, EEPROM_MAP_BUFFER_SIZE + 6);
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	f240 318a 	movw	r1, #906	; 0x38a
 8002798:	4618      	mov	r0, r3
 800279a:	f00d fadb 	bl	800fd54 <CDC_Transmit_FS>

	return;
 800279e:	bf00      	nop
}
 80027a0:	3750      	adds	r7, #80	; 0x50
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20001230 	.word	0x20001230
 80027ac:	20000524 	.word	0x20000524

080027b0 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config(){}
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <PDM_Output_Set>:

//Sets output pin levels
//uint8_t output_pin - number of output
//uint8_t output_level - level of output
static void PDM_Output_Set(uint8_t output_pin, uint8_t output_level)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71bb      	strb	r3, [r7, #6]
	switch(output_pin)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	3b04      	subs	r3, #4
 80027d4:	2b0b      	cmp	r3, #11
 80027d6:	d878      	bhi.n	80028ca <PDM_Output_Set+0x10a>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <PDM_Output_Set+0x20>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002811 	.word	0x08002811
 80027e4:	08002821 	.word	0x08002821
 80027e8:	08002831 	.word	0x08002831
 80027ec:	08002841 	.word	0x08002841
 80027f0:	08002851 	.word	0x08002851
 80027f4:	08002861 	.word	0x08002861
 80027f8:	08002871 	.word	0x08002871
 80027fc:	08002881 	.word	0x08002881
 8002800:	08002891 	.word	0x08002891
 8002804:	0800289f 	.word	0x0800289f
 8002808:	080028ad 	.word	0x080028ad
 800280c:	080028bb 	.word	0x080028bb
	{
	case 4:
		HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_level);
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	461a      	mov	r2, r3
 8002814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002818:	482e      	ldr	r0, [pc, #184]	; (80028d4 <PDM_Output_Set+0x114>)
 800281a:	f004 f915 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800281e:	e053      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 5:
		HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_level);
 8002820:	79bb      	ldrb	r3, [r7, #6]
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002828:	482a      	ldr	r0, [pc, #168]	; (80028d4 <PDM_Output_Set+0x114>)
 800282a:	f004 f90d 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800282e:	e04b      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 6:
		HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_level);
 8002830:	79bb      	ldrb	r3, [r7, #6]
 8002832:	461a      	mov	r2, r3
 8002834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002838:	4826      	ldr	r0, [pc, #152]	; (80028d4 <PDM_Output_Set+0x114>)
 800283a:	f004 f905 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800283e:	e043      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 7:
		HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_level);
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	461a      	mov	r2, r3
 8002844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002848:	4822      	ldr	r0, [pc, #136]	; (80028d4 <PDM_Output_Set+0x114>)
 800284a:	f004 f8fd 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800284e:	e03b      	b.n	80028c8 <PDM_Output_Set+0x108>

#ifndef LQFP64
	case 8:
		HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_level);
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	461a      	mov	r2, r3
 8002854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002858:	481e      	ldr	r0, [pc, #120]	; (80028d4 <PDM_Output_Set+0x114>)
 800285a:	f004 f8f5 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800285e:	e033      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 9:
		HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_level);
 8002860:	79bb      	ldrb	r3, [r7, #6]
 8002862:	461a      	mov	r2, r3
 8002864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002868:	481a      	ldr	r0, [pc, #104]	; (80028d4 <PDM_Output_Set+0x114>)
 800286a:	f004 f8ed 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800286e:	e02b      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 10:
		HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_level);
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	461a      	mov	r2, r3
 8002874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002878:	4816      	ldr	r0, [pc, #88]	; (80028d4 <PDM_Output_Set+0x114>)
 800287a:	f004 f8e5 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800287e:	e023      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 11:
		HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_level);
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	461a      	mov	r2, r3
 8002884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002888:	4812      	ldr	r0, [pc, #72]	; (80028d4 <PDM_Output_Set+0x114>)
 800288a:	f004 f8dd 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800288e:	e01b      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 12:
		HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_level);
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	461a      	mov	r2, r3
 8002894:	2108      	movs	r1, #8
 8002896:	4810      	ldr	r0, [pc, #64]	; (80028d8 <PDM_Output_Set+0x118>)
 8002898:	f004 f8d6 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 800289c:	e014      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 13:
		HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_level);
 800289e:	79bb      	ldrb	r3, [r7, #6]
 80028a0:	461a      	mov	r2, r3
 80028a2:	2104      	movs	r1, #4
 80028a4:	480c      	ldr	r0, [pc, #48]	; (80028d8 <PDM_Output_Set+0x118>)
 80028a6:	f004 f8cf 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 80028aa:	e00d      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 14:
		HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_level);
 80028ac:	79bb      	ldrb	r3, [r7, #6]
 80028ae:	461a      	mov	r2, r3
 80028b0:	2120      	movs	r1, #32
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <PDM_Output_Set+0x118>)
 80028b4:	f004 f8c8 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 80028b8:	e006      	b.n	80028c8 <PDM_Output_Set+0x108>

	case 15:
		HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_level);
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	461a      	mov	r2, r3
 80028be:	2110      	movs	r1, #16
 80028c0:	4805      	ldr	r0, [pc, #20]	; (80028d8 <PDM_Output_Set+0x118>)
 80028c2:	f004 f8c1 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 80028c6:	bf00      	nop
#endif
	}

	return;
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
}
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021800 	.word	0x40021800

080028dc <PDM_Input_Process>:

//Process input pin levels
void PDM_Input_Process()
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	Input_Pin_Levels = 0x0000;
 80028e0:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <PDM_Input_Process+0x1f0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels  = HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 80028e6:	2101      	movs	r1, #1
 80028e8:	4879      	ldr	r0, [pc, #484]	; (8002ad0 <PDM_Input_Process+0x1f4>)
 80028ea:	f004 f895 	bl	8006a18 <HAL_GPIO_ReadPin>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <PDM_Input_Process+0x1f0>)
 80028f4:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 80028f6:	2102      	movs	r1, #2
 80028f8:	4875      	ldr	r0, [pc, #468]	; (8002ad0 <PDM_Input_Process+0x1f4>)
 80028fa:	f004 f88d 	bl	8006a18 <HAL_GPIO_ReadPin>
 80028fe:	4603      	mov	r3, r0
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	b21a      	sxth	r2, r3
 8002904:	4b71      	ldr	r3, [pc, #452]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b21b      	sxth	r3, r3
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002912:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8002914:	2104      	movs	r1, #4
 8002916:	486e      	ldr	r0, [pc, #440]	; (8002ad0 <PDM_Input_Process+0x1f4>)
 8002918:	f004 f87e 	bl	8006a18 <HAL_GPIO_ReadPin>
 800291c:	4603      	mov	r3, r0
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	b21a      	sxth	r2, r3
 8002922:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b21b      	sxth	r3, r3
 8002928:	4313      	orrs	r3, r2
 800292a:	b21b      	sxth	r3, r3
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002930:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8002932:	2108      	movs	r1, #8
 8002934:	4866      	ldr	r0, [pc, #408]	; (8002ad0 <PDM_Input_Process+0x1f4>)
 8002936:	f004 f86f 	bl	8006a18 <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	b21a      	sxth	r2, r3
 8002940:	4b62      	ldr	r3, [pc, #392]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b21b      	sxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b21b      	sxth	r3, r3
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <PDM_Input_Process+0x1f0>)
 800294e:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8002950:	2110      	movs	r1, #16
 8002952:	4860      	ldr	r0, [pc, #384]	; (8002ad4 <PDM_Input_Process+0x1f8>)
 8002954:	f004 f860 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002958:	4603      	mov	r3, r0
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	b21a      	sxth	r2, r3
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b21b      	sxth	r3, r3
 8002964:	4313      	orrs	r3, r2
 8002966:	b21b      	sxth	r3, r3
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b58      	ldr	r3, [pc, #352]	; (8002acc <PDM_Input_Process+0x1f0>)
 800296c:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 800296e:	2120      	movs	r1, #32
 8002970:	4858      	ldr	r0, [pc, #352]	; (8002ad4 <PDM_Input_Process+0x1f8>)
 8002972:	f004 f851 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002976:	4603      	mov	r3, r0
 8002978:	015b      	lsls	r3, r3, #5
 800297a:	b21a      	sxth	r2, r3
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <PDM_Input_Process+0x1f0>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b21b      	sxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b21b      	sxth	r3, r3
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <PDM_Input_Process+0x1f0>)
 800298a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 800298c:	2140      	movs	r1, #64	; 0x40
 800298e:	4852      	ldr	r0, [pc, #328]	; (8002ad8 <PDM_Input_Process+0x1fc>)
 8002990:	f004 f842 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002994:	4603      	mov	r3, r0
 8002996:	019b      	lsls	r3, r3, #6
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <PDM_Input_Process+0x1f0>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <PDM_Input_Process+0x1f0>)
 80029a8:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	484a      	ldr	r0, [pc, #296]	; (8002ad8 <PDM_Input_Process+0x1fc>)
 80029ae:	f004 f833 	bl	8006a18 <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	01db      	lsls	r3, r3, #7
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <PDM_Input_Process+0x1f0>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b21b      	sxth	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <PDM_Input_Process+0x1f0>)
 80029c6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 80029c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029cc:	4842      	ldr	r0, [pc, #264]	; (8002ad8 <PDM_Input_Process+0x1fc>)
 80029ce:	f004 f823 	bl	8006a18 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	4b3c      	ldr	r3, [pc, #240]	; (8002acc <PDM_Input_Process+0x1f0>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <PDM_Input_Process+0x1f0>)
 80029e6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 80029e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ec:	483a      	ldr	r0, [pc, #232]	; (8002ad8 <PDM_Input_Process+0x1fc>)
 80029ee:	f004 f813 	bl	8006a18 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	4b34      	ldr	r3, [pc, #208]	; (8002acc <PDM_Input_Process+0x1f0>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b21b      	sxth	r3, r3
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a06:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 8002a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a0c:	4832      	ldr	r0, [pc, #200]	; (8002ad8 <PDM_Input_Process+0x1fc>)
 8002a0e:	f004 f803 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	029b      	lsls	r3, r3, #10
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b29      	ldr	r3, [pc, #164]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a26:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 8002a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a2c:	482a      	ldr	r0, [pc, #168]	; (8002ad8 <PDM_Input_Process+0x1fc>)
 8002a2e:	f003 fff3 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002a32:	4603      	mov	r3, r0
 8002a34:	02db      	lsls	r3, r3, #11
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a46:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8002a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a4c:	4821      	ldr	r0, [pc, #132]	; (8002ad4 <PDM_Input_Process+0x1f8>)
 8002a4e:	f003 ffe3 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002a52:	4603      	mov	r3, r0
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a66:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8002a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a6c:	4819      	ldr	r0, [pc, #100]	; (8002ad4 <PDM_Input_Process+0x1f8>)
 8002a6e:	f003 ffd3 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002a72:	4603      	mov	r3, r0
 8002a74:	035b      	lsls	r3, r3, #13
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a86:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 8002a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a8c:	4811      	ldr	r0, [pc, #68]	; (8002ad4 <PDM_Input_Process+0x1f8>)
 8002a8e:	f003 ffc3 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002a92:	4603      	mov	r3, r0
 8002a94:	039b      	lsls	r3, r3, #14
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002aa6:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8002aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aac:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <PDM_Input_Process+0x1f8>)
 8002aae:	f003 ffb3 	bl	8006a18 <HAL_GPIO_ReadPin>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	03db      	lsls	r3, r3, #15
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b01      	ldr	r3, [pc, #4]	; (8002acc <PDM_Input_Process+0x1f0>)
 8002ac6:	801a      	strh	r2, [r3, #0]

	return;
 8002ac8:	bf00      	nop
}
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200012bc 	.word	0x200012bc
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800

08002adc <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
#ifndef LQFP64
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e046      	b.n	8002b76 <PDM_Output_Process+0x9a>
#else
	for(uint8_t i = 4; i < (NBR_OF_OUTPUTS - 8); i++)
#endif
	{
		//Check if virtual fuse isn't tripped and if the input pins match their enabled states
		if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[0], Output_Pin[i].Input_Levels[0],
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <PDM_Output_Process+0xd4>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <PDM_Output_Process+0xd8>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b299      	uxth	r1, r3
 8002b00:	79fa      	ldrb	r2, [r7, #7]
 8002b02:	482b      	ldr	r0, [pc, #172]	; (8002bb0 <PDM_Output_Process+0xd4>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4403      	add	r3, r0
 8002b0e:	3304      	adds	r3, #4
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	4299      	cmp	r1, r3
 8002b14:	d017      	beq.n	8002b46 <PDM_Output_Process+0x6a>
 8002b16:	79fa      	ldrb	r2, [r7, #7]
 8002b18:	4925      	ldr	r1, [pc, #148]	; (8002bb0 <PDM_Output_Process+0xd4>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3302      	adds	r3, #2
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <PDM_Output_Process+0xd8>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	481f      	ldr	r0, [pc, #124]	; (8002bb0 <PDM_Output_Process+0xd4>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4403      	add	r3, r0
 8002b3e:	3306      	adds	r3, #6
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	4299      	cmp	r1, r3
 8002b44:	d10f      	bne.n	8002b66 <PDM_Output_Process+0x8a>
										 Output_Pin[i].Enabled_Inputs[1], Output_Pin[i].Input_Levels[1]))
										 && (((Driver_Safety_Flag >> i) & 0x01) == 1))
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <PDM_Output_Process+0xdc>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	fa42 f303 	asr.w	r3, r2, r3
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <PDM_Output_Process+0x8a>
		{
			PDM_Output_Set(i, GPIO_PIN_SET);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fe2e 	bl	80027c0 <PDM_Output_Set>
 8002b64:	e004      	b.n	8002b70 <PDM_Output_Process+0x94>
		}else{
			PDM_Output_Set(i, GPIO_PIN_RESET);
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fe28 	bl	80027c0 <PDM_Output_Set>
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	3301      	adds	r3, #1
 8002b74:	71fb      	strb	r3, [r7, #7]
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d9b5      	bls.n	8002ae8 <PDM_Output_Process+0xc>
#ifdef LQFP64
	PDM_Output_Expander_Set(&hi2c1);
#endif

	//Checks each PWM able output individually
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	71bb      	strb	r3, [r7, #6]
 8002b80:	e00e      	b.n	8002ba0 <PDM_Output_Process+0xc4>
	{
		PDM_PWM_Output_Process(&PWM_Pins[i], i);
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <PDM_Output_Process+0xe0>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	79ba      	ldrb	r2, [r7, #6]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fd79 	bl	800368c <PDM_PWM_Output_Process>
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	71bb      	strb	r3, [r7, #6]
 8002ba0:	79bb      	ldrb	r3, [r7, #6]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d9ed      	bls.n	8002b82 <PDM_Output_Process+0xa6>
	}

	return;
 8002ba6:	bf00      	nop
}
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20001050 	.word	0x20001050
 8002bb4:	200012bc 	.word	0x200012bc
 8002bb8:	20000530 	.word	0x20000530
 8002bbc:	20000534 	.word	0x20000534

08002bc0 <PDM_Output_Fuse>:

//Checks output currents and compares with thresholds and timeouts, if over both, processes outputs
void PDM_Output_Fuse()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
	uint8_t fuse_flag = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	71bb      	strb	r3, [r7, #6]
 8002bce:	e059      	b.n	8002c84 <PDM_Output_Fuse+0xc4>
	{
		if(Data_Buffer[i] > Output_Pin[i].Current_Thresholds)
 8002bd0:	79bb      	ldrb	r3, [r7, #6]
 8002bd2:	4a35      	ldr	r2, [pc, #212]	; (8002ca8 <PDM_Output_Fuse+0xe8>)
 8002bd4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002bd8:	79ba      	ldrb	r2, [r7, #6]
 8002bda:	4834      	ldr	r0, [pc, #208]	; (8002cac <PDM_Output_Fuse+0xec>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4403      	add	r3, r0
 8002be6:	3308      	adds	r3, #8
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	4299      	cmp	r1, r3
 8002bec:	d933      	bls.n	8002c56 <PDM_Output_Fuse+0x96>
		{
			Accumulator_Output_Fuse[i] += Accumulator_Output_Check;
 8002bee:	79bb      	ldrb	r3, [r7, #6]
 8002bf0:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <PDM_Output_Fuse+0xf0>)
 8002bf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <PDM_Output_Fuse+0xf4>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	492c      	ldr	r1, [pc, #176]	; (8002cb0 <PDM_Output_Fuse+0xf0>)
 8002c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(Accumulator_Output_Fuse[i] >= (Output_Pin[i].Timeout_Output_Fuse * 10))
 8002c04:	79bb      	ldrb	r3, [r7, #6]
 8002c06:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <PDM_Output_Fuse+0xf0>)
 8002c08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c0c:	79ba      	ldrb	r2, [r7, #6]
 8002c0e:	4827      	ldr	r0, [pc, #156]	; (8002cac <PDM_Output_Fuse+0xec>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4403      	add	r3, r0
 8002c1a:	330a      	adds	r3, #10
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	d328      	bcc.n	8002c7e <PDM_Output_Fuse+0xbe>
			{
				Driver_Safety_Flag |= (1 << i);
 8002c2c:	79bb      	ldrb	r3, [r7, #6]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <PDM_Output_Fuse+0xf8>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <PDM_Output_Fuse+0xf8>)
 8002c44:	801a      	strh	r2, [r3, #0]
				Accumulator_Output_Fuse[i] = 0;
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <PDM_Output_Fuse+0xf0>)
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				fuse_flag = 1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	e013      	b.n	8002c7e <PDM_Output_Fuse+0xbe>
			}

		}else{
			Driver_Overcurrent_Flag &= ~(1 << i);
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <PDM_Output_Fuse+0xfc>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b21b      	sxth	r3, r3
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <PDM_Output_Fuse+0xfc>)
 8002c72:	801a      	strh	r2, [r3, #0]
			Accumulator_Output_Fuse[i] = 0;
 8002c74:	79bb      	ldrb	r3, [r7, #6]
 8002c76:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <PDM_Output_Fuse+0xf0>)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002c7e:	79bb      	ldrb	r3, [r7, #6]
 8002c80:	3301      	adds	r3, #1
 8002c82:	71bb      	strb	r3, [r7, #6]
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	d9a2      	bls.n	8002bd0 <PDM_Output_Fuse+0x10>
		}
	}

	Accumulator_Output_Check -= OUTPUT_FUSE_FREQ;
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <PDM_Output_Fuse+0xf4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3b19      	subs	r3, #25
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <PDM_Output_Fuse+0xf4>)
 8002c92:	6013      	str	r3, [r2, #0]

	if(fuse_flag == 1)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <PDM_Output_Fuse+0xe0>
		PDM_Output_Process();
 8002c9a:	f7ff ff1f 	bl	8002adc <PDM_Output_Process>

	return;
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
}
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20001230 	.word	0x20001230
 8002cac:	20001050 	.word	0x20001050
 8002cb0:	20000eec 	.word	0x20000eec
 8002cb4:	2000052c 	.word	0x2000052c
 8002cb8:	20000530 	.word	0x20000530
 8002cbc:	20000424 	.word	0x20000424

08002cc0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "pdm.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Message, CAN_Rx_Data) == HAL_OK)
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f002 fb75 	bl	80053be <HAL_CAN_GetRxMessage>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002cda:	f7fe fc3d 	bl	8001558 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002ce2:	f003 feca 	bl	8006a7a <HAL_GPIO_TogglePin>
	}

	return;
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
}
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20001110 	.word	0x20001110
 8002cf4:	20000ed0 	.word	0x20000ed0
 8002cf8:	40021800 	.word	0x40021800

08002cfc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 8002d06:	f7ff fde9 	bl	80028dc <PDM_Input_Process>

	PDM_Output_Process();
 8002d0a:	f7ff fee7 	bl	8002adc <PDM_Output_Process>

	return;
 8002d0e:	bf00      	nop
}
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
	return;
 8002d1e:	bf00      	nop
}
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d109      	bne.n	8002d52 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if(Accumulator_Delay > 0)
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d032      	beq.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x80>
			Accumulator_Delay--;
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d4e:	6013      	str	r3, [r2, #0]

		if(USB_Connected_Flag == 1)
			Accumulator_USB_Data++;
	}

	return;
 8002d50:	e02c      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x80>
	else if(htim->Instance == TIM6)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d127      	bne.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x80>
		Accumulator_Output_Check++;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d64:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_10Hz++;
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d6e:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25Hz++;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d78:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50Hz++;
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d82:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_80Hz++,
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d8c:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100Hz++;
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d96:	6013      	str	r3, [r2, #0]
		if(USB_Connected_Flag == 1)
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x80>
			Accumulator_USB_Data++;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002da8:	6013      	str	r3, [r2, #0]
	return;
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
}
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40001400 	.word	0x40001400
 8002dbc:	200011a0 	.word	0x200011a0
 8002dc0:	40001000 	.word	0x40001000
 8002dc4:	2000052c 	.word	0x2000052c
 8002dc8:	20001118 	.word	0x20001118
 8002dcc:	20000e40 	.word	0x20000e40
 8002dd0:	20000f2c 	.word	0x20000f2c
 8002dd4:	20001000 	.word	0x20001000
 8002dd8:	20000f50 	.word	0x20000f50
 8002ddc:	20000fb4 	.word	0x20000fb4
 8002de0:	2000122c 	.word	0x2000122c

08002de4 <PDM_PWM_Duty_Cycle_Set>:
//	return __PDM_LINEAR_INTERPOLATION(y, y0, y1, z[0], z[1]);
//}

//Sets PWM output duty cycle using its command variables
static void PDM_PWM_Duty_Cycle_Set(PWM_Control_Struct* pwm_struct)
{
 8002de4:	b4b0      	push	{r4, r5, r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	//Checks if both command variables are above the collum and line limits and attributes the map's closest corner value
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dc0d      	bgt.n	8002e18 <PDM_PWM_Duty_Cycle_Set+0x34>
		&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	dc05      	bgt.n	8002e18 <PDM_PWM_Duty_Cycle_Set+0x34>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][0];
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	805a      	strh	r2, [r3, #2]
		return;
 8002e16:	e35f      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	db12      	blt.n	8002e4e <PDM_PWM_Duty_Cycle_Set+0x6a>
			 && (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002e34:	429a      	cmp	r2, r3
 8002e36:	dc0a      	bgt.n	8002e4e <PDM_PWM_Duty_Cycle_Set+0x6a>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][pwm_struct->Map_Lengths[0]];
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	3334      	adds	r3, #52	; 0x34
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	88da      	ldrh	r2, [r3, #6]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	805a      	strh	r2, [r3, #2]
		return;
 8002e4c:	e344      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}
	else if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	dc16      	bgt.n	8002e8c <PDM_PWM_Duty_Cycle_Set+0xa8>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	db0e      	blt.n	8002e8c <PDM_PWM_Duty_Cycle_Set+0xa8>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][0];
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e74:	4619      	mov	r1, r3
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a5b      	subs	r3, r3, r1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	336e      	adds	r3, #110	; 0x6e
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	805a      	strh	r2, [r3, #2]
		return;
 8002e8a:	e325      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	db1b      	blt.n	8002ed4 <PDM_PWM_Duty_Cycle_Set+0xf0>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	db13      	blt.n	8002ed4 <PDM_PWM_Duty_Cycle_Set+0xf0>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][pwm_struct->Map_Lengths[0]];
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a5b      	subs	r3, r3, r1
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3334      	adds	r3, #52	; 0x34
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	88da      	ldrh	r2, [r3, #6]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	805a      	strh	r2, [r3, #2]
		return;
 8002ed2:	e301      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}

	//Check if the command variable point is outside the collums of the 3D map
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dd08      	ble.n	8002ef6 <PDM_PWM_Duty_Cycle_Set+0x112>
		|| (pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1]))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	f2c0 80cb 	blt.w	800308c <PDM_PWM_Duty_Cycle_Set+0x2a8>
	{
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e0c0      	b.n	800307e <PDM_PWM_Duty_Cycle_Set+0x29a>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	331a      	adds	r3, #26
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f2c0 80b1 	blt.w	8003078 <PDM_PWM_Duty_Cycle_Set+0x294>
				&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	331a      	adds	r3, #26
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	440b      	add	r3, r1
 8002f28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f300 80a3 	bgt.w	8003078 <PDM_PWM_Duty_Cycle_Set+0x294>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	dc45      	bgt.n	8002fce <PDM_PWM_Duty_Cycle_Set+0x1ea>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	440b      	add	r3, r1
 8002f52:	336e      	adds	r3, #110	; 0x6e
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	336e      	adds	r3, #110	; 0x6e
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002f72:	461c      	mov	r4, r3
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	331a      	adds	r3, #26
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f82:	1ae3      	subs	r3, r4, r3
 8002f84:	fb03 f301 	mul.w	r3, r3, r1
 8002f88:	1ac2      	subs	r2, r0, r3
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	331a      	adds	r3, #26
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	331a      	adds	r3, #26
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	440b      	add	r3, r1
 8002fa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002faa:	1ac3      	subs	r3, r0, r3
 8002fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fb0:	b299      	uxth	r1, r3
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4403      	add	r3, r0
 8002fc0:	336e      	adds	r3, #110	; 0x6e
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	440b      	add	r3, r1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	805a      	strh	r2, [r3, #2]
																  	    pwm_struct->Command_Var_Step[1][y],
																		pwm_struct->Command_Var_Step[1][y + 1],
																		pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
																		pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
				}
				return;
 8002fcc:	e284      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	4403      	add	r3, r0
 8002fe4:	3334      	adds	r3, #52	; 0x34
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	88db      	ldrh	r3, [r3, #6]
 8002fec:	4618      	mov	r0, r3
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	4423      	add	r3, r4
 8003002:	3334      	adds	r3, #52	; 0x34
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	440b      	add	r3, r1
 8003008:	88db      	ldrh	r3, [r3, #6]
 800300a:	4619      	mov	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003012:	461c      	mov	r4, r3
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	331a      	adds	r3, #26
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003022:	1ae3      	subs	r3, r4, r3
 8003024:	fb03 f301 	mul.w	r3, r3, r1
 8003028:	1ac2      	subs	r2, r0, r3
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	331a      	adds	r3, #26
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	440b      	add	r3, r1
 8003036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800303a:	4618      	mov	r0, r3
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	331a      	adds	r3, #26
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	440b      	add	r3, r1
 8003046:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800304a:	1ac3      	subs	r3, r0, r3
 800304c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003050:	b299      	uxth	r1, r3
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305a:	461c      	mov	r4, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	4423      	add	r3, r4
 8003066:	3334      	adds	r3, #52	; 0x34
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4403      	add	r3, r0
 800306c:	88db      	ldrh	r3, [r3, #6]
 800306e:	440b      	add	r3, r1
 8003070:	b29a      	uxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	805a      	strh	r2, [r3, #2]
				return;
 8003076:	e22f      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3301      	adds	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	429a      	cmp	r2, r3
 8003088:	f4ff af38 	bcc.w	8002efc <PDM_PWM_Duty_Cycle_Set+0x118>
			}
		}
	}

	//Check if the command variable point is outside the lines of the 3D map
	if((pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003098:	429a      	cmp	r2, r3
 800309a:	dd08      	ble.n	80030ae <PDM_PWM_Duty_Cycle_Set+0x2ca>
		|| (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80030a8:	429a      	cmp	r2, r3
 80030aa:	f2c0 80c2 	blt.w	8003232 <PDM_PWM_Duty_Cycle_Set+0x44e>
	{
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	73bb      	strb	r3, [r7, #14]
 80030b2:	e0b7      	b.n	8003224 <PDM_PWM_Duty_Cycle_Set+0x440>
		{
			//Checks if the command variable point is inside the x, x + 1 collum
			if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80030ba:	7bbb      	ldrb	r3, [r7, #14]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	3318      	adds	r3, #24
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f2c0 80a8 	blt.w	800321e <PDM_PWM_Duty_Cycle_Set+0x43a>
				&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	3301      	adds	r3, #1
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	3318      	adds	r3, #24
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	440b      	add	r3, r1
 80030e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f300 809a 	bgt.w	800321e <PDM_PWM_Duty_Cycle_Set+0x43a>
			{
				//Checks if the command variable point is above or below the 3D map then sets duty cycle via linear interpolation
				if(pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80030f6:	429a      	cmp	r2, r3
 80030f8:	dc3c      	bgt.n	8003174 <PDM_PWM_Duty_Cycle_Set+0x390>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 80030fa:	7bbb      	ldrb	r3, [r7, #14]
 80030fc:	3301      	adds	r3, #1
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	3334      	adds	r3, #52	; 0x34
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	88db      	ldrh	r3, [r3, #6]
 8003108:	4619      	mov	r1, r3
 800310a:	7bbb      	ldrb	r3, [r7, #14]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	3334      	adds	r3, #52	; 0x34
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	88db      	ldrh	r3, [r3, #6]
 8003116:	4618      	mov	r0, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800311e:	461c      	mov	r4, r3
 8003120:	7bbb      	ldrb	r3, [r7, #14]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	3318      	adds	r3, #24
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800312e:	1ae3      	subs	r3, r4, r3
 8003130:	fb03 f300 	mul.w	r3, r3, r0
 8003134:	1aca      	subs	r2, r1, r3
 8003136:	7bbb      	ldrb	r3, [r7, #14]
 8003138:	3301      	adds	r3, #1
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	3318      	adds	r3, #24
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	440b      	add	r3, r1
 8003142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003146:	4618      	mov	r0, r3
 8003148:	7bbb      	ldrb	r3, [r7, #14]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	3318      	adds	r3, #24
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003156:	1ac3      	subs	r3, r0, r3
 8003158:	fb92 f3f3 	sdiv	r3, r2, r3
 800315c:	b29a      	uxth	r2, r3
 800315e:	7bbb      	ldrb	r3, [r7, #14]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	3334      	adds	r3, #52	; 0x34
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	440b      	add	r3, r1
 8003168:	88db      	ldrh	r3, [r3, #6]
 800316a:	4413      	add	r3, r2
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	805a      	strh	r2, [r3, #2]
																  	    pwm_struct->Command_Var_Step[0][x],
																		pwm_struct->Command_Var_Step[0][x + 1],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
				}
				return;
 8003172:	e1b1      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800317a:	4618      	mov	r0, r3
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4603      	mov	r3, r0
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a1b      	subs	r3, r3, r0
 8003188:	440b      	add	r3, r1
 800318a:	3334      	adds	r3, #52	; 0x34
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	88db      	ldrh	r3, [r3, #6]
 8003192:	461c      	mov	r4, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800319a:	4618      	mov	r0, r3
 800319c:	7bb9      	ldrb	r1, [r7, #14]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4603      	mov	r3, r0
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a1b      	subs	r3, r3, r0
 80031a6:	440b      	add	r3, r1
 80031a8:	3334      	adds	r3, #52	; 0x34
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	88db      	ldrh	r3, [r3, #6]
 80031b0:	4619      	mov	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80031b8:	4618      	mov	r0, r3
 80031ba:	7bbb      	ldrb	r3, [r7, #14]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	3318      	adds	r3, #24
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031c8:	1ac3      	subs	r3, r0, r3
 80031ca:	fb03 f301 	mul.w	r3, r3, r1
 80031ce:	1ae2      	subs	r2, r4, r3
 80031d0:	7bbb      	ldrb	r3, [r7, #14]
 80031d2:	3301      	adds	r3, #1
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	3318      	adds	r3, #24
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031e0:	4618      	mov	r0, r3
 80031e2:	7bbb      	ldrb	r3, [r7, #14]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	3318      	adds	r3, #24
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	440b      	add	r3, r1
 80031ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031f0:	1ac3      	subs	r3, r0, r3
 80031f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031fe:	461c      	mov	r4, r3
 8003200:	7bb8      	ldrb	r0, [r7, #14]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4623      	mov	r3, r4
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1b1b      	subs	r3, r3, r4
 800320a:	4403      	add	r3, r0
 800320c:	3334      	adds	r3, #52	; 0x34
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	88db      	ldrh	r3, [r3, #6]
 8003214:	4413      	add	r3, r2
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	805a      	strh	r2, [r3, #2]
				return;
 800321c:	e15c      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 800321e:	7bbb      	ldrb	r3, [r7, #14]
 8003220:	3301      	adds	r3, #1
 8003222:	73bb      	strb	r3, [r7, #14]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322a:	7bba      	ldrb	r2, [r7, #14]
 800322c:	429a      	cmp	r2, r3
 800322e:	f4ff af41 	bcc.w	80030b4 <PDM_PWM_Duty_Cycle_Set+0x2d0>
			}
		}
	}

	//Since the command vaiable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003232:	2300      	movs	r3, #0
 8003234:	737b      	strb	r3, [r7, #13]
 8003236:	e147      	b.n	80034c8 <PDM_PWM_Duty_Cycle_Set+0x6e4>
	{
		//Checks if the command variable point is inside the x, x + 1 collum
		if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800323e:	7b7b      	ldrb	r3, [r7, #13]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	3318      	adds	r3, #24
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	440b      	add	r3, r1
 8003248:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800324c:	429a      	cmp	r2, r3
 800324e:	f2c0 8138 	blt.w	80034c2 <PDM_PWM_Duty_Cycle_Set+0x6de>
			&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003258:	7b7b      	ldrb	r3, [r7, #13]
 800325a:	3301      	adds	r3, #1
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	3318      	adds	r3, #24
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	440b      	add	r3, r1
 8003264:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003268:	429a      	cmp	r2, r3
 800326a:	f300 812a 	bgt.w	80034c2 <PDM_PWM_Duty_Cycle_Set+0x6de>
		{
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 800326e:	2300      	movs	r3, #0
 8003270:	733b      	strb	r3, [r7, #12]
 8003272:	e11f      	b.n	80034b4 <PDM_PWM_Duty_Cycle_Set+0x6d0>
			{
				//Checks if the command variable point is inside the y, y + 1 line
				if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800327a:	7b3b      	ldrb	r3, [r7, #12]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	331a      	adds	r3, #26
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	440b      	add	r3, r1
 8003284:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003288:	429a      	cmp	r2, r3
 800328a:	f2c0 8110 	blt.w	80034ae <PDM_PWM_Duty_Cycle_Set+0x6ca>
					&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003294:	7b3b      	ldrb	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	331a      	adds	r3, #26
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f300 8102 	bgt.w	80034ae <PDM_PWM_Duty_Cycle_Set+0x6ca>
				{
					pwm_struct->Duty_Cycle = __PDM_BILINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 80032aa:	7b3b      	ldrb	r3, [r7, #12]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	1c58      	adds	r0, r3, #1
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	4403      	add	r3, r0
 80032bc:	3334      	adds	r3, #52	; 0x34
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	440b      	add	r3, r1
 80032c2:	88db      	ldrh	r3, [r3, #6]
 80032c4:	461c      	mov	r4, r3
 80032c6:	7b3b      	ldrb	r3, [r7, #12]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	7b78      	ldrb	r0, [r7, #13]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	4403      	add	r3, r0
 80032d6:	3334      	adds	r3, #52	; 0x34
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	88db      	ldrh	r3, [r3, #6]
 80032de:	4619      	mov	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80032e6:	4618      	mov	r0, r3
 80032e8:	7b7b      	ldrb	r3, [r7, #13]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	3318      	adds	r3, #24
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032f6:	1ac3      	subs	r3, r0, r3
 80032f8:	fb03 f301 	mul.w	r3, r3, r1
 80032fc:	1ae2      	subs	r2, r4, r3
 80032fe:	7b7b      	ldrb	r3, [r7, #13]
 8003300:	3301      	adds	r3, #1
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	3318      	adds	r3, #24
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	440b      	add	r3, r1
 800330a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800330e:	4618      	mov	r0, r3
 8003310:	7b7b      	ldrb	r3, [r7, #13]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	3318      	adds	r3, #24
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	440b      	add	r3, r1
 800331a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800331e:	1ac3      	subs	r3, r0, r3
 8003320:	fb92 f1f3 	sdiv	r1, r2, r3
 8003324:	7b3b      	ldrb	r3, [r7, #12]
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	7b7c      	ldrb	r4, [r7, #13]
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	4423      	add	r3, r4
 8003334:	3334      	adds	r3, #52	; 0x34
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4403      	add	r3, r0
 800333a:	88db      	ldrh	r3, [r3, #6]
 800333c:	4419      	add	r1, r3
 800333e:	7b3a      	ldrb	r2, [r7, #12]
 8003340:	7b7b      	ldrb	r3, [r7, #13]
 8003342:	1c5c      	adds	r4, r3, #1
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	4423      	add	r3, r4
 800334e:	3334      	adds	r3, #52	; 0x34
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4403      	add	r3, r0
 8003354:	88db      	ldrh	r3, [r3, #6]
 8003356:	461d      	mov	r5, r3
 8003358:	7b3a      	ldrb	r2, [r7, #12]
 800335a:	7b7c      	ldrb	r4, [r7, #13]
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	4423      	add	r3, r4
 8003366:	3334      	adds	r3, #52	; 0x34
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4403      	add	r3, r0
 800336c:	88db      	ldrh	r3, [r3, #6]
 800336e:	4618      	mov	r0, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003376:	461c      	mov	r4, r3
 8003378:	7b7b      	ldrb	r3, [r7, #13]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	3318      	adds	r3, #24
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003386:	1ae3      	subs	r3, r4, r3
 8003388:	fb03 f300 	mul.w	r3, r3, r0
 800338c:	1aea      	subs	r2, r5, r3
 800338e:	7b7b      	ldrb	r3, [r7, #13]
 8003390:	3301      	adds	r3, #1
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	3318      	adds	r3, #24
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4403      	add	r3, r0
 800339a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800339e:	461c      	mov	r4, r3
 80033a0:	7b7b      	ldrb	r3, [r7, #13]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	3318      	adds	r3, #24
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4403      	add	r3, r0
 80033aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033ae:	1ae3      	subs	r3, r4, r3
 80033b0:	fb92 f0f3 	sdiv	r0, r2, r3
 80033b4:	7b3a      	ldrb	r2, [r7, #12]
 80033b6:	7b7d      	ldrb	r5, [r7, #13]
 80033b8:	687c      	ldr	r4, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	442b      	add	r3, r5
 80033c2:	3334      	adds	r3, #52	; 0x34
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4423      	add	r3, r4
 80033c8:	88db      	ldrh	r3, [r3, #6]
 80033ca:	18c2      	adds	r2, r0, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80033d2:	461c      	mov	r4, r3
 80033d4:	7b3b      	ldrb	r3, [r7, #12]
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	331a      	adds	r3, #26
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4403      	add	r3, r0
 80033de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033e2:	1ae3      	subs	r3, r4, r3
 80033e4:	fb03 f302 	mul.w	r3, r3, r2
 80033e8:	1aca      	subs	r2, r1, r3
 80033ea:	7b3b      	ldrb	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	331a      	adds	r3, #26
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	440b      	add	r3, r1
 80033f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033fa:	4618      	mov	r0, r3
 80033fc:	7b3b      	ldrb	r3, [r7, #12]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	331a      	adds	r3, #26
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800340a:	1ac3      	subs	r3, r0, r3
 800340c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003410:	b299      	uxth	r1, r3
 8003412:	7b3a      	ldrb	r2, [r7, #12]
 8003414:	7b7b      	ldrb	r3, [r7, #13]
 8003416:	1c5c      	adds	r4, r3, #1
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	4423      	add	r3, r4
 8003422:	3334      	adds	r3, #52	; 0x34
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4403      	add	r3, r0
 8003428:	88db      	ldrh	r3, [r3, #6]
 800342a:	461d      	mov	r5, r3
 800342c:	7b3a      	ldrb	r2, [r7, #12]
 800342e:	7b7c      	ldrb	r4, [r7, #13]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	4423      	add	r3, r4
 800343a:	3334      	adds	r3, #52	; 0x34
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4403      	add	r3, r0
 8003440:	88db      	ldrh	r3, [r3, #6]
 8003442:	4618      	mov	r0, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800344a:	461c      	mov	r4, r3
 800344c:	7b7b      	ldrb	r3, [r7, #13]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	3318      	adds	r3, #24
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800345a:	1ae3      	subs	r3, r4, r3
 800345c:	fb03 f300 	mul.w	r3, r3, r0
 8003460:	1aea      	subs	r2, r5, r3
 8003462:	7b7b      	ldrb	r3, [r7, #13]
 8003464:	3301      	adds	r3, #1
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	3318      	adds	r3, #24
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4403      	add	r3, r0
 800346e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003472:	461c      	mov	r4, r3
 8003474:	7b7b      	ldrb	r3, [r7, #13]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	3318      	adds	r3, #24
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4403      	add	r3, r0
 800347e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003482:	1ae3      	subs	r3, r4, r3
 8003484:	fb92 f3f3 	sdiv	r3, r2, r3
 8003488:	b298      	uxth	r0, r3
 800348a:	7b3a      	ldrb	r2, [r7, #12]
 800348c:	7b7d      	ldrb	r5, [r7, #13]
 800348e:	687c      	ldr	r4, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	442b      	add	r3, r5
 8003498:	3334      	adds	r3, #52	; 0x34
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4423      	add	r3, r4
 800349e:	88db      	ldrh	r3, [r3, #6]
 80034a0:	4403      	add	r3, r0
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	440b      	add	r3, r1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	805a      	strh	r2, [r3, #2]
																		  pwm_struct->Command_Var_Step[1][y + 1],
																		  pwm_struct->Duty_Cycle_Map[y][x],
																		  pwm_struct->Duty_Cycle_Map[y][x + 1],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x + 1]);
					return;
 80034ac:	e014      	b.n	80034d8 <PDM_PWM_Duty_Cycle_Set+0x6f4>
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 80034ae:	7b3b      	ldrb	r3, [r7, #12]
 80034b0:	3301      	adds	r3, #1
 80034b2:	733b      	strb	r3, [r7, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ba:	7b3a      	ldrb	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	f4ff aed9 	bcc.w	8003274 <PDM_PWM_Duty_Cycle_Set+0x490>
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 80034c2:	7b7b      	ldrb	r3, [r7, #13]
 80034c4:	3301      	adds	r3, #1
 80034c6:	737b      	strb	r3, [r7, #13]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ce:	7b7a      	ldrb	r2, [r7, #13]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	f4ff aeb1 	bcc.w	8003238 <PDM_PWM_Duty_Cycle_Set+0x454>
				}
			}
		}
	}
	return;
 80034d6:	bf00      	nop
}
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bcb0      	pop	{r4, r5, r7}
 80034de:	4770      	bx	lr

080034e0 <PDM_PWM_Init>:

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (PWM_Pin_Status >> pwm_out_number) & 0x01;
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	331a      	adds	r3, #26
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <PDM_PWM_Init+0x194>)
 80034f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f8:	b21a      	sxth	r2, r3
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <PDM_PWM_Init+0x198>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4619      	mov	r1, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	fa41 f303 	asr.w	r3, r1, r3
 8003506:	b21b      	sxth	r3, r3
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	b21b      	sxth	r3, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	b21a      	sxth	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	331a      	adds	r3, #26
 8003516:	b291      	uxth	r1, r2
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <PDM_PWM_Init+0x194>)
 800351a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b03      	cmp	r3, #3
 8003522:	f200 80a3 	bhi.w	800366c <PDM_PWM_Init+0x18c>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <PDM_PWM_Init+0x4c>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003547 	.word	0x08003547
 8003534:	08003551 	.word	0x08003551
 8003538:	0800355b 	.word	0x0800355b
 800353c:	4b4f      	ldr	r3, [pc, #316]	; (800367c <PDM_PWM_Init+0x19c>)
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	230c      	movs	r3, #12
 8003542:	827b      	strh	r3, [r7, #18]
 8003544:	e00d      	b.n	8003562 <PDM_PWM_Init+0x82>
 8003546:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <PDM_PWM_Init+0x1a0>)
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	2304      	movs	r3, #4
 800354c:	827b      	strh	r3, [r7, #18]
 800354e:	e008      	b.n	8003562 <PDM_PWM_Init+0x82>
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <PDM_PWM_Init+0x1a4>)
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	2308      	movs	r3, #8
 8003556:	827b      	strh	r3, [r7, #18]
 8003558:	e003      	b.n	8003562 <PDM_PWM_Init+0x82>
 800355a:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <PDM_PWM_Init+0x1a8>)
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	230c      	movs	r3, #12
 8003560:	827b      	strh	r3, [r7, #18]
 8003562:	bf00      	nop

	//Sets PWM parameters if PWM is enabled
	if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 8003564:	4b44      	ldr	r3, [pc, #272]	; (8003678 <PDM_PWM_Init+0x198>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	fa42 f303 	asr.w	r3, r2, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d073      	beq.n	8003660 <PDM_PWM_Init+0x180>
	{
		//Sets the PWM frequency
		__HAL_TIM_SET_AUTORELOAD(htim, pwm_struct->PWM_Frequency);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	60da      	str	r2, [r3, #12]

		//Sets CAN filter and duty cycle map steps if PWM CAN is enabled
		if(((PWM_Pin_Status >> pwm_out_number) & 0x10) == OUTPUT_PWM_CAN_ENABLE)
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <PDM_PWM_Init+0x198>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	fa42 f303 	asr.w	r3, r2, r3
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d05f      	beq.n	8003660 <PDM_PWM_Init+0x180>
		{
			PDM_PWM_CAN_Filter_Config(hcan, pwm_struct, pwm_out_number);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7fd feba 	bl	8001320 <PDM_PWM_CAN_Filter_Config>

			for(uint8_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	747b      	strb	r3, [r7, #17]
 80035b0:	e023      	b.n	80035fa <PDM_PWM_Init+0x11a>
			{
				pwm_struct->Command_Var_Step[0][i] = (i * ((pwm_struct->Command_Var_Lim[0][1] - pwm_struct->Command_Var_Lim[0][0]) / pwm_struct->Map_Lengths[0])) + pwm_struct->Command_Var_Lim[0][0];
 80035b2:	7c7b      	ldrb	r3, [r7, #17]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80035bc:	4619      	mov	r1, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80035c4:	1acb      	subs	r3, r1, r3
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 80035cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	fb12 f303 	smulbb	r3, r2, r3
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	7c7b      	ldrb	r3, [r7, #17]
 80035e6:	b211      	sxth	r1, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	3318      	adds	r3, #24
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	460a      	mov	r2, r1
 80035f2:	805a      	strh	r2, [r3, #2]
			for(uint8_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 80035f4:	7c7b      	ldrb	r3, [r7, #17]
 80035f6:	3301      	adds	r3, #1
 80035f8:	747b      	strb	r3, [r7, #17]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003600:	7c7a      	ldrb	r2, [r7, #17]
 8003602:	429a      	cmp	r2, r3
 8003604:	d9d5      	bls.n	80035b2 <PDM_PWM_Init+0xd2>
			}

			for(uint8_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 8003606:	2300      	movs	r3, #0
 8003608:	743b      	strb	r3, [r7, #16]
 800360a:	e023      	b.n	8003654 <PDM_PWM_Init+0x174>
			{
				pwm_struct->Command_Var_Step[1][j] = (j * ((pwm_struct->Command_Var_Lim[1][1] - pwm_struct->Command_Var_Lim[1][0]) / pwm_struct->Map_Lengths[1])) + pwm_struct->Command_Var_Lim[1][0];
 800360c:	7c3b      	ldrb	r3, [r7, #16]
 800360e:	b29a      	uxth	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003616:	4619      	mov	r1, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800361e:	1acb      	subs	r3, r1, r3
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
 8003626:	fb93 f3f1 	sdiv	r3, r3, r1
 800362a:	b29b      	uxth	r3, r3
 800362c:	fb12 f303 	smulbb	r3, r2, r3
 8003630:	b29a      	uxth	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003638:	b29b      	uxth	r3, r3
 800363a:	4413      	add	r3, r2
 800363c:	b29a      	uxth	r2, r3
 800363e:	7c3b      	ldrb	r3, [r7, #16]
 8003640:	b211      	sxth	r1, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	331a      	adds	r3, #26
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	460a      	mov	r2, r1
 800364c:	805a      	strh	r2, [r3, #2]
			for(uint8_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 800364e:	7c3b      	ldrb	r3, [r7, #16]
 8003650:	3301      	adds	r3, #1
 8003652:	743b      	strb	r3, [r7, #16]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800365a:	7c3a      	ldrb	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d9d5      	bls.n	800360c <PDM_PWM_Init+0x12c>
			}
		}
	}

	//Start the PWM timer
	HAL_TIM_PWM_Start(htim, tim_channel);
 8003660:	8a7b      	ldrh	r3, [r7, #18]
 8003662:	4619      	mov	r1, r3
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f008 fac3 	bl	800bbf0 <HAL_TIM_PWM_Start>

	return;
 800366a:	e000      	b.n	800366e <PDM_PWM_Init+0x18e>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800366c:	bf00      	nop
}
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20001164 	.word	0x20001164
 8003678:	20000ea4 	.word	0x20000ea4
 800367c:	20000df4 	.word	0x20000df4
 8003680:	200003dc 	.word	0x200003dc
 8003684:	2000111c 	.word	0x2000111c
 8003688:	20001004 	.word	0x20001004

0800368c <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	2b03      	cmp	r3, #3
 800369c:	f200 80ff 	bhi.w	800389e <PDM_PWM_Output_Process+0x212>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <PDM_PWM_Output_Process+0x1c>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c3 	.word	0x080036c3
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036d7 	.word	0x080036d7
 80036b8:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <PDM_PWM_Output_Process+0x21c>)
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	230c      	movs	r3, #12
 80036be:	817b      	strh	r3, [r7, #10]
 80036c0:	e00d      	b.n	80036de <PDM_PWM_Output_Process+0x52>
 80036c2:	4b7a      	ldr	r3, [pc, #488]	; (80038ac <PDM_PWM_Output_Process+0x220>)
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	2304      	movs	r3, #4
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	e008      	b.n	80036de <PDM_PWM_Output_Process+0x52>
 80036cc:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <PDM_PWM_Output_Process+0x224>)
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	2308      	movs	r3, #8
 80036d2:	817b      	strh	r3, [r7, #10]
 80036d4:	e003      	b.n	80036de <PDM_PWM_Output_Process+0x52>
 80036d6:	4b77      	ldr	r3, [pc, #476]	; (80038b4 <PDM_PWM_Output_Process+0x228>)
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	230c      	movs	r3, #12
 80036dc:	817b      	strh	r3, [r7, #10]
 80036de:	bf00      	nop

	//Check if virtual fuse isn't tripped and if the input pins match their enabled states
	if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0],
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	4975      	ldr	r1, [pc, #468]	; (80038b8 <PDM_PWM_Output_Process+0x22c>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	4b72      	ldr	r3, [pc, #456]	; (80038bc <PDM_PWM_Output_Process+0x230>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b299      	uxth	r1, r3
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	486f      	ldr	r0, [pc, #444]	; (80038b8 <PDM_PWM_Output_Process+0x22c>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	3304      	adds	r3, #4
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	4299      	cmp	r1, r3
 800370c:	d017      	beq.n	800373e <PDM_PWM_Output_Process+0xb2>
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4969      	ldr	r1, [pc, #420]	; (80038b8 <PDM_PWM_Output_Process+0x22c>)
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3302      	adds	r3, #2
 800371e:	881a      	ldrh	r2, [r3, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	; (80038bc <PDM_PWM_Output_Process+0x230>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	4013      	ands	r3, r2
 8003726:	b299      	uxth	r1, r3
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4863      	ldr	r0, [pc, #396]	; (80038b8 <PDM_PWM_Output_Process+0x22c>)
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	3306      	adds	r3, #6
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	4299      	cmp	r1, r3
 800373c:	d164      	bne.n	8003808 <PDM_PWM_Output_Process+0x17c>
									 Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1]))
									 && (((Driver_Safety_Flag >> pwm_out_number) & 0x0001) == 1))
 800373e:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <PDM_PWM_Output_Process+0x234>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	fa42 f303 	asr.w	r3, r2, r3
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d05a      	beq.n	8003808 <PDM_PWM_Output_Process+0x17c>
	{
		//Checks if the output is enabled as PWM, if i isn't, just sets it at 100%
		if(Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] == OUTPUT_PWM_ENABLE)
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	331a      	adds	r3, #26
 8003756:	4a5b      	ldr	r2, [pc, #364]	; (80038c4 <PDM_PWM_Output_Process+0x238>)
 8003758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d14d      	bne.n	80037fc <PDM_PWM_Output_Process+0x170>
		{
			//Checks if the inputs match the first PWM preset
			if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[0], pwm_struct->Input_DC_Preset[0],
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	889a      	ldrh	r2, [r3, #4]
 8003770:	4b52      	ldr	r3, [pc, #328]	; (80038bc <PDM_PWM_Output_Process+0x230>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	4013      	ands	r3, r2
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	899b      	ldrh	r3, [r3, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d00f      	beq.n	80037a0 <PDM_PWM_Output_Process+0x114>
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	88da      	ldrh	r2, [r3, #6]
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <PDM_PWM_Output_Process+0x230>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	4013      	ands	r3, r2
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	89db      	ldrh	r3, [r3, #14]
 800379c:	429a      	cmp	r2, r3
 800379e:	d104      	bne.n	80037aa <PDM_PWM_Output_Process+0x11e>
											 pwm_struct[pwm_out_number].Input_DC_Preset_Enable[1], pwm_struct->Input_DC_Preset[1]))
			{
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[0];
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8a9a      	ldrh	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	805a      	strh	r2, [r3, #2]
 80037a8:	e02d      	b.n	8003806 <PDM_PWM_Output_Process+0x17a>
			}
			//Checks if the inputs match the second PWM preset
			else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[2], pwm_struct->Input_DC_Preset[2],
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f44f 720c 	mov.w	r2, #560	; 0x230
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	891a      	ldrh	r2, [r3, #8]
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <PDM_PWM_Output_Process+0x230>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	4013      	ands	r3, r2
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8a1b      	ldrh	r3, [r3, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d00f      	beq.n	80037ea <PDM_PWM_Output_Process+0x15e>
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	f44f 720c 	mov.w	r2, #560	; 0x230
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	895a      	ldrh	r2, [r3, #10]
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <PDM_PWM_Output_Process+0x230>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8a5b      	ldrh	r3, [r3, #18]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d104      	bne.n	80037f4 <PDM_PWM_Output_Process+0x168>
					 	 	 	 	 	 	 	  pwm_struct[pwm_out_number].Input_DC_Preset_Enable[3], pwm_struct->Input_DC_Preset[3]))
			{
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[1];
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8ada      	ldrh	r2, [r3, #22]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	805a      	strh	r2, [r3, #2]
 80037f2:	e008      	b.n	8003806 <PDM_PWM_Output_Process+0x17a>
			//If no preset is matched, set PWM duty cycle using the 3D map
			}else{
				PDM_PWM_Duty_Cycle_Set(pwm_struct);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff faf5 	bl	8002de4 <PDM_PWM_Duty_Cycle_Set>
		if(Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] == OUTPUT_PWM_ENABLE)
 80037fa:	e008      	b.n	800380e <PDM_PWM_Output_Process+0x182>
			}
		}else{
			pwm_struct->Duty_Cycle = 1010;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8003802:	805a      	strh	r2, [r3, #2]
		if(Data_ID_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] == OUTPUT_PWM_ENABLE)
 8003804:	e003      	b.n	800380e <PDM_PWM_Output_Process+0x182>
 8003806:	e002      	b.n	800380e <PDM_PWM_Output_Process+0x182>
		}
	}else{
		pwm_struct->Duty_Cycle = 0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	805a      	strh	r2, [r3, #2]
	}


	__HAL_TIM_SET_COMPARE(htim, tim_channel, (htim->Init.Period * pwm_struct->Duty_Cycle) / 1000);
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <PDM_PWM_Output_Process+0x1a4>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	8852      	ldrh	r2, [r2, #2]
 800381c:	fb02 f203 	mul.w	r2, r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4928      	ldr	r1, [pc, #160]	; (80038c8 <PDM_PWM_Output_Process+0x23c>)
 8003826:	fba1 1202 	umull	r1, r2, r1, r2
 800382a:	0992      	lsrs	r2, r2, #6
 800382c:	635a      	str	r2, [r3, #52]	; 0x34
 800382e:	e02e      	b.n	800388e <PDM_PWM_Output_Process+0x202>
 8003830:	897b      	ldrh	r3, [r7, #10]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d10d      	bne.n	8003852 <PDM_PWM_Output_Process+0x1c6>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	8852      	ldrh	r2, [r2, #2]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	4920      	ldr	r1, [pc, #128]	; (80038c8 <PDM_PWM_Output_Process+0x23c>)
 8003848:	fba1 1303 	umull	r1, r3, r1, r3
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	6393      	str	r3, [r2, #56]	; 0x38
 8003850:	e01d      	b.n	800388e <PDM_PWM_Output_Process+0x202>
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d10d      	bne.n	8003874 <PDM_PWM_Output_Process+0x1e8>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	8852      	ldrh	r2, [r2, #2]
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	4917      	ldr	r1, [pc, #92]	; (80038c8 <PDM_PWM_Output_Process+0x23c>)
 800386a:	fba1 1303 	umull	r1, r3, r1, r3
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003872:	e00c      	b.n	800388e <PDM_PWM_Output_Process+0x202>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	8852      	ldrh	r2, [r2, #2]
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	4910      	ldr	r1, [pc, #64]	; (80038c8 <PDM_PWM_Output_Process+0x23c>)
 8003886:	fba1 1303 	umull	r1, r3, r1, r3
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	6413      	str	r3, [r2, #64]	; 0x40

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	Data_Buffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->Duty_Cycle;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	331a      	adds	r3, #26
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	8851      	ldrh	r1, [r2, #2]
 8003896:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <PDM_PWM_Output_Process+0x240>)
 8003898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 800389c:	e000      	b.n	80038a0 <PDM_PWM_Output_Process+0x214>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800389e:	bf00      	nop
}
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000df4 	.word	0x20000df4
 80038ac:	200003dc 	.word	0x200003dc
 80038b0:	2000111c 	.word	0x2000111c
 80038b4:	20001004 	.word	0x20001004
 80038b8:	20001050 	.word	0x20001050
 80038bc:	200012bc 	.word	0x200012bc
 80038c0:	20000530 	.word	0x20000530
 80038c4:	20001164 	.word	0x20001164
 80038c8:	10624dd3 	.word	0x10624dd3
 80038cc:	20001230 	.word	0x20001230

080038d0 <PDM_Next_Data_Conversion>:
//uint8_t next_data - next data to be converted:	0: Output current 0
//													1: Output current 1
//													2: Driver temperature
//													3: Driver voltage
static void PDM_Next_Data_Conversion(uint8_t next_data)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
	switch(next_data)
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d84c      	bhi.n	800397a <PDM_Next_Data_Conversion+0xaa>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <PDM_Next_Data_Conversion+0x18>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	08003919 	.word	0x08003919
 80038f0:	08003939 	.word	0x08003939
 80038f4:	08003959 	.word	0x08003959
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80038f8:	2201      	movs	r2, #1
 80038fa:	2120      	movs	r1, #32
 80038fc:	4821      	ldr	r0, [pc, #132]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 80038fe:	f003 f8a3 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003902:	2200      	movs	r2, #0
 8003904:	2108      	movs	r1, #8
 8003906:	481f      	ldr	r0, [pc, #124]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003908:	f003 f89e 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800390c:	2200      	movs	r2, #0
 800390e:	2104      	movs	r1, #4
 8003910:	481c      	ldr	r0, [pc, #112]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003912:	f003 f899 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 8003916:	e02f      	b.n	8003978 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003918:	2201      	movs	r2, #1
 800391a:	2120      	movs	r1, #32
 800391c:	4819      	ldr	r0, [pc, #100]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 800391e:	f003 f893 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	2108      	movs	r1, #8
 8003926:	4817      	ldr	r0, [pc, #92]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003928:	f003 f88e 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 800392c:	2201      	movs	r2, #1
 800392e:	2104      	movs	r1, #4
 8003930:	4814      	ldr	r0, [pc, #80]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003932:	f003 f889 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 8003936:	e01f      	b.n	8003978 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003938:	2201      	movs	r2, #1
 800393a:	2120      	movs	r1, #32
 800393c:	4811      	ldr	r0, [pc, #68]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 800393e:	f003 f883 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003942:	2201      	movs	r2, #1
 8003944:	2108      	movs	r1, #8
 8003946:	480f      	ldr	r0, [pc, #60]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003948:	f003 f87e 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800394c:	2200      	movs	r2, #0
 800394e:	2104      	movs	r1, #4
 8003950:	480c      	ldr	r0, [pc, #48]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003952:	f003 f879 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 8003956:	e00f      	b.n	8003978 <PDM_Next_Data_Conversion+0xa8>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003958:	2201      	movs	r2, #1
 800395a:	2120      	movs	r1, #32
 800395c:	4809      	ldr	r0, [pc, #36]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 800395e:	f003 f873 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003962:	2201      	movs	r2, #1
 8003964:	2108      	movs	r1, #8
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003968:	f003 f86e 	bl	8006a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 800396c:	2201      	movs	r2, #1
 800396e:	2104      	movs	r1, #4
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <PDM_Next_Data_Conversion+0xb4>)
 8003972:	f003 f869 	bl	8006a48 <HAL_GPIO_WritePin>
		break;
 8003976:	bf00      	nop
	}

	return;
 8003978:	bf00      	nop
 800397a:	bf00      	nop
}
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000

08003988 <PDM_Read_Data>:
//										1: Output current 1
//										2: Driver temperature
//										3: Driver voltage
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Read_Data(uint8_t *data_read)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	//Stop us timer to reduce processing cost
	HAL_TIM_Base_Stop_IT(&htim7);
 8003990:	48ab      	ldr	r0, [pc, #684]	; (8003c40 <PDM_Read_Data+0x2b8>)
 8003992:	f008 f8af 	bl	800baf4 <HAL_TIM_Base_Stop_IT>

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(*data_read)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b03      	cmp	r3, #3
 800399c:	f200 8198 	bhi.w	8003cd0 <PDM_Read_Data+0x348>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <PDM_Read_Data+0x20>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	08003a85 	.word	0x08003a85
 80039b0:	08003b61 	.word	0x08003b61
 80039b4:	08003bfd 	.word	0x08003bfd
	{
	case Data_Read_Current0:
		*data_read = Data_Read_Current0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_CURRENT1;
 80039be:	4ba1      	ldr	r3, [pc, #644]	; (8003c44 <PDM_Read_Data+0x2bc>)
 80039c0:	22a0      	movs	r2, #160	; 0xa0
 80039c2:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e058      	b.n	8003a7c <PDM_Read_Data+0xf4>
		{
			//Convert ADC into current
			Data_Buffer[i * 2] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	4a9e      	ldr	r2, [pc, #632]	; (8003c48 <PDM_Read_Data+0x2c0>)
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	f241 62f7 	movw	r2, #5879	; 0x16f7
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 80039de:	33dc      	adds	r3, #220	; 0xdc
 80039e0:	4a9a      	ldr	r2, [pc, #616]	; (8003c4c <PDM_Read_Data+0x2c4>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0b5a      	lsrs	r2, r3, #13
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b291      	uxth	r1, r2
 80039ee:	4a98      	ldr	r2, [pc, #608]	; (8003c50 <PDM_Read_Data+0x2c8>)
 80039f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[i * 2] > Output_Pin[i * 2].Current_Thresholds)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4a95      	ldr	r2, [pc, #596]	; (8003c50 <PDM_Read_Data+0x2c8>)
 80039fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	005a      	lsls	r2, r3, #1
 8003a02:	4894      	ldr	r0, [pc, #592]	; (8003c54 <PDM_Read_Data+0x2cc>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	3308      	adds	r3, #8
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	4299      	cmp	r1, r3
 8003a14:	d90d      	bls.n	8003a32 <PDM_Read_Data+0xaa>
				Driver_Overcurrent_Flag |= (1 << (i * 2));
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <PDM_Read_Data+0x2d0>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	4b8a      	ldr	r3, [pc, #552]	; (8003c58 <PDM_Read_Data+0x2d0>)
 8003a30:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	4a84      	ldr	r2, [pc, #528]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003a3e:	d20d      	bcs.n	8003a5c <PDM_Read_Data+0xd4>
				Data_ID_Buffer[i * 2] |= 1;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4a85      	ldr	r2, [pc, #532]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003a46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	b291      	uxth	r1, r2
 8003a54:	4a81      	ldr	r2, [pc, #516]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003a56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003a5a:	e00c      	b.n	8003a76 <PDM_Read_Data+0xee>
			else
				Data_ID_Buffer[i * 2] &= 0xFFFE;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4a7e      	ldr	r2, [pc, #504]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003a62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	b291      	uxth	r1, r2
 8003a70:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b07      	cmp	r3, #7
 8003a80:	d9a3      	bls.n	80039ca <PDM_Read_Data+0x42>
		}
		break;
 8003a82:	e125      	b.n	8003cd0 <PDM_Read_Data+0x348>

	case Data_Read_Current1:
		*data_read = Data_Read_Temperature;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_TEMPERATURE;
 8003a8a:	4b6e      	ldr	r3, [pc, #440]	; (8003c44 <PDM_Read_Data+0x2bc>)
 8003a8c:	22c8      	movs	r2, #200	; 0xc8
 8003a8e:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	73bb      	strb	r3, [r7, #14]
 8003a94:	e060      	b.n	8003b58 <PDM_Read_Data+0x1d0>
		{
			//Convert ADC into current
			Data_Buffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 8003a96:	7bbb      	ldrb	r3, [r7, #14]
 8003a98:	4a6b      	ldr	r2, [pc, #428]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9e:	f241 62f7 	movw	r2, #5879	; 0x16f7
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 8003aaa:	33dc      	adds	r3, #220	; 0xdc
 8003aac:	4a67      	ldr	r2, [pc, #412]	; (8003c4c <PDM_Read_Data+0x2c4>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0b5a      	lsrs	r2, r3, #13
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	3301      	adds	r3, #1
 8003aba:	b291      	uxth	r1, r2
 8003abc:	4a64      	ldr	r2, [pc, #400]	; (8003c50 <PDM_Read_Data+0x2c8>)
 8003abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[(i * 2) + 1] > Output_Pin[(i * 2) + 1].Current_Thresholds)
 8003ac2:	7bbb      	ldrb	r3, [r7, #14]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4a61      	ldr	r2, [pc, #388]	; (8003c50 <PDM_Read_Data+0x2c8>)
 8003aca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003ace:	7bbb      	ldrb	r3, [r7, #14]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	485f      	ldr	r0, [pc, #380]	; (8003c54 <PDM_Read_Data+0x2cc>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	d90e      	bls.n	8003b06 <PDM_Read_Data+0x17e>
				Driver_Overcurrent_Flag |= (1 << ((i * 2) + 1));
 8003ae8:	7bbb      	ldrb	r3, [r7, #14]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	3301      	adds	r3, #1
 8003aee:	2201      	movs	r2, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	b21a      	sxth	r2, r3
 8003af6:	4b58      	ldr	r3, [pc, #352]	; (8003c58 <PDM_Read_Data+0x2d0>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	4b55      	ldr	r3, [pc, #340]	; (8003c58 <PDM_Read_Data+0x2d0>)
 8003b04:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003b06:	7bbb      	ldrb	r3, [r7, #14]
 8003b08:	4a4f      	ldr	r2, [pc, #316]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003b12:	d20f      	bcs.n	8003b34 <PDM_Read_Data+0x1ac>
				Data_ID_Buffer[(i * 2) + 1] |= 1;
 8003b14:	7bbb      	ldrb	r3, [r7, #14]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a50      	ldr	r2, [pc, #320]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003b1c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	3301      	adds	r3, #1
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	b291      	uxth	r1, r2
 8003b2c:	4a4b      	ldr	r2, [pc, #300]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003b2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003b32:	e00e      	b.n	8003b52 <PDM_Read_Data+0x1ca>
			else
				Data_ID_Buffer[(i * 2) + 1] &= 0xFFFE;
 8003b34:	7bbb      	ldrb	r3, [r7, #14]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	3301      	adds	r3, #1
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003b3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003b40:	7bbb      	ldrb	r3, [r7, #14]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	3301      	adds	r3, #1
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	b291      	uxth	r1, r2
 8003b4c:	4a43      	ldr	r2, [pc, #268]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	3301      	adds	r3, #1
 8003b56:	73bb      	strb	r3, [r7, #14]
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d99b      	bls.n	8003a96 <PDM_Read_Data+0x10e>
		}
		break;
 8003b5e:	e0b7      	b.n	8003cd0 <PDM_Read_Data+0x348>

	case Data_Read_Temperature:
		*data_read = Data_Read_Voltage;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_VOLTAGE;
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <PDM_Read_Data+0x2bc>)
 8003b68:	22a0      	movs	r2, #160	; 0xa0
 8003b6a:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	737b      	strb	r3, [r7, #13]
 8003b70:	e040      	b.n	8003bf4 <PDM_Read_Data+0x26c>
		{
			//Convert ADC into temperature
			Data_Buffer[16 + i] = __PDM_CONVERT_TEMPERATURE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003b72:	7b7b      	ldrb	r3, [r7, #13]
 8003b74:	4a34      	ldr	r2, [pc, #208]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003b76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b7a:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f06f 0215 	mvn.w	r2, #21
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <PDM_Read_Data+0x2d8>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	7b7b      	ldrb	r3, [r7, #13]
 8003b94:	3310      	adds	r3, #16
 8003b96:	b291      	uxth	r1, r2
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <PDM_Read_Data+0x2c8>)
 8003b9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 8003b9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ba0:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d906      	bls.n	8003bb8 <PDM_Read_Data+0x230>
 8003baa:	7b7b      	ldrb	r3, [r7, #13]
 8003bac:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003bb6:	d90d      	bls.n	8003bd4 <PDM_Read_Data+0x24c>
				Data_ID_Buffer[16 + i] |= 1;
 8003bb8:	7b7b      	ldrb	r3, [r7, #13]
 8003bba:	3310      	adds	r3, #16
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003bbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003bc2:	7b7b      	ldrb	r3, [r7, #13]
 8003bc4:	3310      	adds	r3, #16
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	b291      	uxth	r1, r2
 8003bcc:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003bd2:	e00c      	b.n	8003bee <PDM_Read_Data+0x266>
			else
				Data_ID_Buffer[16 + i] &= 0xFFFE;
 8003bd4:	7b7b      	ldrb	r3, [r7, #13]
 8003bd6:	3310      	adds	r3, #16
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003bda:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003bde:	7b7b      	ldrb	r3, [r7, #13]
 8003be0:	3310      	adds	r3, #16
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	b291      	uxth	r1, r2
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003bee:	7b7b      	ldrb	r3, [r7, #13]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	737b      	strb	r3, [r7, #13]
 8003bf4:	7b7b      	ldrb	r3, [r7, #13]
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	d9bb      	bls.n	8003b72 <PDM_Read_Data+0x1ea>
		}
		break;
 8003bfa:	e069      	b.n	8003cd0 <PDM_Read_Data+0x348>

	case Data_Read_Voltage:
		*data_read = Data_Read_Current0;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_CURRENT0;
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <PDM_Read_Data+0x2bc>)
 8003c04:	22a0      	movs	r2, #160	; 0xa0
 8003c06:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	733b      	strb	r3, [r7, #12]
 8003c0c:	e044      	b.n	8003c98 <PDM_Read_Data+0x310>
		{
			//Convert ADC into voltage if the ADC value is valid
			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 8003c0e:	7b3b      	ldrb	r3, [r7, #12]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d906      	bls.n	8003c28 <PDM_Read_Data+0x2a0>
 8003c1a:	7b3b      	ldrb	r3, [r7, #12]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <PDM_Read_Data+0x2c0>)
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003c26:	d91d      	bls.n	8003c64 <PDM_Read_Data+0x2dc>
				Data_ID_Buffer[24] &= 0xFFFE;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003c2a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <PDM_Read_Data+0x2d4>)
 8003c34:	861a      	strh	r2, [r3, #48]	; 0x30
		for(uint8_t i = 0; i < 8; i++)
 8003c36:	7b3b      	ldrb	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	733b      	strb	r3, [r7, #12]
 8003c3c:	e02c      	b.n	8003c98 <PDM_Read_Data+0x310>
 8003c3e:	bf00      	nop
 8003c40:	2000126c 	.word	0x2000126c
 8003c44:	200011a0 	.word	0x200011a0
 8003c48:	20000ea8 	.word	0x20000ea8
 8003c4c:	d1b71759 	.word	0xd1b71759
 8003c50:	20001230 	.word	0x20001230
 8003c54:	20001050 	.word	0x20001050
 8003c58:	20000424 	.word	0x20000424
 8003c5c:	20001164 	.word	0x20001164
 8003c60:	cccccccd 	.word	0xcccccccd
			else
			{
				Data_Buffer[24] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003c64:	7b3b      	ldrb	r3, [r7, #12]
 8003c66:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <PDM_Read_Data+0x380>)
 8003c68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <PDM_Read_Data+0x380>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <PDM_Read_Data+0x384>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	0b5b      	lsrs	r3, r3, #13
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <PDM_Read_Data+0x388>)
 8003c86:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_ID_Buffer[24] |= 1;
 8003c88:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <PDM_Read_Data+0x38c>)
 8003c8a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <PDM_Read_Data+0x38c>)
 8003c94:	861a      	strh	r2, [r3, #48]	; 0x30
				break;
 8003c96:	e002      	b.n	8003c9e <PDM_Read_Data+0x316>
		for(uint8_t i = 0; i < 8; i++)
 8003c98:	7b3b      	ldrb	r3, [r7, #12]
 8003c9a:	2b07      	cmp	r3, #7
 8003c9c:	d9b7      	bls.n	8003c0e <PDM_Read_Data+0x286>
			}
		}

		//If no ADC value is valid, calculate voltage with Driver 1 reading
		if((Data_ID_Buffer[24] & 0xFFFE) == 0)
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <PDM_Read_Data+0x38c>)
 8003ca0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <PDM_Read_Data+0x346>
			Data_Buffer[0] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[0], ADC_BUFFER[8]);
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <PDM_Read_Data+0x380>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <PDM_Read_Data+0x380>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <PDM_Read_Data+0x384>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0b5b      	lsrs	r3, r3, #13
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <PDM_Read_Data+0x388>)
 8003ccc:	801a      	strh	r2, [r3, #0]

		break;
 8003cce:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	Data_Buffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(ADC_BUFFER[9]);
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <PDM_Read_Data+0x380>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f647 52ea 	movw	r2, #32234	; 0x7dea
 8003cd8:	fb02 f203 	mul.w	r2, r2, r3
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <PDM_Read_Data+0x390>)
 8003cde:	4413      	add	r3, r2
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <PDM_Read_Data+0x394>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <PDM_Read_Data+0x388>)
 8003cec:	865a      	strh	r2, [r3, #50]	; 0x32

	//Sets multiplexer for next data conversion
	PDM_Next_Data_Conversion(*data_read);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fdec 	bl	80038d0 <PDM_Next_Data_Conversion>

	//Restart us timer
	return HAL_TIM_Base_Start_IT(&htim7);
 8003cf8:	4809      	ldr	r0, [pc, #36]	; (8003d20 <PDM_Read_Data+0x398>)
 8003cfa:	f007 fe8b 	bl	800ba14 <HAL_TIM_Base_Start_IT>
 8003cfe:	4603      	mov	r3, r0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000ea8 	.word	0x20000ea8
 8003d0c:	d1b71759 	.word	0xd1b71759
 8003d10:	20001230 	.word	0x20001230
 8003d14:	20001164 	.word	0x20001164
 8003d18:	ffd56d90 	.word	0xffd56d90
 8003d1c:	10624dd3 	.word	0x10624dd3
 8003d20:	2000126c 	.word	0x2000126c

08003d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 031c 	add.w	r3, r7, #28
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	; (8003f40 <HAL_ADC_MspInit+0x1cc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d158      	bne.n	8003e48 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6453      	str	r3, [r2, #68]	; 0x44
 8003da6:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a62      	ldr	r2, [pc, #392]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b60      	ldr	r3, [pc, #384]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8003dce:	230f      	movs	r3, #15
 8003dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4619      	mov	r1, r3
 8003de0:	4859      	ldr	r0, [pc, #356]	; (8003f48 <HAL_ADC_MspInit+0x1d4>)
 8003de2:	f002 fb91 	bl	8006508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003de6:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003de8:	4a59      	ldr	r2, [pc, #356]	; (8003f50 <HAL_ADC_MspInit+0x1dc>)
 8003dea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003dec:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df8:	4b54      	ldr	r3, [pc, #336]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dfe:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e0e:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e16:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e1e:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e2a:	4848      	ldr	r0, [pc, #288]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e2c:	f001 ffc0 	bl	8005db0 <HAL_DMA_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003e36:	f7fd fa2d 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a43      	ldr	r2, [pc, #268]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e40:	4a42      	ldr	r2, [pc, #264]	; (8003f4c <HAL_ADC_MspInit+0x1d8>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e46:	e077      	b.n	8003f38 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <HAL_ADC_MspInit+0x1e0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d172      	bne.n	8003f38 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <HAL_ADC_MspInit+0x1d0>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG5_Pin|ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8003ea6:	23f0      	movs	r3, #240	; 0xf0
 8003ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 031c 	add.w	r3, r7, #28
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4823      	ldr	r0, [pc, #140]	; (8003f48 <HAL_ADC_MspInit+0x1d4>)
 8003eba:	f002 fb25 	bl	8006508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8003eca:	f107 031c 	add.w	r3, r7, #28
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4821      	ldr	r0, [pc, #132]	; (8003f58 <HAL_ADC_MspInit+0x1e4>)
 8003ed2:	f002 fb19 	bl	8006508 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003ed6:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_ADC_MspInit+0x1ec>)
 8003eda:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003efe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f06:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003f10:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003f1c:	480f      	ldr	r0, [pc, #60]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f1e:	f001 ff47 	bl	8005db0 <HAL_DMA_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8003f28:	f7fd f9b4 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
 8003f32:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <HAL_ADC_MspInit+0x1e8>)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f38:	bf00      	nop
 8003f3a:	3730      	adds	r7, #48	; 0x30
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40012000 	.word	0x40012000
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	20000f54 	.word	0x20000f54
 8003f50:	40026410 	.word	0x40026410
 8003f54:	40012100 	.word	0x40012100
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	200011a4 	.word	0x200011a4
 8003f60:	40026440 	.word	0x40026440

08003f64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <HAL_CAN_MspInit+0x94>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d134      	bne.n	8003ff0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_CAN_MspInit+0x98>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <HAL_CAN_MspInit+0x98>)
 8003f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_CAN_MspInit+0x98>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_CAN_MspInit+0x98>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_CAN_MspInit+0x98>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_CAN_MspInit+0x98>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003fd0:	2309      	movs	r3, #9
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4809      	ldr	r0, [pc, #36]	; (8004000 <HAL_CAN_MspInit+0x9c>)
 8003fdc:	f002 fa94 	bl	8006508 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	2014      	movs	r0, #20
 8003fe6:	f001 fe50 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003fea:	2014      	movs	r0, #20
 8003fec:	f001 fe69 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003ff0:	bf00      	nop
 8003ff2:	3728      	adds	r7, #40	; 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40006400 	.word	0x40006400
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020400 	.word	0x40020400

08004004 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	; (800403c <HAL_CAN_MspDeInit+0x38>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10d      	bne.n	8004032 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_CAN_MspDeInit+0x3c>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <HAL_CAN_MspDeInit+0x3c>)
 800401c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8004022:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004026:	4807      	ldr	r0, [pc, #28]	; (8004044 <HAL_CAN_MspDeInit+0x40>)
 8004028:	f002 fc02 	bl	8006830 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 800402c:	2014      	movs	r0, #20
 800402e:	f001 fe56 	bl	8005cde <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40006400 	.word	0x40006400
 8004040:	40023800 	.word	0x40023800
 8004044:	40020400 	.word	0x40020400

08004048 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <HAL_CRC_MspInit+0x3c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10d      	bne.n	8004076 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_CRC_MspInit+0x40>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_CRC_MspInit+0x40>)
 8004064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004068:	6313      	str	r3, [r2, #48]	; 0x30
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_CRC_MspInit+0x40>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023000 	.word	0x40023000
 8004088:	40023800 	.word	0x40023800

0800408c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a34      	ldr	r2, [pc, #208]	; (800417c <HAL_I2C_MspInit+0xf0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d161      	bne.n	8004172 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_I2C_MspInit+0xf4>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4a32      	ldr	r2, [pc, #200]	; (8004180 <HAL_I2C_MspInit+0xf4>)
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	6313      	str	r3, [r2, #48]	; 0x30
 80040be:	4b30      	ldr	r3, [pc, #192]	; (8004180 <HAL_I2C_MspInit+0xf4>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ca:	23c0      	movs	r3, #192	; 0xc0
 80040cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ce:	2312      	movs	r3, #18
 80040d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040da:	2304      	movs	r3, #4
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	4619      	mov	r1, r3
 80040e4:	4827      	ldr	r0, [pc, #156]	; (8004184 <HAL_I2C_MspInit+0xf8>)
 80040e6:	f002 fa0f 	bl	8006508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_I2C_MspInit+0xf4>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <HAL_I2C_MspInit+0xf4>)
 80040f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_I2C_MspInit+0xf4>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_I2C_MspInit+0x100>)
 800410a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800410c:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 800410e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004112:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 800411c:	2200      	movs	r2, #0
 800411e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 800412a:	2200      	movs	r2, #0
 800412c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800412e:	4b16      	ldr	r3, [pc, #88]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 800413c:	2200      	movs	r2, #0
 800413e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004142:	2200      	movs	r2, #0
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004146:	4810      	ldr	r0, [pc, #64]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 8004148:	f001 fe32 	bl	8005db0 <HAL_DMA_Init>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8004152:	f7fd f89f 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 800415a:	635a      	str	r2, [r3, #52]	; 0x34
 800415c:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <HAL_I2C_MspInit+0xfc>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	201f      	movs	r0, #31
 8004168:	f001 fd8f 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800416c:	201f      	movs	r0, #31
 800416e:	f001 fda8 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004172:	bf00      	nop
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40005400 	.word	0x40005400
 8004180:	40023800 	.word	0x40023800
 8004184:	40020400 	.word	0x40020400
 8004188:	20000470 	.word	0x20000470
 800418c:	400260a0 	.word	0x400260a0

08004190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <HAL_TIM_Base_MspInit+0x108>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d116      	bne.n	80041d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	4b3d      	ldr	r3, [pc, #244]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	4a3c      	ldr	r2, [pc, #240]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	6453      	str	r3, [r2, #68]	; 0x44
 80041b2:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	2019      	movs	r0, #25
 80041c4:	f001 fd61 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80041c8:	2019      	movs	r0, #25
 80041ca:	f001 fd7a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80041ce:	e05e      	b.n	800428e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a2e      	ldr	r2, [pc, #184]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	69bb      	ldr	r3, [r7, #24]
}
 80041f6:	e04a      	b.n	800428e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_TIM_Base_MspInit+0x110>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	4a24      	ldr	r2, [pc, #144]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 800420c:	f043 0302 	orr.w	r3, r3, #2
 8004210:	6413      	str	r3, [r2, #64]	; 0x40
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]
}
 800421e:	e036      	b.n	800428e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM6)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_TIM_Base_MspInit+0x114>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d116      	bne.n	8004258 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 8004234:	f043 0310 	orr.w	r3, r3, #16
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2100      	movs	r1, #0
 800424a:	2036      	movs	r0, #54	; 0x36
 800424c:	f001 fd1d 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004250:	2036      	movs	r0, #54	; 0x36
 8004252:	f001 fd36 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 8004256:	e01a      	b.n	800428e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <HAL_TIM_Base_MspInit+0x118>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d115      	bne.n	800428e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a0c      	ldr	r2, [pc, #48]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_TIM_Base_MspInit+0x10c>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2100      	movs	r1, #0
 8004282:	2037      	movs	r0, #55	; 0x37
 8004284:	f001 fd01 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004288:	2037      	movs	r0, #55	; 0x37
 800428a:	f001 fd1a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 800428e:	bf00      	nop
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40023800 	.word	0x40023800
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40001000 	.word	0x40001000
 80042a8:	40001400 	.word	0x40001400

080042ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10d      	bne.n	80042da <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_TIM_PWM_MspInit+0x40>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_TIM_PWM_MspInit+0x40>)
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <HAL_TIM_PWM_MspInit+0x40>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40023800 	.word	0x40023800

080042f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f8:	f107 031c 	add.w	r3, r7, #28
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	60da      	str	r2, [r3, #12]
 8004306:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a49      	ldr	r2, [pc, #292]	; (8004434 <HAL_TIM_MspPostInit+0x144>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d11f      	bne.n	8004352 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	4b48      	ldr	r3, [pc, #288]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	4a47      	ldr	r2, [pc, #284]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 800431c:	f043 0310 	orr.w	r3, r3, #16
 8004320:	6313      	str	r3, [r2, #48]	; 0x30
 8004322:	4b45      	ldr	r3, [pc, #276]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 800432e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004334:	2302      	movs	r3, #2
 8004336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433c:	2300      	movs	r3, #0
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004340:	2301      	movs	r3, #1
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	4619      	mov	r1, r3
 800434a:	483c      	ldr	r0, [pc, #240]	; (800443c <HAL_TIM_MspPostInit+0x14c>)
 800434c:	f002 f8dc 	bl	8006508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004350:	e06b      	b.n	800442a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d11f      	bne.n	800439c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	4b35      	ldr	r3, [pc, #212]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	4a34      	ldr	r2, [pc, #208]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	6313      	str	r3, [r2, #48]	; 0x30
 800436c:	4b32      	ldr	r3, [pc, #200]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8004378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437e:	2302      	movs	r3, #2
 8004380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004386:	2300      	movs	r3, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800438a:	2301      	movs	r3, #1
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 800438e:	f107 031c 	add.w	r3, r7, #28
 8004392:	4619      	mov	r1, r3
 8004394:	482a      	ldr	r0, [pc, #168]	; (8004440 <HAL_TIM_MspPostInit+0x150>)
 8004396:	f002 f8b7 	bl	8006508 <HAL_GPIO_Init>
}
 800439a:	e046      	b.n	800442a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_TIM_MspPostInit+0x154>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d11e      	bne.n	80043e4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	4b23      	ldr	r3, [pc, #140]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4a22      	ldr	r2, [pc, #136]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80043c2:	2302      	movs	r3, #2
 80043c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ce:	2300      	movs	r3, #0
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043d2:	2302      	movs	r3, #2
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 80043d6:	f107 031c 	add.w	r3, r7, #28
 80043da:	4619      	mov	r1, r3
 80043dc:	4818      	ldr	r0, [pc, #96]	; (8004440 <HAL_TIM_MspPostInit+0x150>)
 80043de:	f002 f893 	bl	8006508 <HAL_GPIO_Init>
}
 80043e2:	e022      	b.n	800442a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_TIM_MspPostInit+0x158>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d11d      	bne.n	800442a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	6313      	str	r3, [r2, #48]	; 0x30
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_TIM_MspPostInit+0x148>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	2302      	movs	r3, #2
 8004410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	2300      	movs	r3, #0
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800441a:	2303      	movs	r3, #3
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 800441e:	f107 031c 	add.w	r3, r7, #28
 8004422:	4619      	mov	r1, r3
 8004424:	4806      	ldr	r0, [pc, #24]	; (8004440 <HAL_TIM_MspPostInit+0x150>)
 8004426:	f002 f86f 	bl	8006508 <HAL_GPIO_Init>
}
 800442a:	bf00      	nop
 800442c:	3730      	adds	r7, #48	; 0x30
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40023800 	.word	0x40023800
 800443c:	40021000 	.word	0x40021000
 8004440:	40020400 	.word	0x40020400
 8004444:	40000400 	.word	0x40000400
 8004448:	40010400 	.word	0x40010400

0800444c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004450:	e7fe      	b.n	8004450 <NMI_Handler+0x4>

08004452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004456:	e7fe      	b.n	8004456 <HardFault_Handler+0x4>

08004458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800445c:	e7fe      	b.n	800445c <MemManage_Handler+0x4>

0800445e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004462:	e7fe      	b.n	8004462 <BusFault_Handler+0x4>

08004464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004468:	e7fe      	b.n	8004468 <UsageFault_Handler+0x4>

0800446a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004498:	f000 f940 	bl	800471c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}

080044a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80044a4:	2001      	movs	r0, #1
 80044a6:	f002 fb03 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}

080044ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80044b2:	2002      	movs	r0, #2
 80044b4:	f002 fafc 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}

080044bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80044c0:	2004      	movs	r0, #4
 80044c2:	f002 faf5 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}

080044ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80044ce:	2008      	movs	r0, #8
 80044d0:	f002 faee 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80044d4:	bf00      	nop
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80044dc:	2010      	movs	r0, #16
 80044de:	f002 fae7 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <DMA1_Stream6_IRQHandler+0x10>)
 80044ee:	f001 fd87 	bl	8006000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000470 	.word	0x20000470

080044fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004500:	4802      	ldr	r0, [pc, #8]	; (800450c <CAN1_RX0_IRQHandler+0x10>)
 8004502:	f001 f894 	bl	800562e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20001204 	.word	0x20001204

08004510 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004514:	2020      	movs	r0, #32
 8004516:	f002 facb 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800451a:	2040      	movs	r0, #64	; 0x40
 800451c:	f002 fac8 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004520:	2080      	movs	r0, #128	; 0x80
 8004522:	f002 fac5 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004526:	f44f 7080 	mov.w	r0, #256	; 0x100
 800452a:	f002 fac1 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800452e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004532:	f002 fabd 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004542:	f007 fc1d 	bl	800bd80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20001004 	.word	0x20001004

08004550 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <I2C1_EV_IRQHandler+0x10>)
 8004556:	f002 ff8f 	bl	8007478 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200004d0 	.word	0x200004d0

08004564 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004568:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800456c:	f002 faa0 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004570:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004574:	f002 fa9c 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004578:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800457c:	f002 fa98 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004580:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004584:	f002 fa94 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004588:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800458c:	f002 fa90 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004590:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004594:	f002 fa8c 	bl	8006ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}

0800459c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80045a0:	4802      	ldr	r0, [pc, #8]	; (80045ac <TIM6_DAC_IRQHandler+0x10>)
 80045a2:	f007 fbed 	bl	800bd80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000fb8 	.word	0x20000fb8

080045b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80045b4:	4802      	ldr	r0, [pc, #8]	; (80045c0 <TIM7_IRQHandler+0x10>)
 80045b6:	f007 fbe3 	bl	800bd80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2000126c 	.word	0x2000126c

080045c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045c8:	4802      	ldr	r0, [pc, #8]	; (80045d4 <DMA2_Stream0_IRQHandler+0x10>)
 80045ca:	f001 fd19 	bl	8006000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000f54 	.word	0x20000f54

080045d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80045dc:	4802      	ldr	r0, [pc, #8]	; (80045e8 <DMA2_Stream2_IRQHandler+0x10>)
 80045de:	f001 fd0f 	bl	8006000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	200011a4 	.word	0x200011a4

080045ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80045f0:	4802      	ldr	r0, [pc, #8]	; (80045fc <OTG_FS_IRQHandler+0x10>)
 80045f2:	f005 f876 	bl	80096e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20002794 	.word	0x20002794

08004600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <SystemInit+0x20>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <SystemInit+0x20>)
 800460c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800465c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004628:	480d      	ldr	r0, [pc, #52]	; (8004660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800462a:	490e      	ldr	r1, [pc, #56]	; (8004664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800462c:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800462e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004630:	e002      	b.n	8004638 <LoopCopyDataInit>

08004632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004636:	3304      	adds	r3, #4

08004638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800463a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800463c:	d3f9      	bcc.n	8004632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800463e:	4a0b      	ldr	r2, [pc, #44]	; (800466c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004640:	4c0b      	ldr	r4, [pc, #44]	; (8004670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004644:	e001      	b.n	800464a <LoopFillZerobss>

08004646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004648:	3204      	adds	r2, #4

0800464a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800464a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800464c:	d3fb      	bcc.n	8004646 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800464e:	f7ff ffd7 	bl	8004600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004652:	f00c f869 	bl	8010728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004656:	f7fb ff99 	bl	800058c <main>
  bx  lr    
 800465a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800465c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004664:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8004668:	08010810 	.word	0x08010810
  ldr r2, =_sbss
 800466c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8004670:	20002b9c 	.word	0x20002b9c

08004674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004674:	e7fe      	b.n	8004674 <ADC_IRQHandler>
	...

08004678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_Init+0x40>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <HAL_Init+0x40>)
 8004682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_Init+0x40>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <HAL_Init+0x40>)
 800468e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <HAL_Init+0x40>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_Init+0x40>)
 800469a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046a0:	2003      	movs	r0, #3
 80046a2:	f001 fae7 	bl	8005c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046a6:	200f      	movs	r0, #15
 80046a8:	f000 f808 	bl	80046bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046ac:	f7ff fb3a 	bl	8003d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023c00 	.word	0x40023c00

080046bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046c4:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_InitTick+0x54>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_InitTick+0x58>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fb0d 	bl	8005cfa <HAL_SYSTICK_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00e      	b.n	8004708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b0f      	cmp	r3, #15
 80046ee:	d80a      	bhi.n	8004706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046f0:	2200      	movs	r2, #0
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	f001 fac7 	bl	8005c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <HAL_InitTick+0x5c>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000000 	.word	0x20000000
 8004714:	20000008 	.word	0x20000008
 8004718:	20000004 	.word	0x20000004

0800471c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_IncTick+0x20>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_IncTick+0x24>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4413      	add	r3, r2
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_IncTick+0x24>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000008 	.word	0x20000008
 8004740:	200012c0 	.word	0x200012c0

08004744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return uwTick;
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_GetTick+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	200012c0 	.word	0x200012c0

0800475c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004764:	f7ff ffee 	bl	8004744 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d005      	beq.n	8004782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_Delay+0x44>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004782:	bf00      	nop
 8004784:	f7ff ffde 	bl	8004744 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d8f7      	bhi.n	8004784 <HAL_Delay+0x28>
  {
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000008 	.word	0x20000008

080047a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e033      	b.n	8004822 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff fad6 	bl	8003d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d118      	bne.n	8004814 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047ea:	f023 0302 	bic.w	r3, r3, #2
 80047ee:	f043 0202 	orr.w	r2, r3, #2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f94a 	bl	8004a90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	f043 0201 	orr.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
 8004812:	e001      	b.n	8004818 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x1c>
 8004844:	2302      	movs	r3, #2
 8004846:	e113      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x244>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b09      	cmp	r3, #9
 8004856:	d925      	bls.n	80048a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68d9      	ldr	r1, [r3, #12]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	3b1e      	subs	r3, #30
 800486e:	2207      	movs	r2, #7
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43da      	mvns	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	400a      	ands	r2, r1
 800487c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68d9      	ldr	r1, [r3, #12]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	4618      	mov	r0, r3
 8004890:	4603      	mov	r3, r0
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4403      	add	r3, r0
 8004896:	3b1e      	subs	r3, #30
 8004898:	409a      	lsls	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e022      	b.n	80048ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6919      	ldr	r1, [r3, #16]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	2207      	movs	r2, #7
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43da      	mvns	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	400a      	ands	r2, r1
 80048c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6919      	ldr	r1, [r3, #16]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4618      	mov	r0, r3
 80048da:	4603      	mov	r3, r0
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4403      	add	r3, r0
 80048e0:	409a      	lsls	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d824      	bhi.n	800493c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	3b05      	subs	r3, #5
 8004904:	221f      	movs	r2, #31
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	400a      	ands	r2, r1
 8004912:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	4618      	mov	r0, r3
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	3b05      	subs	r3, #5
 800492e:	fa00 f203 	lsl.w	r2, r0, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	635a      	str	r2, [r3, #52]	; 0x34
 800493a:	e04c      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d824      	bhi.n	800498e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	3b23      	subs	r3, #35	; 0x23
 8004956:	221f      	movs	r2, #31
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43da      	mvns	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	400a      	ands	r2, r1
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	4618      	mov	r0, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	3b23      	subs	r3, #35	; 0x23
 8004980:	fa00 f203 	lsl.w	r2, r0, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
 800498c:	e023      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	3b41      	subs	r3, #65	; 0x41
 80049a0:	221f      	movs	r2, #31
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43da      	mvns	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	400a      	ands	r2, r1
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4618      	mov	r0, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	3b41      	subs	r3, #65	; 0x41
 80049ca:	fa00 f203 	lsl.w	r2, r0, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <HAL_ADC_ConfigChannel+0x250>)
 80049d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a28      	ldr	r2, [pc, #160]	; (8004a80 <HAL_ADC_ConfigChannel+0x254>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10f      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x1d8>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b12      	cmp	r3, #18
 80049ea:	d10b      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_ADC_ConfigChannel+0x254>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d12b      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x23a>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_ADC_ConfigChannel+0x258>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <HAL_ADC_ConfigChannel+0x1f4>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b11      	cmp	r3, #17
 8004a1e:	d122      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <HAL_ADC_ConfigChannel+0x258>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d111      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_ADC_ConfigChannel+0x25c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_ADC_ConfigChannel+0x260>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	0c9a      	lsrs	r2, r3, #18
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a58:	e002      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f9      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40012300 	.word	0x40012300
 8004a80:	40012000 	.word	0x40012000
 8004a84:	10000012 	.word	0x10000012
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	431bde83 	.word	0x431bde83

08004a90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <ADC_Init+0x1f0>)
 8004a9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	021a      	lsls	r2, r3, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	4a58      	ldr	r2, [pc, #352]	; (8004c84 <ADC_Init+0x1f4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6899      	ldr	r1, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6899      	ldr	r1, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	e00f      	b.n	8004b8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0202 	bic.w	r2, r2, #2
 8004b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6899      	ldr	r1, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	7e1b      	ldrb	r3, [r3, #24]
 8004ba8:	005a      	lsls	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	3b01      	subs	r3, #1
 8004be8:	035a      	lsls	r2, r3, #13
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	e007      	b.n	8004c04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	051a      	lsls	r2, r3, #20
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c46:	025a      	lsls	r2, r3, #9
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	029a      	lsls	r2, r3, #10
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	40012300 	.word	0x40012300
 8004c84:	0f000001 	.word	0x0f000001

08004c88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0ed      	b.n	8004e76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff f95c 	bl	8003f64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cbc:	f7ff fd42 	bl	8004744 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cc2:	e012      	b.n	8004cea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cc4:	f7ff fd3e 	bl	8004744 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b0a      	cmp	r3, #10
 8004cd0:	d90b      	bls.n	8004cea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0c5      	b.n	8004e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0e5      	beq.n	8004cc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0202 	bic.w	r2, r2, #2
 8004d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d08:	f7ff fd1c 	bl	8004744 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d0e:	e012      	b.n	8004d36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d10:	f7ff fd18 	bl	8004744 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b0a      	cmp	r3, #10
 8004d1c:	d90b      	bls.n	8004d36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e09f      	b.n	8004e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7e1b      	ldrb	r3, [r3, #24]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d108      	bne.n	8004d5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e007      	b.n	8004d6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	7e5b      	ldrb	r3, [r3, #25]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d108      	bne.n	8004d88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e007      	b.n	8004d98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7e9b      	ldrb	r3, [r3, #26]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d108      	bne.n	8004db2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0220 	orr.w	r2, r2, #32
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e007      	b.n	8004dc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0220 	bic.w	r2, r2, #32
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7edb      	ldrb	r3, [r3, #27]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d108      	bne.n	8004ddc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0210 	bic.w	r2, r2, #16
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e007      	b.n	8004dec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0210 	orr.w	r2, r2, #16
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	7f1b      	ldrb	r3, [r3, #28]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d108      	bne.n	8004e06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0208 	orr.w	r2, r2, #8
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e007      	b.n	8004e16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7f5b      	ldrb	r3, [r3, #29]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d108      	bne.n	8004e30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0204 	orr.w	r2, r2, #4
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e007      	b.n	8004e40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	ea42 0103 	orr.w	r1, r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e015      	b.n	8004ebc <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f93b 	bl	800510c <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff f8b4 	bl	8004004 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <HAL_CAN_ConfigFilter+0x26>
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	f040 80be 	bne.w	8005066 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <HAL_CAN_ConfigFilter+0x1bc>)
 8004eec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	401a      	ands	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d123      	bne.n	8004f94 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	401a      	ands	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3248      	adds	r2, #72	; 0x48
 8004f74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	3348      	adds	r3, #72	; 0x48
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	440b      	add	r3, r1
 8004f92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d122      	bne.n	8004fe2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	3248      	adds	r2, #72	; 0x48
 8004fc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	3348      	adds	r3, #72	; 0x48
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	440b      	add	r3, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	401a      	ands	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ffc:	e007      	b.n	800500e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	431a      	orrs	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	43db      	mvns	r3, r3
 8005020:	401a      	ands	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005028:	e007      	b.n	800503a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	431a      	orrs	r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	431a      	orrs	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005058:	f023 0201 	bic.w	r2, r3, #1
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e006      	b.n	8005074 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	40006400 	.word	0x40006400

08005084 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d12e      	bne.n	80050f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050b0:	f7ff fb48 	bl	8004744 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050b6:	e012      	b.n	80050de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b8:	f7ff fb44 	bl	8004744 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b0a      	cmp	r3, #10
 80050c4:	d90b      	bls.n	80050de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2205      	movs	r2, #5
 80050d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e012      	b.n	8005104 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e006      	b.n	8005104 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d133      	bne.n	8005188 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005130:	f7ff fb08 	bl	8004744 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005136:	e012      	b.n	800515e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005138:	f7ff fb04 	bl	8004744 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b0a      	cmp	r3, #10
 8005144:	d90b      	bls.n	800515e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2205      	movs	r2, #5
 8005156:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e01b      	b.n	8005196 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0e5      	beq.n	8005138 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0202 	bic.w	r2, r2, #2
 800517a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e006      	b.n	8005196 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800519e:	b480      	push	{r7}
 80051a0:	b089      	sub	sp, #36	; 0x24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80051bc:	7ffb      	ldrb	r3, [r7, #31]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d003      	beq.n	80051ca <HAL_CAN_AddTxMessage+0x2c>
 80051c2:	7ffb      	ldrb	r3, [r7, #31]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f040 80b8 	bne.w	800533a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a0 	beq.w	800532a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	0e1b      	lsrs	r3, r3, #24
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d907      	bls.n	800520a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e09e      	b.n	8005348 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800520a:	2201      	movs	r2, #1
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	409a      	lsls	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10d      	bne.n	8005238 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	6809      	ldr	r1, [r1, #0]
 800522a:	431a      	orrs	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3318      	adds	r3, #24
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	440b      	add	r3, r1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e00f      	b.n	8005258 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005242:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005248:	68f9      	ldr	r1, [r7, #12]
 800524a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800524c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3318      	adds	r3, #24
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	440b      	add	r3, r1
 8005256:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6819      	ldr	r1, [r3, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	3318      	adds	r3, #24
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	440b      	add	r3, r1
 8005268:	3304      	adds	r3, #4
 800526a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	7d1b      	ldrb	r3, [r3, #20]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d111      	bne.n	8005298 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3318      	adds	r3, #24
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	4413      	add	r3, r2
 8005280:	3304      	adds	r3, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	6811      	ldr	r1, [r2, #0]
 8005288:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3318      	adds	r3, #24
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	440b      	add	r3, r1
 8005294:	3304      	adds	r3, #4
 8005296:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3307      	adds	r3, #7
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	061a      	lsls	r2, r3, #24
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3306      	adds	r3, #6
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3305      	adds	r3, #5
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	4313      	orrs	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	3204      	adds	r2, #4
 80052b8:	7812      	ldrb	r2, [r2, #0]
 80052ba:	4610      	mov	r0, r2
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	6811      	ldr	r1, [r2, #0]
 80052c0:	ea43 0200 	orr.w	r2, r3, r0
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	440b      	add	r3, r1
 80052ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3303      	adds	r3, #3
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	061a      	lsls	r2, r3, #24
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3302      	adds	r3, #2
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3301      	adds	r3, #1
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	4313      	orrs	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	4610      	mov	r0, r2
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	ea43 0200 	orr.w	r2, r3, r0
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	440b      	add	r3, r1
 8005300:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005304:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3318      	adds	r3, #24
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	4413      	add	r3, r2
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	6811      	ldr	r1, [r2, #0]
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3318      	adds	r3, #24
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	440b      	add	r3, r1
 8005324:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e00e      	b.n	8005348 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e006      	b.n	8005348 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
  }
}
 8005348:	4618      	mov	r0, r3
 800534a:	3724      	adds	r7, #36	; 0x24
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005366:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005368:	7afb      	ldrb	r3, [r7, #11]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d002      	beq.n	8005374 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11d      	bne.n	80053b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d003      	beq.n	80053e2 <HAL_CAN_GetRxMessage+0x24>
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	f040 80f3 	bne.w	80055c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10e      	bne.n	8005406 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e0e7      	b.n	80055d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0d8      	b.n	80055d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	331b      	adds	r3, #27
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	4413      	add	r3, r2
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0204 	and.w	r2, r3, #4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10c      	bne.n	800545c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	331b      	adds	r3, #27
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	4413      	add	r3, r2
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0d5b      	lsrs	r3, r3, #21
 8005452:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e00b      	b.n	8005474 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	331b      	adds	r3, #27
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	4413      	add	r3, r2
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	331b      	adds	r3, #27
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	4413      	add	r3, r2
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0202 	and.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	331b      	adds	r3, #27
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	4413      	add	r3, r2
 8005496:	3304      	adds	r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 020f 	and.w	r2, r3, #15
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	331b      	adds	r3, #27
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	4413      	add	r3, r2
 80054ae:	3304      	adds	r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	331b      	adds	r3, #27
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	0a1a      	lsrs	r2, r3, #8
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	4413      	add	r3, r2
 800550c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	0c1a      	lsrs	r2, r3, #16
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	3302      	adds	r3, #2
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	4413      	add	r3, r2
 8005526:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	0e1a      	lsrs	r2, r3, #24
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3303      	adds	r3, #3
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	4413      	add	r3, r2
 8005540:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3304      	adds	r3, #4
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	0a1a      	lsrs	r2, r3, #8
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	3305      	adds	r3, #5
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	4413      	add	r3, r2
 8005572:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	0c1a      	lsrs	r2, r3, #16
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	3306      	adds	r3, #6
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	4413      	add	r3, r2
 800558c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	0e1a      	lsrs	r2, r3, #24
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	3307      	adds	r3, #7
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0220 	orr.w	r2, r2, #32
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	e007      	b.n	80055c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0220 	orr.w	r2, r2, #32
 80055c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e006      	b.n	80055d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d002      	beq.n	8005600 <HAL_CAN_ActivateNotification+0x1e>
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d109      	bne.n	8005614 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6959      	ldr	r1, [r3, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e006      	b.n	8005622 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b08a      	sub	sp, #40	; 0x28
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d07c      	beq.n	800576e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d023      	beq.n	80056c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2201      	movs	r2, #1
 8005684:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f983 	bl	800599c <HAL_CAN_TxMailbox0CompleteCallback>
 8005696:	e016      	b.n	80056c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
 80056aa:	e00c      	b.n	80056c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	e002      	b.n	80056c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f989 	bl	80059d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d024      	beq.n	800571a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f963 	bl	80059b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80056ea:	e016      	b.n	800571a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	e00c      	b.n	800571a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	e002      	b.n	800571a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f969 	bl	80059ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d024      	beq.n	800576e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800572c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f943 	bl	80059c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800573e:	e016      	b.n	800576e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d004      	beq.n	8005754 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
 8005752:	e00c      	b.n	800576e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
 8005766:	e002      	b.n	800576e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f949 	bl	8005a00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005788:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2210      	movs	r2, #16
 8005790:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d006      	beq.n	80057b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2208      	movs	r2, #8
 80057ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f930 	bl	8005a14 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fd fa77 	bl	8002cc0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00c      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2210      	movs	r2, #16
 80057f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d006      	beq.n	8005818 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2208      	movs	r2, #8
 8005810:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f912 	bl	8005a3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f8f9 	bl	8005a28 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b00      	cmp	r3, #0
 8005848:	d006      	beq.n	8005858 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2210      	movs	r2, #16
 8005850:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8fc 	bl	8005a50 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2208      	movs	r2, #8
 8005872:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8f5 	bl	8005a64 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d07b      	beq.n	800597c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d072      	beq.n	8005974 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	f043 0304 	orr.w	r3, r3, #4
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d043      	beq.n	8005974 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03e      	beq.n	8005974 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058fc:	2b60      	cmp	r3, #96	; 0x60
 80058fe:	d02b      	beq.n	8005958 <HAL_CAN_IRQHandler+0x32a>
 8005900:	2b60      	cmp	r3, #96	; 0x60
 8005902:	d82e      	bhi.n	8005962 <HAL_CAN_IRQHandler+0x334>
 8005904:	2b50      	cmp	r3, #80	; 0x50
 8005906:	d022      	beq.n	800594e <HAL_CAN_IRQHandler+0x320>
 8005908:	2b50      	cmp	r3, #80	; 0x50
 800590a:	d82a      	bhi.n	8005962 <HAL_CAN_IRQHandler+0x334>
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d019      	beq.n	8005944 <HAL_CAN_IRQHandler+0x316>
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d826      	bhi.n	8005962 <HAL_CAN_IRQHandler+0x334>
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d010      	beq.n	800593a <HAL_CAN_IRQHandler+0x30c>
 8005918:	2b30      	cmp	r3, #48	; 0x30
 800591a:	d822      	bhi.n	8005962 <HAL_CAN_IRQHandler+0x334>
 800591c:	2b10      	cmp	r3, #16
 800591e:	d002      	beq.n	8005926 <HAL_CAN_IRQHandler+0x2f8>
 8005920:	2b20      	cmp	r3, #32
 8005922:	d005      	beq.n	8005930 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005924:	e01d      	b.n	8005962 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800592e:	e019      	b.n	8005964 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	f043 0310 	orr.w	r3, r3, #16
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005938:	e014      	b.n	8005964 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	f043 0320 	orr.w	r3, r3, #32
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005942:	e00f      	b.n	8005964 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800594c:	e00a      	b.n	8005964 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005956:	e005      	b.n	8005964 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005960:	e000      	b.n	8005964 <HAL_CAN_IRQHandler+0x336>
            break;
 8005962:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005972:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2204      	movs	r2, #4
 800597a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f872 	bl	8005a78 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005994:	bf00      	nop
 8005996:	3728      	adds	r7, #40	; 0x28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005abe:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	60d3      	str	r3, [r2, #12]
}
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <__NVIC_GetPriorityGrouping+0x18>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	0a1b      	lsrs	r3, r3, #8
 8005ade:	f003 0307 	and.w	r3, r3, #7
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db0b      	blt.n	8005b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	f003 021f 	and.w	r2, r3, #31
 8005b08:	4907      	ldr	r1, [pc, #28]	; (8005b28 <__NVIC_EnableIRQ+0x38>)
 8005b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2001      	movs	r0, #1
 8005b12:	fa00 f202 	lsl.w	r2, r0, r2
 8005b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	e000e100 	.word	0xe000e100

08005b2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	db12      	blt.n	8005b64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	f003 021f 	and.w	r2, r3, #31
 8005b44:	490a      	ldr	r1, [pc, #40]	; (8005b70 <__NVIC_DisableIRQ+0x44>)
 8005b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b52:	3320      	adds	r3, #32
 8005b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b58:	f3bf 8f4f 	dsb	sy
}
 8005b5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b5e:	f3bf 8f6f 	isb	sy
}
 8005b62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	e000e100 	.word	0xe000e100

08005b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	6039      	str	r1, [r7, #0]
 8005b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	db0a      	blt.n	8005b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <__NVIC_SetPriority+0x4c>)
 8005b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b92:	0112      	lsls	r2, r2, #4
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	440b      	add	r3, r1
 8005b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b9c:	e00a      	b.n	8005bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	4908      	ldr	r1, [pc, #32]	; (8005bc4 <__NVIC_SetPriority+0x50>)
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3b04      	subs	r3, #4
 8005bac:	0112      	lsls	r2, r2, #4
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	761a      	strb	r2, [r3, #24]
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	e000e100 	.word	0xe000e100
 8005bc4:	e000ed00 	.word	0xe000ed00

08005bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f1c3 0307 	rsb	r3, r3, #7
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	bf28      	it	cs
 8005be6:	2304      	movcs	r3, #4
 8005be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	3304      	adds	r3, #4
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d902      	bls.n	8005bf8 <NVIC_EncodePriority+0x30>
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3b03      	subs	r3, #3
 8005bf6:	e000      	b.n	8005bfa <NVIC_EncodePriority+0x32>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43da      	mvns	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c10:	f04f 31ff 	mov.w	r1, #4294967295
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	43d9      	mvns	r1, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c20:	4313      	orrs	r3, r2
         );
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3724      	adds	r7, #36	; 0x24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c40:	d301      	bcc.n	8005c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c42:	2301      	movs	r3, #1
 8005c44:	e00f      	b.n	8005c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c46:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <SysTick_Config+0x40>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c4e:	210f      	movs	r1, #15
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	f7ff ff8e 	bl	8005b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <SysTick_Config+0x40>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <SysTick_Config+0x40>)
 8005c60:	2207      	movs	r2, #7
 8005c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000e010 	.word	0xe000e010

08005c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ff05 	bl	8005a8c <__NVIC_SetPriorityGrouping>
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b086      	sub	sp, #24
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	4603      	mov	r3, r0
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c9c:	f7ff ff1a 	bl	8005ad4 <__NVIC_GetPriorityGrouping>
 8005ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	6978      	ldr	r0, [r7, #20]
 8005ca8:	f7ff ff8e 	bl	8005bc8 <NVIC_EncodePriority>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ff5d 	bl	8005b74 <__NVIC_SetPriority>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	4603      	mov	r3, r0
 8005cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff0d 	bl	8005af0 <__NVIC_EnableIRQ>
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff1d 	bl	8005b2c <__NVIC_DisableIRQ>
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ff94 	bl	8005c30 <SysTick_Config>
 8005d08:	4603      	mov	r3, r0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e00e      	b.n	8005d42 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	795b      	ldrb	r3, [r3, #5]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fe f987 	bl	8004048 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b087      	sub	sp, #28
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	e00a      	b.n	8005d8c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	441a      	add	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d3f0      	bcc.n	8005d76 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8005da2:	693b      	ldr	r3, [r7, #16]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005dbc:	f7fe fcc2 	bl	8004744 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e099      	b.n	8005f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dec:	e00f      	b.n	8005e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dee:	f7fe fca9 	bl	8004744 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d908      	bls.n	8005e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2203      	movs	r2, #3
 8005e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e078      	b.n	8005f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e8      	bne.n	8005dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4b38      	ldr	r3, [pc, #224]	; (8005f08 <HAL_DMA_Init+0x158>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d107      	bne.n	8005e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	4313      	orrs	r3, r2
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d117      	bne.n	8005ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 faab 	bl	8006410 <DMA_CheckFifoParam>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e016      	b.n	8005f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa62 	bl	80063a4 <DMA_CalcBaseAndBitshift>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	223f      	movs	r2, #63	; 0x3f
 8005eea:	409a      	lsls	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	f010803f 	.word	0xf010803f

08005f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_DMA_Start_IT+0x26>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e040      	b.n	8005fb4 <HAL_DMA_Start_IT+0xa8>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d12f      	bne.n	8005fa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f9f4 	bl	8006348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f64:	223f      	movs	r2, #63	; 0x3f
 8005f66:	409a      	lsls	r2, r3
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0216 	orr.w	r2, r2, #22
 8005f7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0208 	orr.w	r2, r2, #8
 8005f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e005      	b.n	8005fb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d004      	beq.n	8005fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2280      	movs	r2, #128	; 0x80
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e00c      	b.n	8005ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2205      	movs	r2, #5
 8005fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800600c:	4b92      	ldr	r3, [pc, #584]	; (8006258 <HAL_DMA_IRQHandler+0x258>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a92      	ldr	r2, [pc, #584]	; (800625c <HAL_DMA_IRQHandler+0x25c>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a9b      	lsrs	r3, r3, #10
 8006018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	2208      	movs	r2, #8
 800602c:	409a      	lsls	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01a      	beq.n	800606c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d013      	beq.n	800606c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0204 	bic.w	r2, r2, #4
 8006052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	2208      	movs	r2, #8
 800605a:	409a      	lsls	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	2201      	movs	r2, #1
 8006072:	409a      	lsls	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	2201      	movs	r2, #1
 8006090:	409a      	lsls	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	2204      	movs	r2, #4
 80060a8:	409a      	lsls	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d012      	beq.n	80060d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	2204      	movs	r2, #4
 80060c6:	409a      	lsls	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	f043 0204 	orr.w	r2, r3, #4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	2210      	movs	r2, #16
 80060de:	409a      	lsls	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d043      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d03c      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fa:	2210      	movs	r2, #16
 80060fc:	409a      	lsls	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d018      	beq.n	8006142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d108      	bne.n	8006130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d024      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
 800612e:	e01f      	b.n	8006170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	e016      	b.n	8006170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0208 	bic.w	r2, r2, #8
 800615e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2220      	movs	r2, #32
 8006176:	409a      	lsls	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 808e 	beq.w	800629e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8086 	beq.w	800629e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	2220      	movs	r2, #32
 8006198:	409a      	lsls	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d136      	bne.n	8006218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0216 	bic.w	r2, r2, #22
 80061b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_DMA_IRQHandler+0x1da>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d007      	beq.n	80061ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0208 	bic.w	r2, r2, #8
 80061e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	223f      	movs	r2, #63	; 0x3f
 80061f0:	409a      	lsls	r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d07d      	beq.n	800630a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
        }
        return;
 8006216:	e078      	b.n	800630a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01c      	beq.n	8006260 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d108      	bne.n	8006246 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	2b00      	cmp	r3, #0
 800623a:	d030      	beq.n	800629e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	e02b      	b.n	800629e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d027      	beq.n	800629e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
 8006256:	e022      	b.n	800629e <HAL_DMA_IRQHandler+0x29e>
 8006258:	20000000 	.word	0x20000000
 800625c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0210 	bic.w	r2, r2, #16
 800627c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d032      	beq.n	800630c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d022      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2205      	movs	r2, #5
 80062b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d307      	bcc.n	80062e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f2      	bne.n	80062ca <HAL_DMA_IRQHandler+0x2ca>
 80062e4:	e000      	b.n	80062e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80062e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
 8006308:	e000      	b.n	800630c <HAL_DMA_IRQHandler+0x30c>
        return;
 800630a:	bf00      	nop
    }
  }
}
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop

08006314 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006322:	b2db      	uxtb	r3, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d108      	bne.n	8006388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006386:	e007      	b.n	8006398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
}
 8006398:	bf00      	nop
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	3b10      	subs	r3, #16
 80063b4:	4a14      	ldr	r2, [pc, #80]	; (8006408 <DMA_CalcBaseAndBitshift+0x64>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063be:	4a13      	ldr	r2, [pc, #76]	; (800640c <DMA_CalcBaseAndBitshift+0x68>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d909      	bls.n	80063e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	659a      	str	r2, [r3, #88]	; 0x58
 80063e4:	e007      	b.n	80063f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	aaaaaaab 	.word	0xaaaaaaab
 800640c:	080107f8 	.word	0x080107f8

08006410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11f      	bne.n	800646a <DMA_CheckFifoParam+0x5a>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d856      	bhi.n	80064de <DMA_CheckFifoParam+0xce>
 8006430:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <DMA_CheckFifoParam+0x28>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	08006449 	.word	0x08006449
 800643c:	0800645b 	.word	0x0800645b
 8006440:	08006449 	.word	0x08006449
 8006444:	080064df 	.word	0x080064df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d046      	beq.n	80064e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006458:	e043      	b.n	80064e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006462:	d140      	bne.n	80064e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006468:	e03d      	b.n	80064e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006472:	d121      	bne.n	80064b8 <DMA_CheckFifoParam+0xa8>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d837      	bhi.n	80064ea <DMA_CheckFifoParam+0xda>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <DMA_CheckFifoParam+0x70>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006491 	.word	0x08006491
 8006484:	08006497 	.word	0x08006497
 8006488:	08006491 	.word	0x08006491
 800648c:	080064a9 	.word	0x080064a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	e030      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d025      	beq.n	80064ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a6:	e022      	b.n	80064ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064b0:	d11f      	bne.n	80064f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064b6:	e01c      	b.n	80064f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d903      	bls.n	80064c6 <DMA_CheckFifoParam+0xb6>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d003      	beq.n	80064cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064c4:	e018      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ca:	e015      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00e      	beq.n	80064f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      break;
 80064dc:	e00b      	b.n	80064f6 <DMA_CheckFifoParam+0xe6>
      break;
 80064de:	bf00      	nop
 80064e0:	e00a      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      break;
 80064e2:	bf00      	nop
 80064e4:	e008      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      break;
 80064e6:	bf00      	nop
 80064e8:	e006      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      break;
 80064ea:	bf00      	nop
 80064ec:	e004      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <DMA_CheckFifoParam+0xe8>
      break;
 80064f6:	bf00      	nop
    }
  } 
  
  return status; 
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop

08006508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e165      	b.n	80067f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006524:	2201      	movs	r2, #1
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4013      	ands	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	429a      	cmp	r2, r3
 800653e:	f040 8154 	bne.w	80067ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b01      	cmp	r3, #1
 800654c:	d005      	beq.n	800655a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006556:	2b02      	cmp	r3, #2
 8006558:	d130      	bne.n	80065bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	2203      	movs	r2, #3
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	43db      	mvns	r3, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4013      	ands	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006590:	2201      	movs	r2, #1
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4013      	ands	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 0201 	and.w	r2, r3, #1
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d017      	beq.n	80065f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	2203      	movs	r2, #3
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	43db      	mvns	r3, r3
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d123      	bne.n	800664c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	08da      	lsrs	r2, r3, #3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3208      	adds	r2, #8
 800660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	220f      	movs	r2, #15
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	43db      	mvns	r3, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4013      	ands	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4313      	orrs	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	08da      	lsrs	r2, r3, #3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3208      	adds	r2, #8
 8006646:	69b9      	ldr	r1, [r7, #24]
 8006648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	2203      	movs	r2, #3
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	4013      	ands	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 0203 	and.w	r2, r3, #3
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4313      	orrs	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80ae 	beq.w	80067ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	4b5d      	ldr	r3, [pc, #372]	; (8006808 <HAL_GPIO_Init+0x300>)
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	4a5c      	ldr	r2, [pc, #368]	; (8006808 <HAL_GPIO_Init+0x300>)
 8006698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800669c:	6453      	str	r3, [r2, #68]	; 0x44
 800669e:	4b5a      	ldr	r3, [pc, #360]	; (8006808 <HAL_GPIO_Init+0x300>)
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066aa:	4a58      	ldr	r2, [pc, #352]	; (800680c <HAL_GPIO_Init+0x304>)
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	089b      	lsrs	r3, r3, #2
 80066b0:	3302      	adds	r3, #2
 80066b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	220f      	movs	r2, #15
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4013      	ands	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a4f      	ldr	r2, [pc, #316]	; (8006810 <HAL_GPIO_Init+0x308>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d025      	beq.n	8006722 <HAL_GPIO_Init+0x21a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a4e      	ldr	r2, [pc, #312]	; (8006814 <HAL_GPIO_Init+0x30c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01f      	beq.n	800671e <HAL_GPIO_Init+0x216>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a4d      	ldr	r2, [pc, #308]	; (8006818 <HAL_GPIO_Init+0x310>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d019      	beq.n	800671a <HAL_GPIO_Init+0x212>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a4c      	ldr	r2, [pc, #304]	; (800681c <HAL_GPIO_Init+0x314>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_GPIO_Init+0x20e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a4b      	ldr	r2, [pc, #300]	; (8006820 <HAL_GPIO_Init+0x318>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00d      	beq.n	8006712 <HAL_GPIO_Init+0x20a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a4a      	ldr	r2, [pc, #296]	; (8006824 <HAL_GPIO_Init+0x31c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d007      	beq.n	800670e <HAL_GPIO_Init+0x206>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a49      	ldr	r2, [pc, #292]	; (8006828 <HAL_GPIO_Init+0x320>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <HAL_GPIO_Init+0x202>
 8006706:	2306      	movs	r3, #6
 8006708:	e00c      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 800670a:	2307      	movs	r3, #7
 800670c:	e00a      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 800670e:	2305      	movs	r3, #5
 8006710:	e008      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 8006712:	2304      	movs	r3, #4
 8006714:	e006      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 8006716:	2303      	movs	r3, #3
 8006718:	e004      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 800671a:	2302      	movs	r3, #2
 800671c:	e002      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <HAL_GPIO_Init+0x21c>
 8006722:	2300      	movs	r3, #0
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	f002 0203 	and.w	r2, r2, #3
 800672a:	0092      	lsls	r2, r2, #2
 800672c:	4093      	lsls	r3, r2
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	4313      	orrs	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006734:	4935      	ldr	r1, [pc, #212]	; (800680c <HAL_GPIO_Init+0x304>)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	089b      	lsrs	r3, r3, #2
 800673a:	3302      	adds	r3, #2
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006742:	4b3a      	ldr	r3, [pc, #232]	; (800682c <HAL_GPIO_Init+0x324>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	43db      	mvns	r3, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4013      	ands	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006766:	4a31      	ldr	r2, [pc, #196]	; (800682c <HAL_GPIO_Init+0x324>)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800676c:	4b2f      	ldr	r3, [pc, #188]	; (800682c <HAL_GPIO_Init+0x324>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006790:	4a26      	ldr	r2, [pc, #152]	; (800682c <HAL_GPIO_Init+0x324>)
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006796:	4b25      	ldr	r3, [pc, #148]	; (800682c <HAL_GPIO_Init+0x324>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	43db      	mvns	r3, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4013      	ands	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067ba:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_GPIO_Init+0x324>)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067c0:	4b1a      	ldr	r3, [pc, #104]	; (800682c <HAL_GPIO_Init+0x324>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	43db      	mvns	r3, r3
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	4013      	ands	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <HAL_GPIO_Init+0x324>)
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3301      	adds	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	f67f ae96 	bls.w	8006524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	3724      	adds	r7, #36	; 0x24
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800
 800680c:	40013800 	.word	0x40013800
 8006810:	40020000 	.word	0x40020000
 8006814:	40020400 	.word	0x40020400
 8006818:	40020800 	.word	0x40020800
 800681c:	40020c00 	.word	0x40020c00
 8006820:	40021000 	.word	0x40021000
 8006824:	40021400 	.word	0x40021400
 8006828:	40021800 	.word	0x40021800
 800682c:	40013c00 	.word	0x40013c00

08006830 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	e0c7      	b.n	80069dc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800684c:	2201      	movs	r2, #1
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4013      	ands	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	f040 80b7 	bne.w	80069d6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006868:	4a62      	ldr	r2, [pc, #392]	; (80069f4 <HAL_GPIO_DeInit+0x1c4>)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	089b      	lsrs	r3, r3, #2
 800686e:	3302      	adds	r3, #2
 8006870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006874:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	220f      	movs	r2, #15
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	4013      	ands	r3, r2
 8006888:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a5a      	ldr	r2, [pc, #360]	; (80069f8 <HAL_GPIO_DeInit+0x1c8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d025      	beq.n	80068de <HAL_GPIO_DeInit+0xae>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a59      	ldr	r2, [pc, #356]	; (80069fc <HAL_GPIO_DeInit+0x1cc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01f      	beq.n	80068da <HAL_GPIO_DeInit+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a58      	ldr	r2, [pc, #352]	; (8006a00 <HAL_GPIO_DeInit+0x1d0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d019      	beq.n	80068d6 <HAL_GPIO_DeInit+0xa6>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a57      	ldr	r2, [pc, #348]	; (8006a04 <HAL_GPIO_DeInit+0x1d4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_GPIO_DeInit+0xa2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a56      	ldr	r2, [pc, #344]	; (8006a08 <HAL_GPIO_DeInit+0x1d8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00d      	beq.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a55      	ldr	r2, [pc, #340]	; (8006a0c <HAL_GPIO_DeInit+0x1dc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <HAL_GPIO_DeInit+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a54      	ldr	r2, [pc, #336]	; (8006a10 <HAL_GPIO_DeInit+0x1e0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <HAL_GPIO_DeInit+0x96>
 80068c2:	2306      	movs	r3, #6
 80068c4:	e00c      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068c6:	2307      	movs	r3, #7
 80068c8:	e00a      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068ca:	2305      	movs	r3, #5
 80068cc:	e008      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068ce:	2304      	movs	r3, #4
 80068d0:	e006      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068d2:	2303      	movs	r3, #3
 80068d4:	e004      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e002      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <HAL_GPIO_DeInit+0xb0>
 80068de:	2300      	movs	r3, #0
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	f002 0203 	and.w	r2, r2, #3
 80068e6:	0092      	lsls	r2, r2, #2
 80068e8:	4093      	lsls	r3, r2
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d132      	bne.n	8006956 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80068f0:	4b48      	ldr	r3, [pc, #288]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	4946      	ldr	r1, [pc, #280]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80068fe:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	43db      	mvns	r3, r3
 8006906:	4943      	ldr	r1, [pc, #268]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 8006908:	4013      	ands	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800690c:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	43db      	mvns	r3, r3
 8006914:	493f      	ldr	r1, [pc, #252]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 8006916:	4013      	ands	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800691a:	4b3e      	ldr	r3, [pc, #248]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	43db      	mvns	r3, r3
 8006922:	493c      	ldr	r1, [pc, #240]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 8006924:	4013      	ands	r3, r2
 8006926:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	220f      	movs	r2, #15
 8006932:	fa02 f303 	lsl.w	r3, r2, r3
 8006936:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006938:	4a2e      	ldr	r2, [pc, #184]	; (80069f4 <HAL_GPIO_DeInit+0x1c4>)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	3302      	adds	r3, #2
 8006940:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	43da      	mvns	r2, r3
 8006948:	482a      	ldr	r0, [pc, #168]	; (80069f4 <HAL_GPIO_DeInit+0x1c4>)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	089b      	lsrs	r3, r3, #2
 800694e:	400a      	ands	r2, r1
 8006950:	3302      	adds	r3, #2
 8006952:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	2103      	movs	r1, #3
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	401a      	ands	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	08da      	lsrs	r2, r3, #3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3208      	adds	r2, #8
 8006974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	220f      	movs	r2, #15
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	08d2      	lsrs	r2, r2, #3
 800698c:	4019      	ands	r1, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3208      	adds	r2, #8
 8006992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	2103      	movs	r1, #3
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	2101      	movs	r1, #1
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	fa01 f303 	lsl.w	r3, r1, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	401a      	ands	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	2103      	movs	r1, #3
 80069ca:	fa01 f303 	lsl.w	r3, r1, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	401a      	ands	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	3301      	adds	r3, #1
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2b0f      	cmp	r3, #15
 80069e0:	f67f af34 	bls.w	800684c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40013800 	.word	0x40013800
 80069f8:	40020000 	.word	0x40020000
 80069fc:	40020400 	.word	0x40020400
 8006a00:	40020800 	.word	0x40020800
 8006a04:	40020c00 	.word	0x40020c00
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	40021400 	.word	0x40021400
 8006a10:	40021800 	.word	0x40021800
 8006a14:	40013c00 	.word	0x40013c00

08006a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	887b      	ldrh	r3, [r7, #2]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	e001      	b.n	8006a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
 8006a54:	4613      	mov	r3, r2
 8006a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a58:	787b      	ldrb	r3, [r7, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a5e:	887a      	ldrh	r2, [r7, #2]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a64:	e003      	b.n	8006a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a66:	887b      	ldrh	r3, [r7, #2]
 8006a68:	041a      	lsls	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	619a      	str	r2, [r3, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a8c:	887a      	ldrh	r2, [r7, #2]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4013      	ands	r3, r2
 8006a92:	041a      	lsls	r2, r3, #16
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	43d9      	mvns	r1, r3
 8006a98:	887b      	ldrh	r3, [r7, #2]
 8006a9a:	400b      	ands	r3, r1
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	619a      	str	r2, [r3, #24]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006aba:	4b08      	ldr	r3, [pc, #32]	; (8006adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d006      	beq.n	8006ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ac6:	4a05      	ldr	r2, [pc, #20]	; (8006adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fc f914 	bl	8002cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40013c00 	.word	0x40013c00

08006ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e12b      	b.n	8006d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fd fac0 	bl	800408c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2224      	movs	r2, #36	; 0x24
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b44:	f003 ff88 	bl	800aa58 <HAL_RCC_GetPCLK1Freq>
 8006b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4a81      	ldr	r2, [pc, #516]	; (8006d54 <HAL_I2C_Init+0x274>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d807      	bhi.n	8006b64 <HAL_I2C_Init+0x84>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a80      	ldr	r2, [pc, #512]	; (8006d58 <HAL_I2C_Init+0x278>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	bf94      	ite	ls
 8006b5c:	2301      	movls	r3, #1
 8006b5e:	2300      	movhi	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e006      	b.n	8006b72 <HAL_I2C_Init+0x92>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4a7d      	ldr	r2, [pc, #500]	; (8006d5c <HAL_I2C_Init+0x27c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	bf94      	ite	ls
 8006b6c:	2301      	movls	r3, #1
 8006b6e:	2300      	movhi	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e0e7      	b.n	8006d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4a78      	ldr	r2, [pc, #480]	; (8006d60 <HAL_I2C_Init+0x280>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	0c9b      	lsrs	r3, r3, #18
 8006b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a6a      	ldr	r2, [pc, #424]	; (8006d54 <HAL_I2C_Init+0x274>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d802      	bhi.n	8006bb4 <HAL_I2C_Init+0xd4>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	e009      	b.n	8006bc8 <HAL_I2C_Init+0xe8>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	4a69      	ldr	r2, [pc, #420]	; (8006d64 <HAL_I2C_Init+0x284>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	099b      	lsrs	r3, r3, #6
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	495c      	ldr	r1, [pc, #368]	; (8006d54 <HAL_I2C_Init+0x274>)
 8006be4:	428b      	cmp	r3, r1
 8006be6:	d819      	bhi.n	8006c1c <HAL_I2C_Init+0x13c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	1e59      	subs	r1, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006bfc:	400b      	ands	r3, r1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_I2C_Init+0x138>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	1e59      	subs	r1, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c10:	3301      	adds	r3, #1
 8006c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c16:	e051      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	e04f      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d111      	bne.n	8006c48 <HAL_I2C_Init+0x168>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	1e58      	subs	r0, r3, #1
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6859      	ldr	r1, [r3, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	440b      	add	r3, r1
 8006c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c36:	3301      	adds	r3, #1
 8006c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	e012      	b.n	8006c6e <HAL_I2C_Init+0x18e>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1e58      	subs	r0, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	0099      	lsls	r1, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <HAL_I2C_Init+0x196>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e022      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10e      	bne.n	8006c9c <HAL_I2C_Init+0x1bc>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1e58      	subs	r0, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	440b      	add	r3, r1
 8006c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c90:	3301      	adds	r3, #1
 8006c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	e00f      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	1e58      	subs	r0, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6859      	ldr	r1, [r3, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	0099      	lsls	r1, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	6809      	ldr	r1, [r1, #0]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69da      	ldr	r2, [r3, #28]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6911      	ldr	r1, [r2, #16]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	68d2      	ldr	r2, [r2, #12]
 8006cf6:	4311      	orrs	r1, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695a      	ldr	r2, [r3, #20]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	000186a0 	.word	0x000186a0
 8006d58:	001e847f 	.word	0x001e847f
 8006d5c:	003d08ff 	.word	0x003d08ff
 8006d60:	431bde83 	.word	0x431bde83
 8006d64:	10624dd3 	.word	0x10624dd3

08006d68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08c      	sub	sp, #48	; 0x30
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	817b      	strh	r3, [r7, #10]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	813b      	strh	r3, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d82:	f7fd fcdf 	bl	8004744 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	f040 8208 	bne.w	80071a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	2319      	movs	r3, #25
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	497b      	ldr	r1, [pc, #492]	; (8006f8c <HAL_I2C_Mem_Read+0x224>)
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f002 f95d 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
 8006dae:	e1fb      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_I2C_Mem_Read+0x56>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e1f4      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d007      	beq.n	8006de4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2222      	movs	r2, #34	; 0x22
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4a5b      	ldr	r2, [pc, #364]	; (8006f90 <HAL_I2C_Mem_Read+0x228>)
 8006e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e26:	88f8      	ldrh	r0, [r7, #6]
 8006e28:	893a      	ldrh	r2, [r7, #8]
 8006e2a:	8979      	ldrh	r1, [r7, #10]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	4603      	mov	r3, r0
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f001 fe70 	bl	8008b1c <I2C_RequestMemoryRead>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e1b0      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d113      	bne.n	8006e76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	623b      	str	r3, [r7, #32]
 8006e62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e184      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d11b      	bne.n	8006eb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e164      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d11b      	bne.n	8006ef6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	61bb      	str	r3, [r7, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	e144      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f0c:	e138      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	f200 80f1 	bhi.w	80070fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d123      	bne.n	8006f68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f002 f9e5 	bl	80092f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e139      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f66:	e10b      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d14e      	bne.n	800700e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	2200      	movs	r2, #0
 8006f78:	4906      	ldr	r1, [pc, #24]	; (8006f94 <HAL_I2C_Mem_Read+0x22c>)
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f002 f870 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e10e      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
 8006f8a:	bf00      	nop
 8006f8c:	00100002 	.word	0x00100002
 8006f90:	ffff0000 	.word	0xffff0000
 8006f94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691a      	ldr	r2, [r3, #16]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800700c:	e0b8      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	2200      	movs	r2, #0
 8007016:	4966      	ldr	r1, [pc, #408]	; (80071b0 <HAL_I2C_Mem_Read+0x448>)
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f002 f821 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0bf      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	2200      	movs	r2, #0
 8007072:	494f      	ldr	r1, [pc, #316]	; (80071b0 <HAL_I2C_Mem_Read+0x448>)
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f001 fff3 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e091      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	b2d2      	uxtb	r2, r2
 80070d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070f8:	e042      	b.n	8007180 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f002 f8f8 	bl	80092f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e04c      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d118      	bne.n	8007180 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	f47f aec2 	bne.w	8006f0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
  }
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3728      	adds	r7, #40	; 0x28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	00010004 	.word	0x00010004

080071b4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	; 0x28
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	817b      	strh	r3, [r7, #10]
 80071c6:	460b      	mov	r3, r1
 80071c8:	813b      	strh	r3, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071d2:	f7fd fab7 	bl	8004744 <HAL_GetTick>
 80071d6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	f040 813a 	bne.w	800745a <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80071e6:	4b9f      	ldr	r3, [pc, #636]	; (8007464 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	08db      	lsrs	r3, r3, #3
 80071ec:	4a9e      	ldr	r2, [pc, #632]	; (8007468 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0a1a      	lsrs	r2, r3, #8
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009a      	lsls	r2, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	3b01      	subs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d116      	bne.n	800723a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f043 0220 	orr.w	r2, r3, #32
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e110      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d0db      	beq.n	8007200 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_I2C_Mem_Write_DMA+0xa2>
 8007252:	2302      	movs	r3, #2
 8007254:	e102      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d007      	beq.n	800727c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2221      	movs	r2, #33	; 0x21
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80072ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a6c      	ldr	r2, [pc, #432]	; (800746c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80072be:	897a      	ldrh	r2, [r7, #10]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80072c4:	893a      	ldrh	r2, [r7, #8]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80a9 	beq.w	8007432 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02a      	beq.n	800733e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	4a60      	ldr	r2, [pc, #384]	; (8007470 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 80072ee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	4a5f      	ldr	r2, [pc, #380]	; (8007474 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 80072f6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	2200      	movs	r2, #0
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007304:	2200      	movs	r2, #0
 8007306:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	2200      	movs	r2, #0
 800730e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	2200      	movs	r2, #0
 8007316:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	4619      	mov	r1, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3310      	adds	r3, #16
 8007328:	461a      	mov	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	f7fe fded 	bl	8005f0c <HAL_DMA_Start_IT>
 8007332:	4603      	mov	r3, r0
 8007334:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007336:	7efb      	ldrb	r3, [r7, #27]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d166      	bne.n	800740a <HAL_I2C_Mem_Write_DMA+0x256>
 800733c:	e013      	b.n	8007366 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e07a      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007366:	88f8      	ldrh	r0, [r7, #6]
 8007368:	893a      	ldrh	r2, [r7, #8]
 800736a:	8979      	ldrh	r1, [r7, #10]
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	2323      	movs	r3, #35	; 0x23
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	4603      	mov	r3, r0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f001 fb3a 	bl	80089f0 <I2C_RequestMemoryWrite>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d022      	beq.n	80073c8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fe18 	bl	8005fbc <HAL_DMA_Abort_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007394:	2200      	movs	r2, #0
 8007396:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e049      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007404:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e028      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0210 	orr.w	r2, r3, #16
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e014      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000000 	.word	0x20000000
 8007468:	14f8b589 	.word	0x14f8b589
 800746c:	ffff0000 	.word	0xffff0000
 8007470:	08008ced 	.word	0x08008ced
 8007474:	08008e97 	.word	0x08008e97

08007478 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007498:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b10      	cmp	r3, #16
 80074a6:	d003      	beq.n	80074b0 <HAL_I2C_EV_IRQHandler+0x38>
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b40      	cmp	r3, #64	; 0x40
 80074ac:	f040 80c1 	bne.w	8007632 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80074d0:	d003      	beq.n	80074da <HAL_I2C_EV_IRQHandler+0x62>
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80074d8:	d101      	bne.n	80074de <HAL_I2C_EV_IRQHandler+0x66>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <HAL_I2C_EV_IRQHandler+0x68>
 80074de:	2300      	movs	r3, #0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	f000 8132 	beq.w	800774a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00c      	beq.n	800750a <HAL_I2C_EV_IRQHandler+0x92>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	0a5b      	lsrs	r3, r3, #9
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 ff7e 	bl	80093fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fcc8 	bl	8007e98 <I2C_Master_SB>
 8007508:	e092      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	08db      	lsrs	r3, r3, #3
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <HAL_I2C_EV_IRQHandler+0xb2>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	0a5b      	lsrs	r3, r3, #9
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd3e 	bl	8007fa4 <I2C_Master_ADD10>
 8007528:	e082      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <HAL_I2C_EV_IRQHandler+0xd2>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	0a5b      	lsrs	r3, r3, #9
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fd58 	bl	8007ff8 <I2C_Master_ADDR>
 8007548:	e072      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	089b      	lsrs	r3, r3, #2
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d03b      	beq.n	80075ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007564:	f000 80f3 	beq.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	09db      	lsrs	r3, r3, #7
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00f      	beq.n	8007594 <HAL_I2C_EV_IRQHandler+0x11c>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	0a9b      	lsrs	r3, r3, #10
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <HAL_I2C_EV_IRQHandler+0x11c>
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	089b      	lsrs	r3, r3, #2
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f942 	bl	8007816 <I2C_MasterTransmit_TXE>
 8007592:	e04d      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	089b      	lsrs	r3, r3, #2
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80d6 	beq.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	0a5b      	lsrs	r3, r3, #9
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 80cf 	beq.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b21      	cmp	r3, #33	; 0x21
 80075b4:	d103      	bne.n	80075be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f9c9 	bl	800794e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075bc:	e0c7      	b.n	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	f040 80c4 	bne.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa37 	bl	8007a3a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075cc:	e0bf      	b.n	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075dc:	f000 80b7 	beq.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	099b      	lsrs	r3, r3, #6
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00f      	beq.n	800760c <HAL_I2C_EV_IRQHandler+0x194>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	0a9b      	lsrs	r3, r3, #10
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d009      	beq.n	800760c <HAL_I2C_EV_IRQHandler+0x194>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	089b      	lsrs	r3, r3, #2
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d103      	bne.n	800760c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 faac 	bl	8007b62 <I2C_MasterReceive_RXNE>
 800760a:	e011      	b.n	8007630 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 809a 	beq.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	0a5b      	lsrs	r3, r3, #9
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8093 	beq.w	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb4b 	bl	8007cc4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800762e:	e08e      	b.n	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007630:	e08d      	b.n	800774e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	e007      	b.n	8007654 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d012      	beq.n	8007686 <HAL_I2C_EV_IRQHandler+0x20e>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	0a5b      	lsrs	r3, r3, #9
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800767c:	69b9      	ldr	r1, [r7, #24]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 ff09 	bl	8008496 <I2C_Slave_ADDR>
 8007684:	e066      	b.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	091b      	lsrs	r3, r3, #4
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	0a5b      	lsrs	r3, r3, #9
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 ff44 	bl	800852c <I2C_Slave_STOPF>
 80076a4:	e056      	b.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b21      	cmp	r3, #33	; 0x21
 80076aa:	d002      	beq.n	80076b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b29      	cmp	r3, #41	; 0x29
 80076b0:	d125      	bne.n	80076fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	09db      	lsrs	r3, r3, #7
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00f      	beq.n	80076de <HAL_I2C_EV_IRQHandler+0x266>
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	0a9b      	lsrs	r3, r3, #10
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_I2C_EV_IRQHandler+0x266>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	089b      	lsrs	r3, r3, #2
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fe1f 	bl	800831a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076dc:	e039      	b.n	8007752 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	089b      	lsrs	r3, r3, #2
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d033      	beq.n	8007752 <HAL_I2C_EV_IRQHandler+0x2da>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	0a5b      	lsrs	r3, r3, #9
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02d      	beq.n	8007752 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fe4c 	bl	8008394 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076fc:	e029      	b.n	8007752 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	099b      	lsrs	r3, r3, #6
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00f      	beq.n	800772a <HAL_I2C_EV_IRQHandler+0x2b2>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	0a9b      	lsrs	r3, r3, #10
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	089b      	lsrs	r3, r3, #2
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fe57 	bl	80083d6 <I2C_SlaveReceive_RXNE>
 8007728:	e014      	b.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00e      	beq.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	0a5b      	lsrs	r3, r3, #9
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d008      	beq.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fe85 	bl	8008452 <I2C_SlaveReceive_BTF>
 8007748:	e004      	b.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800774a:	bf00      	nop
 800774c:	e002      	b.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007752:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
 80077b6:	4613      	mov	r3, r2
 80077b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800782c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d150      	bne.n	80078de <I2C_MasterTransmit_TXE+0xc8>
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b21      	cmp	r3, #33	; 0x21
 8007840:	d14d      	bne.n	80078de <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d01d      	beq.n	8007884 <I2C_MasterTransmit_TXE+0x6e>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b20      	cmp	r3, #32
 800784c:	d01a      	beq.n	8007884 <I2C_MasterTransmit_TXE+0x6e>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007854:	d016      	beq.n	8007884 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007864:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2211      	movs	r2, #17
 800786a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff ff6c 	bl	800775a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007882:	e060      	b.n	8007946 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007892:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d107      	bne.n	80078ce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fb fa25 	bl	8002d16 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078cc:	e03b      	b.n	8007946 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff ff3f 	bl	800775a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078dc:	e033      	b.n	8007946 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b21      	cmp	r3, #33	; 0x21
 80078e2:	d005      	beq.n	80078f0 <I2C_MasterTransmit_TXE+0xda>
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d12d      	bne.n	8007946 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b22      	cmp	r3, #34	; 0x22
 80078ee:	d12a      	bne.n	8007946 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d108      	bne.n	800790c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007908:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800790a:	e01c      	b.n	8007946 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d103      	bne.n	8007920 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f88e 	bl	8007a3a <I2C_MemoryTransmit_TXE_BTF>
}
 800791e:	e012      	b.n	8007946 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007944:	e7ff      	b.n	8007946 <I2C_MasterTransmit_TXE+0x130>
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b21      	cmp	r3, #33	; 0x21
 8007966:	d164      	bne.n	8007a32 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d012      	beq.n	8007998 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007996:	e04c      	b.n	8007a32 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b08      	cmp	r3, #8
 800799c:	d01d      	beq.n	80079da <I2C_MasterTransmit_BTF+0x8c>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d01a      	beq.n	80079da <I2C_MasterTransmit_BTF+0x8c>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079aa:	d016      	beq.n	80079da <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079ba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2211      	movs	r2, #17
 80079c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fec1 	bl	800775a <HAL_I2C_MasterTxCpltCallback>
}
 80079d8:	e02b      	b.n	8007a32 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079e8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b40      	cmp	r3, #64	; 0x40
 8007a12:	d107      	bne.n	8007a24 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fb f97a 	bl	8002d16 <HAL_I2C_MemTxCpltCallback>
}
 8007a22:	e006      	b.n	8007a32 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fe94 	bl	800775a <HAL_I2C_MasterTxCpltCallback>
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d11d      	bne.n	8007a8e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d10b      	bne.n	8007a72 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6a:	1c9a      	adds	r2, r3, #2
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007a70:	e073      	b.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	121b      	asrs	r3, r3, #8
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a8c:	e065      	b.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10b      	bne.n	8007aae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007aac:	e055      	b.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d151      	bne.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b22      	cmp	r3, #34	; 0x22
 8007aba:	d10d      	bne.n	8007ad8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ad6:	e040      	b.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b21      	cmp	r3, #33	; 0x21
 8007ae6:	d112      	bne.n	8007b0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b0c:	e025      	b.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d120      	bne.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b21      	cmp	r3, #33	; 0x21
 8007b1c:	d11d      	bne.n	8007b5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b2c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fb f8de 	bl	8002d16 <HAL_I2C_MemTxCpltCallback>
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b22      	cmp	r3, #34	; 0x22
 8007b74:	f040 80a2 	bne.w	8007cbc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d921      	bls.n	8007bca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	f040 8082 	bne.w	8007cbc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007bc8:	e078      	b.n	8007cbc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d074      	beq.n	8007cbc <I2C_MasterReceive_RXNE+0x15a>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d002      	beq.n	8007bde <I2C_MasterReceive_RXNE+0x7c>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d16e      	bne.n	8007cbc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fb56 	bl	8009290 <I2C_WaitOnSTOPRequestThroughIT>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d142      	bne.n	8007c70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	d10a      	bne.n	8007c5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fdc1 	bl	80077da <HAL_I2C_MemRxCpltCallback>
}
 8007c58:	e030      	b.n	8007cbc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2212      	movs	r2, #18
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fd80 	bl	800776e <HAL_I2C_MasterRxCpltCallback>
}
 8007c6e:	e025      	b.n	8007cbc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fd99 	bl	80077ee <HAL_I2C_ErrorCallback>
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d11b      	bne.n	8007d14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007d12:	e0bd      	b.n	8007e90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d129      	bne.n	8007d72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d00a      	beq.n	8007d4a <I2C_MasterReceive_BTF+0x86>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d007      	beq.n	8007d4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d70:	e08e      	b.n	8007e90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d176      	bne.n	8007e6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d002      	beq.n	8007d88 <I2C_MasterReceive_BTF+0xc4>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d108      	bne.n	8007d9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	e019      	b.n	8007dce <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d002      	beq.n	8007da6 <I2C_MasterReceive_BTF+0xe2>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d108      	bne.n	8007db8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e00a      	b.n	8007dce <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d007      	beq.n	8007dce <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dcc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007e28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d10a      	bne.n	8007e54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fcc4 	bl	80077da <HAL_I2C_MemRxCpltCallback>
}
 8007e52:	e01d      	b.n	8007e90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2212      	movs	r2, #18
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fc83 	bl	800776e <HAL_I2C_MasterRxCpltCallback>
}
 8007e68:	e012      	b.n	8007e90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d117      	bne.n	8007edc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d109      	bne.n	8007ec8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ec4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007ec6:	e067      	b.n	8007f98 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	611a      	str	r2, [r3, #16]
}
 8007eda:	e05d      	b.n	8007f98 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ee4:	d133      	bne.n	8007f4e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b21      	cmp	r3, #33	; 0x21
 8007ef0:	d109      	bne.n	8007f06 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f02:	611a      	str	r2, [r3, #16]
 8007f04:	e008      	b.n	8007f18 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <I2C_Master_SB+0x92>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d108      	bne.n	8007f3c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d032      	beq.n	8007f98 <I2C_Master_SB+0x100>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d02d      	beq.n	8007f98 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4a:	605a      	str	r2, [r3, #4]
}
 8007f4c:	e024      	b.n	8007f98 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10e      	bne.n	8007f74 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	11db      	asrs	r3, r3, #7
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 0306 	and.w	r3, r3, #6
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f063 030f 	orn	r3, r3, #15
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	611a      	str	r2, [r3, #16]
}
 8007f72:	e011      	b.n	8007f98 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d10d      	bne.n	8007f98 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	11db      	asrs	r3, r3, #7
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0306 	and.w	r3, r3, #6
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f063 030e 	orn	r3, r3, #14
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	611a      	str	r2, [r3, #16]
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <I2C_Master_ADD10+0x26>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d108      	bne.n	8007fdc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00c      	beq.n	8007fec <I2C_Master_ADD10+0x48>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fea:	605a      	str	r2, [r3, #4]
  }
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b091      	sub	sp, #68	; 0x44
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b22      	cmp	r3, #34	; 0x22
 8008020:	f040 8169 	bne.w	80082f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10f      	bne.n	800804c <I2C_Master_ADDR+0x54>
 800802c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008030:	2b40      	cmp	r3, #64	; 0x40
 8008032:	d10b      	bne.n	800804c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008034:	2300      	movs	r3, #0
 8008036:	633b      	str	r3, [r7, #48]	; 0x30
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	633b      	str	r3, [r7, #48]	; 0x30
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	e160      	b.n	800830e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008050:	2b00      	cmp	r3, #0
 8008052:	d11d      	bne.n	8008090 <I2C_Master_ADDR+0x98>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800805c:	d118      	bne.n	8008090 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800805e:	2300      	movs	r3, #0
 8008060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008082:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	651a      	str	r2, [r3, #80]	; 0x50
 800808e:	e13e      	b.n	800830e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d113      	bne.n	80080c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809a:	2300      	movs	r3, #0
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e115      	b.n	80082ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	f040 808a 	bne.w	80081e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080d4:	d137      	bne.n	8008146 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f4:	d113      	bne.n	800811e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008104:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008106:	2300      	movs	r3, #0
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	e0e7      	b.n	80082ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800811e:	2300      	movs	r3, #0
 8008120:	623b      	str	r3, [r7, #32]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	623b      	str	r3, [r7, #32]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	623b      	str	r3, [r7, #32]
 8008132:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e0d3      	b.n	80082ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	2b08      	cmp	r3, #8
 800814a:	d02e      	beq.n	80081aa <I2C_Master_ADDR+0x1b2>
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	2b20      	cmp	r3, #32
 8008150:	d02b      	beq.n	80081aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008154:	2b12      	cmp	r3, #18
 8008156:	d102      	bne.n	800815e <I2C_Master_ADDR+0x166>
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	2b01      	cmp	r3, #1
 800815c:	d125      	bne.n	80081aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	2b04      	cmp	r3, #4
 8008162:	d00e      	beq.n	8008182 <I2C_Master_ADDR+0x18a>
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	2b02      	cmp	r3, #2
 8008168:	d00b      	beq.n	8008182 <I2C_Master_ADDR+0x18a>
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	2b10      	cmp	r3, #16
 800816e:	d008      	beq.n	8008182 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e007      	b.n	8008192 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008190:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	e0a1      	b.n	80082ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ba:	2300      	movs	r3, #0
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	e085      	b.n	80082ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d14d      	bne.n	8008288 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d016      	beq.n	8008220 <I2C_Master_ADDR+0x228>
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d013      	beq.n	8008220 <I2C_Master_ADDR+0x228>
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d010      	beq.n	8008220 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800820c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e007      	b.n	8008230 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800822e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800823a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800823e:	d117      	bne.n	8008270 <I2C_Master_ADDR+0x278>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008246:	d00b      	beq.n	8008260 <I2C_Master_ADDR+0x268>
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	2b01      	cmp	r3, #1
 800824c:	d008      	beq.n	8008260 <I2C_Master_ADDR+0x268>
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	2b08      	cmp	r3, #8
 8008252:	d005      	beq.n	8008260 <I2C_Master_ADDR+0x268>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	2b10      	cmp	r3, #16
 8008258:	d002      	beq.n	8008260 <I2C_Master_ADDR+0x268>
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	2b20      	cmp	r3, #32
 800825e:	d107      	bne.n	8008270 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800826e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	e032      	b.n	80082ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008296:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a6:	d117      	bne.n	80082d8 <I2C_Master_ADDR+0x2e0>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082ae:	d00b      	beq.n	80082c8 <I2C_Master_ADDR+0x2d0>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d008      	beq.n	80082c8 <I2C_Master_ADDR+0x2d0>
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d005      	beq.n	80082c8 <I2C_Master_ADDR+0x2d0>
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	2b10      	cmp	r3, #16
 80082c0:	d002      	beq.n	80082c8 <I2C_Master_ADDR+0x2d0>
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d107      	bne.n	80082d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082d8:	2300      	movs	r3, #0
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80082f4:	e00b      	b.n	800830e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]
}
 800830c:	e7ff      	b.n	800830e <I2C_Master_ADDR+0x316>
 800830e:	bf00      	nop
 8008310:	3744      	adds	r7, #68	; 0x44
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008328:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d02b      	beq.n	800838c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d114      	bne.n	800838c <I2C_SlaveTransmit_TXE+0x72>
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b29      	cmp	r3, #41	; 0x29
 8008366:	d111      	bne.n	800838c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008376:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2221      	movs	r2, #33	; 0x21
 800837c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2228      	movs	r2, #40	; 0x28
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff f9fb 	bl	8007782 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d011      	beq.n	80083ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d02c      	beq.n	800844a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d114      	bne.n	800844a <I2C_SlaveReceive_RXNE+0x74>
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b2a      	cmp	r3, #42	; 0x2a
 8008424:	d111      	bne.n	800844a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2222      	movs	r2, #34	; 0x22
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2228      	movs	r2, #40	; 0x28
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff f9a6 	bl	8007796 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d012      	beq.n	800848a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084b0:	2b28      	cmp	r3, #40	; 0x28
 80084b2:	d127      	bne.n	8008504 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	089b      	lsrs	r3, r3, #2
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	09db      	lsrs	r3, r3, #7
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	81bb      	strh	r3, [r7, #12]
 80084e6:	e002      	b.n	80084ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80084f6:	89ba      	ldrh	r2, [r7, #12]
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff f954 	bl	80077aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008502:	e00e      	b.n	8008522 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008504:	2300      	movs	r3, #0
 8008506:	60bb      	str	r3, [r7, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	60bb      	str	r3, [r7, #8]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800854a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800854c:	2300      	movs	r3, #0
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	60bb      	str	r3, [r7, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0201 	orr.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008578:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008588:	d172      	bne.n	8008670 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	2b22      	cmp	r3, #34	; 0x22
 800858e:	d002      	beq.n	8008596 <I2C_Slave_STOPF+0x6a>
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	2b2a      	cmp	r3, #42	; 0x2a
 8008594:	d135      	bne.n	8008602 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f043 0204 	orr.w	r2, r3, #4
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fea0 	bl	8006314 <HAL_DMA_GetState>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d049      	beq.n	800866e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	4a69      	ldr	r2, [pc, #420]	; (8008784 <I2C_Slave_STOPF+0x258>)
 80085e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fd fce8 	bl	8005fbc <HAL_DMA_Abort_IT>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d03d      	beq.n	800866e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008600:	e035      	b.n	800866e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	b29a      	uxth	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	f043 0204 	orr.w	r2, r3, #4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008634:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863a:	4618      	mov	r0, r3
 800863c:	f7fd fe6a 	bl	8006314 <HAL_DMA_GetState>
 8008640:	4603      	mov	r3, r0
 8008642:	2b01      	cmp	r3, #1
 8008644:	d014      	beq.n	8008670 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864a:	4a4e      	ldr	r2, [pc, #312]	; (8008784 <I2C_Slave_STOPF+0x258>)
 800864c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	4618      	mov	r0, r3
 8008654:	f7fd fcb2 	bl	8005fbc <HAL_DMA_Abort_IT>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d008      	beq.n	8008670 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	e000      	b.n	8008670 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800866e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d03e      	beq.n	80086f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b04      	cmp	r3, #4
 8008686:	d112      	bne.n	80086ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691a      	ldr	r2, [r3, #16]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b8:	2b40      	cmp	r3, #64	; 0x40
 80086ba:	d112      	bne.n	80086e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	691a      	ldr	r2, [r3, #16]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	f043 0204 	orr.w	r2, r3, #4
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f843 	bl	800878c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008706:	e039      	b.n	800877c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	2b2a      	cmp	r3, #42	; 0x2a
 800870c:	d109      	bne.n	8008722 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2228      	movs	r2, #40	; 0x28
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff f83a 	bl	8007796 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b28      	cmp	r3, #40	; 0x28
 800872c:	d111      	bne.n	8008752 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a15      	ldr	r2, [pc, #84]	; (8008788 <I2C_Slave_STOPF+0x25c>)
 8008732:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff f83b 	bl	80077c6 <HAL_I2C_ListenCpltCallback>
}
 8008750:	e014      	b.n	800877c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	2b22      	cmp	r3, #34	; 0x22
 8008758:	d002      	beq.n	8008760 <I2C_Slave_STOPF+0x234>
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b22      	cmp	r3, #34	; 0x22
 800875e:	d10d      	bne.n	800877c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff f80d 	bl	8007796 <HAL_I2C_SlaveRxCpltCallback>
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	08008f11 	.word	0x08008f11
 8008788:	ffff0000 	.word	0xffff0000

0800878c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d002      	beq.n	80087b0 <I2C_ITError+0x24>
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d10a      	bne.n	80087c6 <I2C_ITError+0x3a>
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b22      	cmp	r3, #34	; 0x22
 80087b4:	d107      	bne.n	80087c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087cc:	2b28      	cmp	r3, #40	; 0x28
 80087ce:	d107      	bne.n	80087e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2228      	movs	r2, #40	; 0x28
 80087da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087de:	e015      	b.n	800880c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ee:	d00a      	beq.n	8008806 <I2C_ITError+0x7a>
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b60      	cmp	r3, #96	; 0x60
 80087f4:	d007      	beq.n	8008806 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800881a:	d162      	bne.n	80088e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800882a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b01      	cmp	r3, #1
 8008838:	d020      	beq.n	800887c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	4a6a      	ldr	r2, [pc, #424]	; (80089e8 <I2C_ITError+0x25c>)
 8008840:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd fbb8 	bl	8005fbc <HAL_DMA_Abort_IT>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 8089 	beq.w	8008966 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0201 	bic.w	r2, r2, #1
 8008862:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	e074      	b.n	8008966 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	4a59      	ldr	r2, [pc, #356]	; (80089e8 <I2C_ITError+0x25c>)
 8008882:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd fb97 	bl	8005fbc <HAL_DMA_Abort_IT>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d068      	beq.n	8008966 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d10b      	bne.n	80088ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0201 	bic.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	e041      	b.n	8008966 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b60      	cmp	r3, #96	; 0x60
 80088ec:	d125      	bne.n	800893a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d10b      	bne.n	8008922 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0201 	bic.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe ff65 	bl	8007802 <HAL_I2C_AbortCpltCallback>
 8008938:	e015      	b.n	8008966 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d10b      	bne.n	8008960 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7fe ff44 	bl	80077ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10e      	bne.n	8008994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008986:	2b00      	cmp	r3, #0
 8008988:	d104      	bne.n	8008994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008990:	2b00      	cmp	r3, #0
 8008992:	d007      	beq.n	80089a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d113      	bne.n	80089e0 <I2C_ITError+0x254>
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	2b28      	cmp	r3, #40	; 0x28
 80089bc:	d110      	bne.n	80089e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <I2C_ITError+0x260>)
 80089c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fe fef3 	bl	80077c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	08008f11 	.word	0x08008f11
 80089ec:	ffff0000 	.word	0xffff0000

080089f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	817b      	strh	r3, [r7, #10]
 8008a02:	460b      	mov	r3, r1
 8008a04:	813b      	strh	r3, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fb1a 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00d      	beq.n	8008a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a40:	d103      	bne.n	8008a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e05f      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a4e:	897b      	ldrh	r3, [r7, #10]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	492d      	ldr	r1, [pc, #180]	; (8008b18 <I2C_RequestMemoryWrite+0x128>)
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fb52 	bl	800910e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e04c      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8c:	6a39      	ldr	r1, [r7, #32]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fbbc 	bl	800920c <I2C_WaitOnTXEFlagUntilTimeout>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00d      	beq.n	8008ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d107      	bne.n	8008ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e02b      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d105      	bne.n	8008ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008abc:	893b      	ldrh	r3, [r7, #8]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	611a      	str	r2, [r3, #16]
 8008ac6:	e021      	b.n	8008b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 fb96 	bl	800920c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d107      	bne.n	8008afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e005      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	00010002 	.word	0x00010002

08008b1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	817b      	strh	r3, [r7, #10]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	813b      	strh	r3, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fa7c 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00d      	beq.n	8008b8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7c:	d103      	bne.n	8008b86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e0aa      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b8a:	897b      	ldrh	r3, [r7, #10]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	4952      	ldr	r1, [pc, #328]	; (8008ce8 <I2C_RequestMemoryRead+0x1cc>)
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fab4 	bl	800910e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e097      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc8:	6a39      	ldr	r1, [r7, #32]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fb1e 	bl	800920c <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00d      	beq.n	8008bf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d107      	bne.n	8008bee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e076      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d105      	bne.n	8008c04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	611a      	str	r2, [r3, #16]
 8008c02:	e021      	b.n	8008c48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c04:	893b      	ldrh	r3, [r7, #8]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c14:	6a39      	ldr	r1, [r7, #32]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 faf8 	bl	800920c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d107      	bne.n	8008c3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e050      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	6a39      	ldr	r1, [r7, #32]
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fadd 	bl	800920c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00d      	beq.n	8008c74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d107      	bne.n	8008c70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e035      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f9e5 	bl	8009060 <I2C_WaitOnFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00d      	beq.n	8008cb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008caa:	d103      	bne.n	8008cb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e013      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cb8:	897b      	ldrh	r3, [r7, #10]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	4906      	ldr	r1, [pc, #24]	; (8008ce8 <I2C_RequestMemoryRead+0x1cc>)
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 fa1d 	bl	800910e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	00010002 	.word	0x00010002

08008cec <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d00:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d08:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008d1e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008d40:	7cfb      	ldrb	r3, [r7, #19]
 8008d42:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008d46:	2b21      	cmp	r3, #33	; 0x21
 8008d48:	d007      	beq.n	8008d5a <I2C_DMAXferCplt+0x6e>
 8008d4a:	7cfb      	ldrb	r3, [r7, #19]
 8008d4c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008d50:	2b22      	cmp	r3, #34	; 0x22
 8008d52:	d131      	bne.n	8008db8 <I2C_DMAXferCplt+0xcc>
 8008d54:	7cbb      	ldrb	r3, [r7, #18]
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	d12e      	bne.n	8008db8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d68:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d70:	7cfb      	ldrb	r3, [r7, #19]
 8008d72:	2b29      	cmp	r3, #41	; 0x29
 8008d74:	d10a      	bne.n	8008d8c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2221      	movs	r2, #33	; 0x21
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2228      	movs	r2, #40	; 0x28
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d84:	6978      	ldr	r0, [r7, #20]
 8008d86:	f7fe fcfc 	bl	8007782 <HAL_I2C_SlaveTxCpltCallback>
 8008d8a:	e00c      	b.n	8008da6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d8c:	7cfb      	ldrb	r3, [r7, #19]
 8008d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d90:	d109      	bne.n	8008da6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2222      	movs	r2, #34	; 0x22
 8008d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	2228      	movs	r2, #40	; 0x28
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008da0:	6978      	ldr	r0, [r7, #20]
 8008da2:	f7fe fcf8 	bl	8007796 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008db4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008db6:	e06a      	b.n	8008e8e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d064      	beq.n	8008e8e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d107      	bne.n	8008dde <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ddc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008dec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008df4:	d009      	beq.n	8008e0a <I2C_DMAXferCplt+0x11e>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d006      	beq.n	8008e0a <I2C_DMAXferCplt+0x11e>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008e02:	d002      	beq.n	8008e0a <I2C_DMAXferCplt+0x11e>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d107      	bne.n	8008e1a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e18:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e28:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e38:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008e48:	6978      	ldr	r0, [r7, #20]
 8008e4a:	f7fe fcd0 	bl	80077ee <HAL_I2C_ErrorCallback>
}
 8008e4e:	e01e      	b.n	8008e8e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d10a      	bne.n	8008e7a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008e72:	6978      	ldr	r0, [r7, #20]
 8008e74:	f7fe fcb1 	bl	80077da <HAL_I2C_MemRxCpltCallback>
}
 8008e78:	e009      	b.n	8008e8e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2212      	movs	r2, #18
 8008e86:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e88:	6978      	ldr	r0, [r7, #20]
 8008e8a:	f7fe fc70 	bl	800776e <HAL_I2C_MasterRxCpltCallback>
}
 8008e8e:	bf00      	nop
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7fd fa33 	bl	8006330 <HAL_DMA_GetError>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d01b      	beq.n	8008f08 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ede:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	f043 0210 	orr.w	r2, r3, #16
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7fe fc73 	bl	80077ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f2a:	4b4b      	ldr	r3, [pc, #300]	; (8009058 <I2C_DMAAbort+0x148>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	08db      	lsrs	r3, r3, #3
 8008f30:	4a4a      	ldr	r2, [pc, #296]	; (800905c <I2C_DMAAbort+0x14c>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	0a1a      	lsrs	r2, r3, #8
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	00da      	lsls	r2, r3, #3
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f043 0220 	orr.w	r2, r3, #32
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008f56:	e00a      	b.n	8008f6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	d0ea      	beq.n	8008f44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b60      	cmp	r3, #96	; 0x60
 8008fde:	d10e      	bne.n	8008ffe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	f7fe fc03 	bl	8007802 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ffc:	e027      	b.n	800904e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ffe:	7cfb      	ldrb	r3, [r7, #19]
 8009000:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009004:	2b28      	cmp	r3, #40	; 0x28
 8009006:	d117      	bne.n	8009038 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009026:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2200      	movs	r2, #0
 800902c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2228      	movs	r2, #40	; 0x28
 8009032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009036:	e007      	b.n	8009048 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2220      	movs	r2, #32
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009048:	6978      	ldr	r0, [r7, #20]
 800904a:	f7fe fbd0 	bl	80077ee <HAL_I2C_ErrorCallback>
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20000000 	.word	0x20000000
 800905c:	14f8b589 	.word	0x14f8b589

08009060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009070:	e025      	b.n	80090be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d021      	beq.n	80090be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800907a:	f7fb fb63 	bl	8004744 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d302      	bcc.n	8009090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d116      	bne.n	80090be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2220      	movs	r2, #32
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	f043 0220 	orr.w	r2, r3, #32
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e023      	b.n	8009106 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	0c1b      	lsrs	r3, r3, #16
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10d      	bne.n	80090e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	43da      	mvns	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4013      	ands	r3, r2
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bf0c      	ite	eq
 80090da:	2301      	moveq	r3, #1
 80090dc:	2300      	movne	r3, #0
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	e00c      	b.n	80090fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	43da      	mvns	r2, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4013      	ands	r3, r2
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf0c      	ite	eq
 80090f6:	2301      	moveq	r3, #1
 80090f8:	2300      	movne	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	429a      	cmp	r2, r3
 8009102:	d0b6      	beq.n	8009072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	607a      	str	r2, [r7, #4]
 800911a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800911c:	e051      	b.n	80091c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800912c:	d123      	bne.n	8009176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800913c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009146:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009162:	f043 0204 	orr.w	r2, r3, #4
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e046      	b.n	8009204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d021      	beq.n	80091c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800917e:	f7fb fae1 	bl	8004744 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	429a      	cmp	r2, r3
 800918c:	d302      	bcc.n	8009194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d116      	bne.n	80091c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2220      	movs	r2, #32
 800919e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	f043 0220 	orr.w	r2, r3, #32
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e020      	b.n	8009204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d10c      	bne.n	80091e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	43da      	mvns	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4013      	ands	r3, r2
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bf14      	ite	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	2300      	moveq	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	e00b      	b.n	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	43da      	mvns	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	4013      	ands	r3, r2
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d18d      	bne.n	800911e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009218:	e02d      	b.n	8009276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 f8c0 	bl	80093a0 <I2C_IsAcknowledgeFailed>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e02d      	b.n	8009286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009230:	d021      	beq.n	8009276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009232:	f7fb fa87 	bl	8004744 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	429a      	cmp	r2, r3
 8009240:	d302      	bcc.n	8009248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d116      	bne.n	8009276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2220      	movs	r2, #32
 8009252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	f043 0220 	orr.w	r2, r3, #32
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e007      	b.n	8009286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	2b80      	cmp	r3, #128	; 0x80
 8009282:	d1ca      	bne.n	800921a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800929c:	4b13      	ldr	r3, [pc, #76]	; (80092ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	08db      	lsrs	r3, r3, #3
 80092a2:	4a13      	ldr	r2, [pc, #76]	; (80092f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80092a4:	fba2 2303 	umull	r2, r3, r2, r3
 80092a8:	0a1a      	lsrs	r2, r3, #8
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d107      	bne.n	80092ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	f043 0220 	orr.w	r2, r3, #32
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e008      	b.n	80092e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092dc:	d0e9      	beq.n	80092b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000000 	.word	0x20000000
 80092f0:	14f8b589 	.word	0x14f8b589

080092f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009300:	e042      	b.n	8009388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	f003 0310 	and.w	r3, r3, #16
 800930c:	2b10      	cmp	r3, #16
 800930e:	d119      	bne.n	8009344 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f06f 0210 	mvn.w	r2, #16
 8009318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e029      	b.n	8009398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009344:	f7fb f9fe 	bl	8004744 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	429a      	cmp	r2, r3
 8009352:	d302      	bcc.n	800935a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d116      	bne.n	8009388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	f043 0220 	orr.w	r2, r3, #32
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e007      	b.n	8009398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d1b5      	bne.n	8009302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b6:	d11b      	bne.n	80093f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	f043 0204 	orr.w	r2, r3, #4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e000      	b.n	80093f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800940e:	d103      	bne.n	8009418 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009416:	e007      	b.n	8009428 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009420:	d102      	bne.n	8009428 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2208      	movs	r2, #8
 8009426:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009436:	b08f      	sub	sp, #60	; 0x3c
 8009438:	af0a      	add	r7, sp, #40	; 0x28
 800943a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e116      	b.n	8009674 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d106      	bne.n	8009466 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f006 fdd1 	bl	8010008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2203      	movs	r2, #3
 800946a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009476:	2b00      	cmp	r3, #0
 8009478:	d102      	bne.n	8009480 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f003 fc3c 	bl	800cd02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	603b      	str	r3, [r7, #0]
 8009490:	687e      	ldr	r6, [r7, #4]
 8009492:	466d      	mov	r5, sp
 8009494:	f106 0410 	add.w	r4, r6, #16
 8009498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800949a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800949c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800949e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80094a8:	1d33      	adds	r3, r6, #4
 80094aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094ac:	6838      	ldr	r0, [r7, #0]
 80094ae:	f003 fb13 	bl	800cad8 <USB_CoreInit>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e0d7      	b.n	8009674 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2100      	movs	r1, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f003 fc2a 	bl	800cd24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e04a      	b.n	800956c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094d6:	7bfa      	ldrb	r2, [r7, #15]
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	4613      	mov	r3, r2
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	440b      	add	r3, r1
 80094e4:	333d      	adds	r3, #61	; 0x3d
 80094e6:	2201      	movs	r2, #1
 80094e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80094ea:	7bfa      	ldrb	r2, [r7, #15]
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	333c      	adds	r3, #60	; 0x3c
 80094fa:	7bfa      	ldrb	r2, [r7, #15]
 80094fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80094fe:	7bfa      	ldrb	r2, [r7, #15]
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	b298      	uxth	r0, r3
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	3342      	adds	r3, #66	; 0x42
 8009512:	4602      	mov	r2, r0
 8009514:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009516:	7bfa      	ldrb	r2, [r7, #15]
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	333f      	adds	r3, #63	; 0x3f
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800952a:	7bfa      	ldrb	r2, [r7, #15]
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	1a9b      	subs	r3, r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3344      	adds	r3, #68	; 0x44
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800953e:	7bfa      	ldrb	r2, [r7, #15]
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	4613      	mov	r3, r2
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	1a9b      	subs	r3, r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	3348      	adds	r3, #72	; 0x48
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009552:	7bfa      	ldrb	r2, [r7, #15]
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	1a9b      	subs	r3, r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	3350      	adds	r3, #80	; 0x50
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	3301      	adds	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	7bfa      	ldrb	r2, [r7, #15]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d3af      	bcc.n	80094d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009576:	2300      	movs	r3, #0
 8009578:	73fb      	strb	r3, [r7, #15]
 800957a:	e044      	b.n	8009606 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800957c:	7bfa      	ldrb	r2, [r7, #15]
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009592:	7bfa      	ldrb	r2, [r7, #15]
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4613      	mov	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	440b      	add	r3, r1
 80095a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095a8:	7bfa      	ldrb	r2, [r7, #15]
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095be:	7bfa      	ldrb	r2, [r7, #15]
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	4613      	mov	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	440b      	add	r3, r1
 80095cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095ea:	7bfa      	ldrb	r2, [r7, #15]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	3301      	adds	r3, #1
 8009604:	73fb      	strb	r3, [r7, #15]
 8009606:	7bfa      	ldrb	r2, [r7, #15]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d3b5      	bcc.n	800957c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	603b      	str	r3, [r7, #0]
 8009616:	687e      	ldr	r6, [r7, #4]
 8009618:	466d      	mov	r5, sp
 800961a:	f106 0410 	add.w	r4, r6, #16
 800961e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800962a:	e885 0003 	stmia.w	r5, {r0, r1}
 800962e:	1d33      	adds	r3, r6, #4
 8009630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009632:	6838      	ldr	r0, [r7, #0]
 8009634:	f003 fbc2 	bl	800cdbc <USB_DevInit>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2202      	movs	r2, #2
 8009642:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e014      	b.n	8009674 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b01      	cmp	r3, #1
 8009660:	d102      	bne.n	8009668 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 f892 	bl	800a78c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f004 fc31 	bl	800ded4 <USB_DevDisconnect>

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800967c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_PCD_Start+0x1c>
 8009694:	2302      	movs	r3, #2
 8009696:	e020      	b.n	80096da <HAL_PCD_Start+0x5e>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d109      	bne.n	80096bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d005      	beq.n	80096bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f003 fb0d 	bl	800cce0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f004 fbe1 	bl	800de92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80096e2:	b590      	push	{r4, r7, lr}
 80096e4:	b08d      	sub	sp, #52	; 0x34
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f004 fc9f 	bl	800e03c <USB_GetMode>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	f040 83ca 	bne.w	8009e9a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f004 fc03 	bl	800df16 <USB_ReadInterrupts>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 83c0 	beq.w	8009e98 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f004 fbfa 	bl	800df16 <USB_ReadInterrupts>
 8009722:	4603      	mov	r3, r0
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b02      	cmp	r3, #2
 800972a:	d107      	bne.n	800973c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	695a      	ldr	r2, [r3, #20]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f002 0202 	and.w	r2, r2, #2
 800973a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f004 fbe8 	bl	800df16 <USB_ReadInterrupts>
 8009746:	4603      	mov	r3, r0
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b10      	cmp	r3, #16
 800974e:	d161      	bne.n	8009814 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0210 	bic.w	r2, r2, #16
 800975e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	4613      	mov	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	4413      	add	r3, r2
 800977c:	3304      	adds	r3, #4
 800977e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	0c5b      	lsrs	r3, r3, #17
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	2b02      	cmp	r3, #2
 800978a:	d124      	bne.n	80097d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009792:	4013      	ands	r3, r2
 8009794:	2b00      	cmp	r3, #0
 8009796:	d035      	beq.n	8009804 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	091b      	lsrs	r3, r3, #4
 80097a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80097a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	461a      	mov	r2, r3
 80097aa:	6a38      	ldr	r0, [r7, #32]
 80097ac:	f004 fa1f 	bl	800dbee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	091b      	lsrs	r3, r3, #4
 80097b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097bc:	441a      	add	r2, r3
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	091b      	lsrs	r3, r3, #4
 80097ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097ce:	441a      	add	r2, r3
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	619a      	str	r2, [r3, #24]
 80097d4:	e016      	b.n	8009804 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	0c5b      	lsrs	r3, r3, #17
 80097da:	f003 030f 	and.w	r3, r3, #15
 80097de:	2b06      	cmp	r3, #6
 80097e0:	d110      	bne.n	8009804 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097e8:	2208      	movs	r2, #8
 80097ea:	4619      	mov	r1, r3
 80097ec:	6a38      	ldr	r0, [r7, #32]
 80097ee:	f004 f9fe 	bl	800dbee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	091b      	lsrs	r3, r3, #4
 80097fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097fe:	441a      	add	r2, r3
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0210 	orr.w	r2, r2, #16
 8009812:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	f004 fb7c 	bl	800df16 <USB_ReadInterrupts>
 800981e:	4603      	mov	r3, r0
 8009820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009824:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009828:	d16e      	bne.n	8009908 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800982a:	2300      	movs	r3, #0
 800982c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f004 fb82 	bl	800df3c <USB_ReadDevAllOutEpInterrupt>
 8009838:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800983a:	e062      	b.n	8009902 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d057      	beq.n	80098f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984c:	b2d2      	uxtb	r2, r2
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f004 fba7 	bl	800dfa4 <USB_ReadDevOutEPInterrupt>
 8009856:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00c      	beq.n	800987c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986e:	461a      	mov	r2, r3
 8009870:	2301      	movs	r3, #1
 8009872:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fdde 	bl	800a438 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f003 0308 	and.w	r3, r3, #8
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00c      	beq.n	80098a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	461a      	mov	r2, r3
 8009894:	2308      	movs	r3, #8
 8009896:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fed8 	bl	800a650 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d008      	beq.n	80098bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b6:	461a      	mov	r2, r3
 80098b8:	2310      	movs	r3, #16
 80098ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d008      	beq.n	80098d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	461a      	mov	r2, r3
 80098d4:	2320      	movs	r3, #32
 80098d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ee:	461a      	mov	r2, r3
 80098f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	3301      	adds	r3, #1
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	2b00      	cmp	r3, #0
 8009906:	d199      	bne.n	800983c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4618      	mov	r0, r3
 800990e:	f004 fb02 	bl	800df16 <USB_ReadInterrupts>
 8009912:	4603      	mov	r3, r0
 8009914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800991c:	f040 80c0 	bne.w	8009aa0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f004 fb23 	bl	800df70 <USB_ReadDevAllInEpInterrupt>
 800992a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009930:	e0b2      	b.n	8009a98 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a7 	beq.w	8009a8c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f004 fb49 	bl	800dfe0 <USB_ReadDevInEPInterrupt>
 800994e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d057      	beq.n	8009a0a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	2201      	movs	r2, #1
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	43db      	mvns	r3, r3
 8009974:	69f9      	ldr	r1, [r7, #28]
 8009976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800997a:	4013      	ands	r3, r2
 800997c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998a:	461a      	mov	r2, r3
 800998c:	2301      	movs	r3, #1
 800998e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d132      	bne.n	80099fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999c:	4613      	mov	r3, r2
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	3348      	adds	r3, #72	; 0x48
 80099a8:	6819      	ldr	r1, [r3, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ae:	4613      	mov	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4403      	add	r3, r0
 80099b8:	3344      	adds	r3, #68	; 0x44
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4419      	add	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	4613      	mov	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4403      	add	r3, r0
 80099cc:	3348      	adds	r3, #72	; 0x48
 80099ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d113      	bne.n	80099fe <HAL_PCD_IRQHandler+0x31c>
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099da:	4613      	mov	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	3350      	adds	r3, #80	; 0x50
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d108      	bne.n	80099fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099f6:	461a      	mov	r2, r3
 80099f8:	2101      	movs	r1, #1
 80099fa:	f004 fb51 	bl	800e0a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f006 fbae 	bl	8010166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d008      	beq.n	8009a26 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a20:	461a      	mov	r2, r3
 8009a22:	2308      	movs	r3, #8
 8009a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f003 0310 	and.w	r3, r3, #16
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d008      	beq.n	8009a42 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	2310      	movs	r3, #16
 8009a40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d008      	beq.n	8009a7a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	461a      	mov	r2, r3
 8009a76:	2302      	movs	r3, #2
 8009a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fc48 	bl	800a31c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	3301      	adds	r3, #1
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	085b      	lsrs	r3, r3, #1
 8009a96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f47f af49 	bne.w	8009932 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f004 fa36 	bl	800df16 <USB_ReadInterrupts>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab4:	d122      	bne.n	8009afc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	69fa      	ldr	r2, [r7, #28]
 8009ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d108      	bne.n	8009ae6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f006 fd90 	bl	8010604 <HAL_PCDEx_LPM_Callback>
 8009ae4:	e002      	b.n	8009aec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f006 fbb4 	bl	8010254 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695a      	ldr	r2, [r3, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f004 fa08 	bl	800df16 <USB_ReadInterrupts>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b10:	d112      	bne.n	8009b38 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d102      	bne.n	8009b28 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f006 fb70 	bl	8010208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	695a      	ldr	r2, [r3, #20]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009b36:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f004 f9ea 	bl	800df16 <USB_ReadInterrupts>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b4c:	d121      	bne.n	8009b92 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	695a      	ldr	r2, [r3, #20]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009b5c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d111      	bne.n	8009b8c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b76:	089b      	lsrs	r3, r3, #2
 8009b78:	f003 020f 	and.w	r2, r3, #15
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009b82:	2101      	movs	r1, #1
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f006 fd3d 	bl	8010604 <HAL_PCDEx_LPM_Callback>
 8009b8a:	e002      	b.n	8009b92 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f006 fb3b 	bl	8010208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f004 f9bd 	bl	800df16 <USB_ReadInterrupts>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba6:	f040 80c7 	bne.w	8009d38 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bb8:	f023 0301 	bic.w	r3, r3, #1
 8009bbc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2110      	movs	r1, #16
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f003 fa57 	bl	800d078 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bca:	2300      	movs	r3, #0
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bce:	e056      	b.n	8009c7e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009be2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bf4:	0151      	lsls	r1, r2, #5
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	440a      	add	r2, r1
 8009bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c02:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c30:	461a      	mov	r2, r3
 8009c32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	69fa      	ldr	r2, [r7, #28]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d3a3      	bcc.n	8009bd0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	69fa      	ldr	r2, [r7, #28]
 8009c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009c9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d016      	beq.n	8009cd2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cae:	69fa      	ldr	r2, [r7, #28]
 8009cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb4:	f043 030b 	orr.w	r3, r3, #11
 8009cb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cca:	f043 030b 	orr.w	r3, r3, #11
 8009cce:	6453      	str	r3, [r2, #68]	; 0x44
 8009cd0:	e015      	b.n	8009cfe <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ce4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009ce8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf8:	f043 030b 	orr.w	r3, r3, #11
 8009cfc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d22:	461a      	mov	r2, r3
 8009d24:	f004 f9bc 	bl	800e0a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f004 f8ea 	bl	800df16 <USB_ReadInterrupts>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d4c:	d124      	bne.n	8009d98 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f004 f980 	bl	800e058 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f003 f9e8 	bl	800d132 <USB_GetDevSpeed>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461a      	mov	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681c      	ldr	r4, [r3, #0]
 8009d6e:	f000 fe67 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 8009d72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f002 ff0d 	bl	800cb9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f006 fa17 	bl	80101b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	695a      	ldr	r2, [r3, #20]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f004 f8ba 	bl	800df16 <USB_ReadInterrupts>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d10a      	bne.n	8009dc2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f006 f9f4 	bl	801019a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695a      	ldr	r2, [r3, #20]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f002 0208 	and.w	r2, r2, #8
 8009dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f004 f8a5 	bl	800df16 <USB_ReadInterrupts>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dd6:	d10f      	bne.n	8009df8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f006 fa56 	bl	8010294 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695a      	ldr	r2, [r3, #20]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f004 f88a 	bl	800df16 <USB_ReadInterrupts>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e0c:	d10f      	bne.n	8009e2e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f006 fa29 	bl	8010270 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	695a      	ldr	r2, [r3, #20]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f004 f86f 	bl	800df16 <USB_ReadInterrupts>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e42:	d10a      	bne.n	8009e5a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f006 fa37 	bl	80102b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	695a      	ldr	r2, [r3, #20]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f004 f859 	bl	800df16 <USB_ReadInterrupts>
 8009e64:	4603      	mov	r3, r0
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d115      	bne.n	8009e9a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f006 fa27 	bl	80102d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6859      	ldr	r1, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	605a      	str	r2, [r3, #4]
 8009e96:	e000      	b.n	8009e9a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8009e98:	bf00      	nop
    }
  }
}
 8009e9a:	3734      	adds	r7, #52	; 0x34
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd90      	pop	{r4, r7, pc}

08009ea0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_PCD_SetAddress+0x1a>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e013      	b.n	8009ee2 <HAL_PCD_SetAddress+0x42>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f003 ffb7 	bl	800de46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	4603      	mov	r3, r0
 8009efa:	70fb      	strb	r3, [r7, #3]
 8009efc:	460b      	mov	r3, r1
 8009efe:	803b      	strh	r3, [r7, #0]
 8009f00:	4613      	mov	r3, r2
 8009f02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da0f      	bge.n	8009f30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	f003 020f 	and.w	r2, r3, #15
 8009f16:	4613      	mov	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	3338      	adds	r3, #56	; 0x38
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	4413      	add	r3, r2
 8009f24:	3304      	adds	r3, #4
 8009f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	705a      	strb	r2, [r3, #1]
 8009f2e:	e00f      	b.n	8009f50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	f003 020f 	and.w	r2, r3, #15
 8009f36:	4613      	mov	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	4413      	add	r3, r2
 8009f46:	3304      	adds	r3, #4
 8009f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	f003 030f 	and.w	r3, r3, #15
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009f5c:	883a      	ldrh	r2, [r7, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	78ba      	ldrb	r2, [r7, #2]
 8009f66:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f7a:	78bb      	ldrb	r3, [r7, #2]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d102      	bne.n	8009f86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <HAL_PCD_EP_Open+0xaa>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e00e      	b.n	8009fb2 <HAL_PCD_EP_Open+0xc8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68f9      	ldr	r1, [r7, #12]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f003 f8ea 	bl	800d17c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	da0f      	bge.n	8009fee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	f003 020f 	and.w	r2, r3, #15
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	3338      	adds	r3, #56	; 0x38
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	705a      	strb	r2, [r3, #1]
 8009fec:	e00f      	b.n	800a00e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	f003 020f 	and.w	r2, r3, #15
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	4413      	add	r3, r2
 800a004:	3304      	adds	r3, #4
 800a006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	f003 030f 	and.w	r3, r3, #15
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_PCD_EP_Close+0x6e>
 800a024:	2302      	movs	r3, #2
 800a026:	e00e      	b.n	800a046 <HAL_PCD_EP_Close+0x8c>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68f9      	ldr	r1, [r7, #12]
 800a036:	4618      	mov	r0, r3
 800a038:	f003 f928 	bl	800d28c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b086      	sub	sp, #24
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
 800a05a:	460b      	mov	r3, r1
 800a05c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a05e:	7afb      	ldrb	r3, [r7, #11]
 800a060:	f003 020f 	and.w	r2, r3, #15
 800a064:	4613      	mov	r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	1a9b      	subs	r3, r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2200      	movs	r2, #0
 800a088:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2200      	movs	r2, #0
 800a08e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	b2da      	uxtb	r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d102      	bne.n	800a0aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	f003 030f 	and.w	r3, r3, #15
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d109      	bne.n	800a0c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6979      	ldr	r1, [r7, #20]
 800a0c2:	f003 fc03 	bl	800d8cc <USB_EP0StartXfer>
 800a0c6:	e008      	b.n	800a0da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6818      	ldr	r0, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	f003 f9b5 	bl	800d444 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	f003 020f 	and.w	r2, r3, #15
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	440b      	add	r3, r1
 800a102:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a106:	681b      	ldr	r3, [r3, #0]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	460b      	mov	r3, r1
 800a122:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	f003 020f 	and.w	r2, r3, #15
 800a12a:	4613      	mov	r3, r2
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	3338      	adds	r3, #56	; 0x38
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	3304      	adds	r3, #4
 800a13a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2200      	movs	r2, #0
 800a14c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2201      	movs	r2, #1
 800a152:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a154:	7afb      	ldrb	r3, [r7, #11]
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d102      	bne.n	800a16e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	f003 030f 	and.w	r3, r3, #15
 800a174:	2b00      	cmp	r3, #0
 800a176:	d109      	bne.n	800a18c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	b2db      	uxtb	r3, r3
 800a182:	461a      	mov	r2, r3
 800a184:	6979      	ldr	r1, [r7, #20]
 800a186:	f003 fba1 	bl	800d8cc <USB_EP0StartXfer>
 800a18a:	e008      	b.n	800a19e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6818      	ldr	r0, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	461a      	mov	r2, r3
 800a198:	6979      	ldr	r1, [r7, #20]
 800a19a:	f003 f953 	bl	800d444 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	f003 020f 	and.w	r2, r3, #15
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d901      	bls.n	800a1c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e050      	b.n	800a268 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	da0f      	bge.n	800a1ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	f003 020f 	and.w	r2, r3, #15
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	1a9b      	subs	r3, r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	3338      	adds	r3, #56	; 0x38
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	705a      	strb	r2, [r3, #1]
 800a1ec:	e00d      	b.n	800a20a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	4413      	add	r3, r2
 800a200:	3304      	adds	r3, #4
 800a202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	f003 030f 	and.w	r3, r3, #15
 800a216:	b2da      	uxtb	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <HAL_PCD_EP_SetStall+0x82>
 800a226:	2302      	movs	r3, #2
 800a228:	e01e      	b.n	800a268 <HAL_PCD_EP_SetStall+0xc0>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68f9      	ldr	r1, [r7, #12]
 800a238:	4618      	mov	r0, r3
 800a23a:	f003 fd30 	bl	800dc9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	b2d9      	uxtb	r1, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a258:	461a      	mov	r2, r3
 800a25a:	f003 ff21 	bl	800e0a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	f003 020f 	and.w	r2, r3, #15
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d901      	bls.n	800a28e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e042      	b.n	800a314 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a28e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a292:	2b00      	cmp	r3, #0
 800a294:	da0f      	bge.n	800a2b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	f003 020f 	and.w	r2, r3, #15
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	3338      	adds	r3, #56	; 0x38
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	705a      	strb	r2, [r3, #1]
 800a2b4:	e00f      	b.n	800a2d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	f003 020f 	and.w	r2, r3, #15
 800a2bc:	4613      	mov	r3, r2
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d101      	bne.n	800a2f6 <HAL_PCD_EP_ClrStall+0x86>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e00e      	b.n	800a314 <HAL_PCD_EP_ClrStall+0xa4>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68f9      	ldr	r1, [r7, #12]
 800a304:	4618      	mov	r0, r3
 800a306:	f003 fd38 	bl	800dd7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08a      	sub	sp, #40	; 0x28
 800a320:	af02      	add	r7, sp, #8
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	4613      	mov	r3, r2
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	1a9b      	subs	r3, r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	3338      	adds	r3, #56	; 0x38
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	4413      	add	r3, r2
 800a340:	3304      	adds	r3, #4
 800a342:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	699a      	ldr	r2, [r3, #24]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d901      	bls.n	800a354 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e06c      	b.n	800a42e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	695a      	ldr	r2, [r3, #20]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	429a      	cmp	r2, r3
 800a368:	d902      	bls.n	800a370 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	3303      	adds	r3, #3
 800a374:	089b      	lsrs	r3, r3, #2
 800a376:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a378:	e02b      	b.n	800a3d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	695a      	ldr	r2, [r3, #20]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d902      	bls.n	800a396 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	3303      	adds	r3, #3
 800a39a:	089b      	lsrs	r3, r3, #2
 800a39c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68d9      	ldr	r1, [r3, #12]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	6978      	ldr	r0, [r7, #20]
 800a3b6:	f003 fbdc 	bl	800db72 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d809      	bhi.n	800a3fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	699a      	ldr	r2, [r3, #24]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d203      	bcs.n	800a3fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1be      	bne.n	800a37a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	695a      	ldr	r2, [r3, #20]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	d811      	bhi.n	800a42c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	2201      	movs	r2, #1
 800a410:	fa02 f303 	lsl.w	r3, r2, r3
 800a414:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	43db      	mvns	r3, r3
 800a422:	6939      	ldr	r1, [r7, #16]
 800a424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a428:	4013      	ands	r3, r2
 800a42a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3720      	adds	r7, #32
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	333c      	adds	r3, #60	; 0x3c
 800a450:	3304      	adds	r3, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	f040 80a0 	bne.w	800a5b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d015      	beq.n	800a4a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4a72      	ldr	r2, [pc, #456]	; (800a648 <PCD_EP_OutXfrComplete_int+0x210>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	f240 80dd 	bls.w	800a63e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 80d7 	beq.w	800a63e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49c:	461a      	mov	r2, r3
 800a49e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4a2:	6093      	str	r3, [r2, #8]
 800a4a4:	e0cb      	b.n	800a63e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d009      	beq.n	800a4c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	015a      	lsls	r2, r3, #5
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4bc:	461a      	mov	r2, r3
 800a4be:	2320      	movs	r3, #32
 800a4c0:	6093      	str	r3, [r2, #8]
 800a4c2:	e0bc      	b.n	800a63e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 80b7 	bne.w	800a63e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4a5d      	ldr	r2, [pc, #372]	; (800a648 <PCD_EP_OutXfrComplete_int+0x210>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d90f      	bls.n	800a4f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4f4:	6093      	str	r3, [r2, #8]
 800a4f6:	e0a2      	b.n	800a63e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	1a9b      	subs	r3, r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a50a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	0159      	lsls	r1, r3, #5
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	440b      	add	r3, r1
 800a514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a51e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	4613      	mov	r3, r2
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	1a9b      	subs	r3, r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4403      	add	r3, r0
 800a52e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a532:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	4613      	mov	r3, r2
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	1a9b      	subs	r3, r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	440b      	add	r3, r1
 800a542:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a546:	6819      	ldr	r1, [r3, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	1a9b      	subs	r3, r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4403      	add	r3, r0
 800a556:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4419      	add	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	4613      	mov	r3, r2
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4403      	add	r3, r0
 800a56c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a570:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d114      	bne.n	800a5a2 <PCD_EP_OutXfrComplete_int+0x16a>
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d108      	bne.n	800a5a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a59a:	461a      	mov	r2, r3
 800a59c:	2101      	movs	r1, #1
 800a59e:	f003 fd7f 	bl	800e0a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f005 fdc1 	bl	8010130 <HAL_PCD_DataOutStageCallback>
 800a5ae:	e046      	b.n	800a63e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4a26      	ldr	r2, [pc, #152]	; (800a64c <PCD_EP_OutXfrComplete_int+0x214>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d124      	bne.n	800a602 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5d4:	6093      	str	r3, [r2, #8]
 800a5d6:	e032      	b.n	800a63e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f005 fd98 	bl	8010130 <HAL_PCD_DataOutStageCallback>
 800a600:	e01d      	b.n	800a63e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d114      	bne.n	800a632 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4613      	mov	r3, r2
 800a60e:	00db      	lsls	r3, r3, #3
 800a610:	1a9b      	subs	r3, r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	440b      	add	r3, r1
 800a616:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d108      	bne.n	800a632 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6818      	ldr	r0, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a62a:	461a      	mov	r2, r3
 800a62c:	2100      	movs	r1, #0
 800a62e:	f003 fd37 	bl	800e0a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f005 fd79 	bl	8010130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	4f54300a 	.word	0x4f54300a
 800a64c:	4f54310a 	.word	0x4f54310a

0800a650 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	333c      	adds	r3, #60	; 0x3c
 800a668:	3304      	adds	r3, #4
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d90e      	bls.n	800a6a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d009      	beq.n	800a6a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69c:	461a      	mov	r2, r3
 800a69e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f005 fd31 	bl	801010c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a0a      	ldr	r2, [pc, #40]	; (800a6d8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d90c      	bls.n	800a6cc <PCD_EP_OutSetupPacket_int+0x7c>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d108      	bne.n	800a6cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	f003 fcea 	bl	800e0a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3718      	adds	r7, #24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	4f54300a 	.word	0x4f54300a

0800a6dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d107      	bne.n	800a70a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a6fa:	883b      	ldrh	r3, [r7, #0]
 800a6fc:	0419      	lsls	r1, r3, #16
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	430a      	orrs	r2, r1
 800a706:	629a      	str	r2, [r3, #40]	; 0x28
 800a708:	e028      	b.n	800a75c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a710:	0c1b      	lsrs	r3, r3, #16
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4413      	add	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
 800a71c:	e00d      	b.n	800a73a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	3340      	adds	r3, #64	; 0x40
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	0c1b      	lsrs	r3, r3, #16
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	4413      	add	r3, r2
 800a732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	3301      	adds	r3, #1
 800a738:	73fb      	strb	r3, [r7, #15]
 800a73a:	7bfa      	ldrb	r2, [r7, #15]
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	3b01      	subs	r3, #1
 800a740:	429a      	cmp	r2, r3
 800a742:	d3ec      	bcc.n	800a71e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a744:	883b      	ldrh	r3, [r7, #0]
 800a746:	0418      	lsls	r0, r3, #16
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6819      	ldr	r1, [r3, #0]
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	3b01      	subs	r3, #1
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	4302      	orrs	r2, r0
 800a754:	3340      	adds	r3, #64	; 0x40
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	440b      	add	r3, r1
 800a75a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	887a      	ldrh	r2, [r7, #2]
 800a77c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7be:	f043 0303 	orr.w	r3, r3, #3
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a7de:	2300      	movs	r3, #0
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	4b20      	ldr	r3, [pc, #128]	; (800a864 <HAL_PWREx_EnableOverDrive+0x90>)
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	4a1f      	ldr	r2, [pc, #124]	; (800a864 <HAL_PWREx_EnableOverDrive+0x90>)
 800a7e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a7ee:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <HAL_PWREx_EnableOverDrive+0x90>)
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a7fa:	4b1b      	ldr	r3, [pc, #108]	; (800a868 <HAL_PWREx_EnableOverDrive+0x94>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a800:	f7f9 ffa0 	bl	8004744 <HAL_GetTick>
 800a804:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a806:	e009      	b.n	800a81c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a808:	f7f9 ff9c 	bl	8004744 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a816:	d901      	bls.n	800a81c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e01f      	b.n	800a85c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <HAL_PWREx_EnableOverDrive+0x98>)
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a828:	d1ee      	bne.n	800a808 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a82a:	4b11      	ldr	r3, [pc, #68]	; (800a870 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a830:	f7f9 ff88 	bl	8004744 <HAL_GetTick>
 800a834:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a836:	e009      	b.n	800a84c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a838:	f7f9 ff84 	bl	8004744 <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a846:	d901      	bls.n	800a84c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e007      	b.n	800a85c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a84c:	4b07      	ldr	r3, [pc, #28]	; (800a86c <HAL_PWREx_EnableOverDrive+0x98>)
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a858:	d1ee      	bne.n	800a838 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40023800 	.word	0x40023800
 800a868:	420e0040 	.word	0x420e0040
 800a86c:	40007000 	.word	0x40007000
 800a870:	420e0044 	.word	0x420e0044

0800a874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e0cc      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a888:	4b68      	ldr	r3, [pc, #416]	; (800aa2c <HAL_RCC_ClockConfig+0x1b8>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d90c      	bls.n	800a8b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a896:	4b65      	ldr	r3, [pc, #404]	; (800aa2c <HAL_RCC_ClockConfig+0x1b8>)
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a89e:	4b63      	ldr	r3, [pc, #396]	; (800aa2c <HAL_RCC_ClockConfig+0x1b8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 030f 	and.w	r3, r3, #15
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d001      	beq.n	800a8b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e0b8      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d020      	beq.n	800a8fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8c8:	4b59      	ldr	r3, [pc, #356]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	4a58      	ldr	r2, [pc, #352]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a8d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0308 	and.w	r3, r3, #8
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8e0:	4b53      	ldr	r3, [pc, #332]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	4a52      	ldr	r2, [pc, #328]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a8e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a8ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8ec:	4b50      	ldr	r3, [pc, #320]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	494d      	ldr	r1, [pc, #308]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d044      	beq.n	800a994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d107      	bne.n	800a922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a912:	4b47      	ldr	r3, [pc, #284]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d119      	bne.n	800a952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e07f      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d003      	beq.n	800a932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d107      	bne.n	800a942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a932:	4b3f      	ldr	r3, [pc, #252]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d109      	bne.n	800a952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e06f      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a942:	4b3b      	ldr	r3, [pc, #236]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e067      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a952:	4b37      	ldr	r3, [pc, #220]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f023 0203 	bic.w	r2, r3, #3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	4934      	ldr	r1, [pc, #208]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a960:	4313      	orrs	r3, r2
 800a962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a964:	f7f9 feee 	bl	8004744 <HAL_GetTick>
 800a968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a96a:	e00a      	b.n	800a982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a96c:	f7f9 feea 	bl	8004744 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d901      	bls.n	800a982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e04f      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a982:	4b2b      	ldr	r3, [pc, #172]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	f003 020c 	and.w	r2, r3, #12
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	429a      	cmp	r2, r3
 800a992:	d1eb      	bne.n	800a96c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a994:	4b25      	ldr	r3, [pc, #148]	; (800aa2c <HAL_RCC_ClockConfig+0x1b8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d20c      	bcs.n	800a9bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a2:	4b22      	ldr	r3, [pc, #136]	; (800aa2c <HAL_RCC_ClockConfig+0x1b8>)
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	b2d2      	uxtb	r2, r2
 800a9a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9aa:	4b20      	ldr	r3, [pc, #128]	; (800aa2c <HAL_RCC_ClockConfig+0x1b8>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d001      	beq.n	800a9bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e032      	b.n	800aa22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d008      	beq.n	800a9da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9c8:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	4916      	ldr	r1, [pc, #88]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0308 	and.w	r3, r3, #8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d009      	beq.n	800a9fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9e6:	4b12      	ldr	r3, [pc, #72]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	490e      	ldr	r1, [pc, #56]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9fa:	f000 fb6b 	bl	800b0d4 <HAL_RCC_GetSysClockFreq>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	091b      	lsrs	r3, r3, #4
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	490a      	ldr	r1, [pc, #40]	; (800aa34 <HAL_RCC_ClockConfig+0x1c0>)
 800aa0c:	5ccb      	ldrb	r3, [r1, r3]
 800aa0e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa12:	4a09      	ldr	r2, [pc, #36]	; (800aa38 <HAL_RCC_ClockConfig+0x1c4>)
 800aa14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aa16:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <HAL_RCC_ClockConfig+0x1c8>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f9 fe4e 	bl	80046bc <HAL_InitTick>

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	40023c00 	.word	0x40023c00
 800aa30:	40023800 	.word	0x40023800
 800aa34:	080107e0 	.word	0x080107e0
 800aa38:	20000000 	.word	0x20000000
 800aa3c:	20000004 	.word	0x20000004

0800aa40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa44:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa46:	681b      	ldr	r3, [r3, #0]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20000000 	.word	0x20000000

0800aa58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa5c:	f7ff fff0 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 800aa60:	4602      	mov	r2, r0
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	0a9b      	lsrs	r3, r3, #10
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	4903      	ldr	r1, [pc, #12]	; (800aa7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa6e:	5ccb      	ldrb	r3, [r1, r3]
 800aa70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	40023800 	.word	0x40023800
 800aa7c:	080107f0 	.word	0x080107f0

0800aa80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08c      	sub	sp, #48	; 0x30
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d010      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800aab8:	4b6f      	ldr	r3, [pc, #444]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aaba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aabe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	496c      	ldr	r1, [pc, #432]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800aad6:	2301      	movs	r3, #1
 800aad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0302 	and.w	r3, r3, #2
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d010      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800aae6:	4b64      	ldr	r3, [pc, #400]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf4:	4960      	ldr	r1, [pc, #384]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800ab04:	2301      	movs	r3, #1
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d017      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab14:	4b58      	ldr	r3, [pc, #352]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ab16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	4955      	ldr	r1, [pc, #340]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab32:	d101      	bne.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800ab34:	2301      	movs	r3, #1
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800ab40:	2301      	movs	r3, #1
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0308 	and.w	r3, r3, #8
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d017      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab50:	4b49      	ldr	r3, [pc, #292]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ab52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5e:	4946      	ldr	r1, [pc, #280]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab6e:	d101      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800ab70:	2301      	movs	r3, #1
 800ab72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0320 	and.w	r3, r3, #32
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 808a 	beq.w	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60bb      	str	r3, [r7, #8]
 800ab92:	4b39      	ldr	r3, [pc, #228]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	4a38      	ldr	r2, [pc, #224]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ab98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab9e:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba6:	60bb      	str	r3, [r7, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800abaa:	4b34      	ldr	r3, [pc, #208]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a33      	ldr	r2, [pc, #204]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800abb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800abb6:	f7f9 fdc5 	bl	8004744 <HAL_GetTick>
 800abba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800abbc:	e008      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800abbe:	f7f9 fdc1 	bl	8004744 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d901      	bls.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e278      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800abd0:	4b2a      	ldr	r3, [pc, #168]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0f0      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800abdc:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abe4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d02f      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf4:	6a3a      	ldr	r2, [r7, #32]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d028      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abfa:	4b1f      	ldr	r3, [pc, #124]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ac10:	4a19      	ldr	r2, [pc, #100]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ac16:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d114      	bne.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ac22:	f7f9 fd8f 	bl	8004744 <HAL_GetTick>
 800ac26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac28:	e00a      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac2a:	f7f9 fd8b 	bl	8004744 <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d901      	bls.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e240      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac40:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d0ee      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac58:	d114      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800ac5a:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac6e:	4902      	ldr	r1, [pc, #8]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	608b      	str	r3, [r1, #8]
 800ac74:	e00c      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800ac76:	bf00      	nop
 800ac78:	40023800 	.word	0x40023800
 800ac7c:	40007000 	.word	0x40007000
 800ac80:	42470e40 	.word	0x42470e40
 800ac84:	4b4a      	ldr	r3, [pc, #296]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	4a49      	ldr	r2, [pc, #292]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ac8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ac8e:	6093      	str	r3, [r2, #8]
 800ac90:	4b47      	ldr	r3, [pc, #284]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ac92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac9c:	4944      	ldr	r1, [pc, #272]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0310 	and.w	r3, r3, #16
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800acb4:	4b3f      	ldr	r3, [pc, #252]	; (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800acb6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800acc4:	4b3a      	ldr	r3, [pc, #232]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800acc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd2:	4937      	ldr	r1, [pc, #220]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ace6:	4b32      	ldr	r3, [pc, #200]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ace8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf4:	492e      	ldr	r1, [pc, #184]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d011      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ad08:	4b29      	ldr	r3, [pc, #164]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad16:	4926      	ldr	r1, [pc, #152]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad26:	d101      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00a      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800ad38:	4b1d      	ldr	r3, [pc, #116]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad46:	491a      	ldr	r1, [pc, #104]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d011      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800ad5a:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad68:	4911      	ldr	r1, [pc, #68]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad78:	d101      	bne.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d005      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad8c:	f040 80ff 	bne.w	800af8e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ad90:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ad96:	f7f9 fcd5 	bl	8004744 <HAL_GetTick>
 800ad9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad9c:	e00e      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ad9e:	f7f9 fcd1 	bl	8004744 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d907      	bls.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e188      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800adb0:	40023800 	.word	0x40023800
 800adb4:	424711e0 	.word	0x424711e0
 800adb8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800adbc:	4b7e      	ldr	r3, [pc, #504]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1ea      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add8:	2b00      	cmp	r3, #0
 800adda:	d009      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d028      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d124      	bne.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800adf0:	4b71      	ldr	r3, [pc, #452]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800adf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adf6:	0c1b      	lsrs	r3, r3, #16
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	3301      	adds	r3, #1
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ae02:	4b6d      	ldr	r3, [pc, #436]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ae04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae08:	0e1b      	lsrs	r3, r3, #24
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	019b      	lsls	r3, r3, #6
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	085b      	lsrs	r3, r3, #1
 800ae20:	3b01      	subs	r3, #1
 800ae22:	041b      	lsls	r3, r3, #16
 800ae24:	431a      	orrs	r2, r3
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	061b      	lsls	r3, r3, #24
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	071b      	lsls	r3, r3, #28
 800ae32:	4961      	ldr	r1, [pc, #388]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae4e:	d00a      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d035      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae64:	d130      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ae66:	4b54      	ldr	r3, [pc, #336]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ae68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	3301      	adds	r3, #1
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae78:	4b4f      	ldr	r3, [pc, #316]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ae7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae7e:	0f1b      	lsrs	r3, r3, #28
 800ae80:	f003 0307 	and.w	r3, r3, #7
 800ae84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	019b      	lsls	r3, r3, #6
 800ae90:	431a      	orrs	r2, r3
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	085b      	lsrs	r3, r3, #1
 800ae96:	3b01      	subs	r3, #1
 800ae98:	041b      	lsls	r3, r3, #16
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	061b      	lsls	r3, r3, #24
 800aea2:	431a      	orrs	r2, r3
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	071b      	lsls	r3, r3, #28
 800aea8:	4943      	ldr	r1, [pc, #268]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aeb0:	4b41      	ldr	r3, [pc, #260]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aeb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb6:	f023 021f 	bic.w	r2, r3, #31
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebe:	3b01      	subs	r3, #1
 800aec0:	493d      	ldr	r1, [pc, #244]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d029      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aedc:	d124      	bne.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800aede:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aee4:	0c1b      	lsrs	r3, r3, #16
 800aee6:	f003 0303 	and.w	r3, r3, #3
 800aeea:	3301      	adds	r3, #1
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aef0:	4b31      	ldr	r3, [pc, #196]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aef6:	0f1b      	lsrs	r3, r3, #28
 800aef8:	f003 0307 	and.w	r3, r3, #7
 800aefc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	019b      	lsls	r3, r3, #6
 800af08:	431a      	orrs	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	085b      	lsrs	r3, r3, #1
 800af10:	3b01      	subs	r3, #1
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	431a      	orrs	r2, r3
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	061b      	lsls	r3, r3, #24
 800af1a:	431a      	orrs	r2, r3
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	071b      	lsls	r3, r3, #28
 800af20:	4925      	ldr	r1, [pc, #148]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af22:	4313      	orrs	r3, r2
 800af24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af30:	2b00      	cmp	r3, #0
 800af32:	d016      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	019b      	lsls	r3, r3, #6
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	085b      	lsrs	r3, r3, #1
 800af46:	3b01      	subs	r3, #1
 800af48:	041b      	lsls	r3, r3, #16
 800af4a:	431a      	orrs	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	061b      	lsls	r3, r3, #24
 800af52:	431a      	orrs	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	071b      	lsls	r3, r3, #28
 800af5a:	4917      	ldr	r1, [pc, #92]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800af62:	4b16      	ldr	r3, [pc, #88]	; (800afbc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800af64:	2201      	movs	r2, #1
 800af66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800af68:	f7f9 fbec 	bl	8004744 <HAL_GetTick>
 800af6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af6e:	e008      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800af70:	f7f9 fbe8 	bl	8004744 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d901      	bls.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e09f      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af82:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2b01      	cmp	r3, #1
 800af92:	f040 8095 	bne.w	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800af96:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800af9c:	f7f9 fbd2 	bl	8004744 <HAL_GetTick>
 800afa0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800afa2:	e00f      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800afa4:	f7f9 fbce 	bl	8004744 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d908      	bls.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e085      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800afb6:	bf00      	nop
 800afb8:	40023800 	.word	0x40023800
 800afbc:	42470068 	.word	0x42470068
 800afc0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800afc4:	4b41      	ldr	r3, [pc, #260]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afd0:	d0e8      	beq.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d003      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d009      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d02b      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d127      	bne.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800affa:	4b34      	ldr	r3, [pc, #208]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800affc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b000:	0c1b      	lsrs	r3, r3, #16
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	3301      	adds	r3, #1
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	019b      	lsls	r3, r3, #6
 800b016:	431a      	orrs	r2, r3
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	085b      	lsrs	r3, r3, #1
 800b01c:	3b01      	subs	r3, #1
 800b01e:	041b      	lsls	r3, r3, #16
 800b020:	431a      	orrs	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	061b      	lsls	r3, r3, #24
 800b028:	4928      	ldr	r1, [pc, #160]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b030:	4b26      	ldr	r3, [pc, #152]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b036:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	3b01      	subs	r3, #1
 800b040:	021b      	lsls	r3, r3, #8
 800b042:	4922      	ldr	r1, [pc, #136]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b044:	4313      	orrs	r3, r2
 800b046:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b052:	2b00      	cmp	r3, #0
 800b054:	d01d      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b05e:	d118      	bne.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b060:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b066:	0e1b      	lsrs	r3, r3, #24
 800b068:	f003 030f 	and.w	r3, r3, #15
 800b06c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	699a      	ldr	r2, [r3, #24]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	019b      	lsls	r3, r3, #6
 800b078:	431a      	orrs	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	085b      	lsrs	r3, r3, #1
 800b080:	3b01      	subs	r3, #1
 800b082:	041b      	lsls	r3, r3, #16
 800b084:	431a      	orrs	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	061b      	lsls	r3, r3, #24
 800b08a:	4910      	ldr	r1, [pc, #64]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b094:	2201      	movs	r2, #1
 800b096:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b098:	f7f9 fb54 	bl	8004744 <HAL_GetTick>
 800b09c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b09e:	e008      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b0a0:	f7f9 fb50 	bl	8004744 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e007      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0b2:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0be:	d1ef      	bne.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3730      	adds	r7, #48	; 0x30
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	42470070 	.word	0x42470070

0800b0d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0d8:	b088      	sub	sp, #32
 800b0da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0f0:	4bce      	ldr	r3, [pc, #824]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	f003 030c 	and.w	r3, r3, #12
 800b0f8:	2b0c      	cmp	r3, #12
 800b0fa:	f200 818d 	bhi.w	800b418 <HAL_RCC_GetSysClockFreq+0x344>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <HAL_RCC_GetSysClockFreq+0x30>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b139 	.word	0x0800b139
 800b108:	0800b419 	.word	0x0800b419
 800b10c:	0800b419 	.word	0x0800b419
 800b110:	0800b419 	.word	0x0800b419
 800b114:	0800b13f 	.word	0x0800b13f
 800b118:	0800b419 	.word	0x0800b419
 800b11c:	0800b419 	.word	0x0800b419
 800b120:	0800b419 	.word	0x0800b419
 800b124:	0800b145 	.word	0x0800b145
 800b128:	0800b419 	.word	0x0800b419
 800b12c:	0800b419 	.word	0x0800b419
 800b130:	0800b419 	.word	0x0800b419
 800b134:	0800b2b9 	.word	0x0800b2b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b138:	4bbd      	ldr	r3, [pc, #756]	; (800b430 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b13a:	61bb      	str	r3, [r7, #24]
       break;
 800b13c:	e16f      	b.n	800b41e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b13e:	4bbd      	ldr	r3, [pc, #756]	; (800b434 <HAL_RCC_GetSysClockFreq+0x360>)
 800b140:	61bb      	str	r3, [r7, #24]
      break;
 800b142:	e16c      	b.n	800b41e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b144:	4bb9      	ldr	r3, [pc, #740]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b14c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b14e:	4bb7      	ldr	r3, [pc, #732]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d053      	beq.n	800b202 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b15a:	4bb4      	ldr	r3, [pc, #720]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	099b      	lsrs	r3, r3, #6
 800b160:	461a      	mov	r2, r3
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b16a:	f04f 0100 	mov.w	r1, #0
 800b16e:	ea02 0400 	and.w	r4, r2, r0
 800b172:	603c      	str	r4, [r7, #0]
 800b174:	400b      	ands	r3, r1
 800b176:	607b      	str	r3, [r7, #4]
 800b178:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b17c:	4620      	mov	r0, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	014b      	lsls	r3, r1, #5
 800b18a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b18e:	0142      	lsls	r2, r0, #5
 800b190:	4610      	mov	r0, r2
 800b192:	4619      	mov	r1, r3
 800b194:	4623      	mov	r3, r4
 800b196:	1ac0      	subs	r0, r0, r3
 800b198:	462b      	mov	r3, r5
 800b19a:	eb61 0103 	sbc.w	r1, r1, r3
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	f04f 0300 	mov.w	r3, #0
 800b1a6:	018b      	lsls	r3, r1, #6
 800b1a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b1ac:	0182      	lsls	r2, r0, #6
 800b1ae:	1a12      	subs	r2, r2, r0
 800b1b0:	eb63 0301 	sbc.w	r3, r3, r1
 800b1b4:	f04f 0000 	mov.w	r0, #0
 800b1b8:	f04f 0100 	mov.w	r1, #0
 800b1bc:	00d9      	lsls	r1, r3, #3
 800b1be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b1c2:	00d0      	lsls	r0, r2, #3
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	1852      	adds	r2, r2, r1
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	eb43 0101 	adc.w	r1, r3, r1
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	f04f 0000 	mov.w	r0, #0
 800b1d8:	f04f 0100 	mov.w	r1, #0
 800b1dc:	0259      	lsls	r1, r3, #9
 800b1de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b1e2:	0250      	lsls	r0, r2, #9
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f04f 0300 	mov.w	r3, #0
 800b1f4:	f7f5 f806 	bl	8000204 <__aeabi_uldivmod>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	e04c      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b202:	4b8a      	ldr	r3, [pc, #552]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	099b      	lsrs	r3, r3, #6
 800b208:	461a      	mov	r2, r3
 800b20a:	f04f 0300 	mov.w	r3, #0
 800b20e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b212:	f04f 0100 	mov.w	r1, #0
 800b216:	ea02 0a00 	and.w	sl, r2, r0
 800b21a:	ea03 0b01 	and.w	fp, r3, r1
 800b21e:	4650      	mov	r0, sl
 800b220:	4659      	mov	r1, fp
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	014b      	lsls	r3, r1, #5
 800b22c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b230:	0142      	lsls	r2, r0, #5
 800b232:	4610      	mov	r0, r2
 800b234:	4619      	mov	r1, r3
 800b236:	ebb0 000a 	subs.w	r0, r0, sl
 800b23a:	eb61 010b 	sbc.w	r1, r1, fp
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	f04f 0300 	mov.w	r3, #0
 800b246:	018b      	lsls	r3, r1, #6
 800b248:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b24c:	0182      	lsls	r2, r0, #6
 800b24e:	1a12      	subs	r2, r2, r0
 800b250:	eb63 0301 	sbc.w	r3, r3, r1
 800b254:	f04f 0000 	mov.w	r0, #0
 800b258:	f04f 0100 	mov.w	r1, #0
 800b25c:	00d9      	lsls	r1, r3, #3
 800b25e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b262:	00d0      	lsls	r0, r2, #3
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	eb12 020a 	adds.w	r2, r2, sl
 800b26c:	eb43 030b 	adc.w	r3, r3, fp
 800b270:	f04f 0000 	mov.w	r0, #0
 800b274:	f04f 0100 	mov.w	r1, #0
 800b278:	0299      	lsls	r1, r3, #10
 800b27a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b27e:	0290      	lsls	r0, r2, #10
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4610      	mov	r0, r2
 800b286:	4619      	mov	r1, r3
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f04f 0300 	mov.w	r3, #0
 800b290:	f7f4 ffb8 	bl	8000204 <__aeabi_uldivmod>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	4613      	mov	r3, r2
 800b29a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b29c:	4b63      	ldr	r3, [pc, #396]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	0c1b      	lsrs	r3, r3, #16
 800b2a2:	f003 0303 	and.w	r3, r3, #3
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b4:	61bb      	str	r3, [r7, #24]
      break;
 800b2b6:	e0b2      	b.n	800b41e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b2b8:	4b5c      	ldr	r3, [pc, #368]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b2c2:	4b5a      	ldr	r3, [pc, #360]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d04d      	beq.n	800b36a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2ce:	4b57      	ldr	r3, [pc, #348]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	099b      	lsrs	r3, r3, #6
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	f04f 0300 	mov.w	r3, #0
 800b2da:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b2de:	f04f 0100 	mov.w	r1, #0
 800b2e2:	ea02 0800 	and.w	r8, r2, r0
 800b2e6:	ea03 0901 	and.w	r9, r3, r1
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f04f 0200 	mov.w	r2, #0
 800b2f2:	f04f 0300 	mov.w	r3, #0
 800b2f6:	014b      	lsls	r3, r1, #5
 800b2f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b2fc:	0142      	lsls	r2, r0, #5
 800b2fe:	4610      	mov	r0, r2
 800b300:	4619      	mov	r1, r3
 800b302:	ebb0 0008 	subs.w	r0, r0, r8
 800b306:	eb61 0109 	sbc.w	r1, r1, r9
 800b30a:	f04f 0200 	mov.w	r2, #0
 800b30e:	f04f 0300 	mov.w	r3, #0
 800b312:	018b      	lsls	r3, r1, #6
 800b314:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b318:	0182      	lsls	r2, r0, #6
 800b31a:	1a12      	subs	r2, r2, r0
 800b31c:	eb63 0301 	sbc.w	r3, r3, r1
 800b320:	f04f 0000 	mov.w	r0, #0
 800b324:	f04f 0100 	mov.w	r1, #0
 800b328:	00d9      	lsls	r1, r3, #3
 800b32a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b32e:	00d0      	lsls	r0, r2, #3
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	eb12 0208 	adds.w	r2, r2, r8
 800b338:	eb43 0309 	adc.w	r3, r3, r9
 800b33c:	f04f 0000 	mov.w	r0, #0
 800b340:	f04f 0100 	mov.w	r1, #0
 800b344:	0259      	lsls	r1, r3, #9
 800b346:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b34a:	0250      	lsls	r0, r2, #9
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4610      	mov	r0, r2
 800b352:	4619      	mov	r1, r3
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	461a      	mov	r2, r3
 800b358:	f04f 0300 	mov.w	r3, #0
 800b35c:	f7f4 ff52 	bl	8000204 <__aeabi_uldivmod>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	4613      	mov	r3, r2
 800b366:	61fb      	str	r3, [r7, #28]
 800b368:	e04a      	b.n	800b400 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b36a:	4b30      	ldr	r3, [pc, #192]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	099b      	lsrs	r3, r3, #6
 800b370:	461a      	mov	r2, r3
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b37a:	f04f 0100 	mov.w	r1, #0
 800b37e:	ea02 0400 	and.w	r4, r2, r0
 800b382:	ea03 0501 	and.w	r5, r3, r1
 800b386:	4620      	mov	r0, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	f04f 0200 	mov.w	r2, #0
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	014b      	lsls	r3, r1, #5
 800b394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b398:	0142      	lsls	r2, r0, #5
 800b39a:	4610      	mov	r0, r2
 800b39c:	4619      	mov	r1, r3
 800b39e:	1b00      	subs	r0, r0, r4
 800b3a0:	eb61 0105 	sbc.w	r1, r1, r5
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	018b      	lsls	r3, r1, #6
 800b3ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b3b2:	0182      	lsls	r2, r0, #6
 800b3b4:	1a12      	subs	r2, r2, r0
 800b3b6:	eb63 0301 	sbc.w	r3, r3, r1
 800b3ba:	f04f 0000 	mov.w	r0, #0
 800b3be:	f04f 0100 	mov.w	r1, #0
 800b3c2:	00d9      	lsls	r1, r3, #3
 800b3c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3c8:	00d0      	lsls	r0, r2, #3
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	1912      	adds	r2, r2, r4
 800b3d0:	eb45 0303 	adc.w	r3, r5, r3
 800b3d4:	f04f 0000 	mov.w	r0, #0
 800b3d8:	f04f 0100 	mov.w	r1, #0
 800b3dc:	0299      	lsls	r1, r3, #10
 800b3de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b3e2:	0290      	lsls	r0, r2, #10
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f04f 0300 	mov.w	r3, #0
 800b3f4:	f7f4 ff06 	bl	8000204 <__aeabi_uldivmod>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b400:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <HAL_RCC_GetSysClockFreq+0x358>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	0f1b      	lsrs	r3, r3, #28
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	fbb2 f3f3 	udiv	r3, r2, r3
 800b414:	61bb      	str	r3, [r7, #24]
      break;
 800b416:	e002      	b.n	800b41e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b418:	4b05      	ldr	r3, [pc, #20]	; (800b430 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b41a:	61bb      	str	r3, [r7, #24]
      break;
 800b41c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b41e:	69bb      	ldr	r3, [r7, #24]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3720      	adds	r7, #32
 800b424:	46bd      	mov	sp, r7
 800b426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b42a:	bf00      	nop
 800b42c:	40023800 	.word	0x40023800
 800b430:	00f42400 	.word	0x00f42400
 800b434:	007a1200 	.word	0x007a1200

0800b438 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e28d      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 8083 	beq.w	800b55e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b458:	4b94      	ldr	r3, [pc, #592]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 030c 	and.w	r3, r3, #12
 800b460:	2b04      	cmp	r3, #4
 800b462:	d019      	beq.n	800b498 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b464:	4b91      	ldr	r3, [pc, #580]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d106      	bne.n	800b47e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b470:	4b8e      	ldr	r3, [pc, #568]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b47c:	d00c      	beq.n	800b498 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b47e:	4b8b      	ldr	r3, [pc, #556]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b486:	2b0c      	cmp	r3, #12
 800b488:	d112      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b48a:	4b88      	ldr	r3, [pc, #544]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b496:	d10b      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b498:	4b84      	ldr	r3, [pc, #528]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d05b      	beq.n	800b55c <HAL_RCC_OscConfig+0x124>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d157      	bne.n	800b55c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e25a      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b8:	d106      	bne.n	800b4c8 <HAL_RCC_OscConfig+0x90>
 800b4ba:	4b7c      	ldr	r3, [pc, #496]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a7b      	ldr	r2, [pc, #492]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	e01d      	b.n	800b504 <HAL_RCC_OscConfig+0xcc>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4d0:	d10c      	bne.n	800b4ec <HAL_RCC_OscConfig+0xb4>
 800b4d2:	4b76      	ldr	r3, [pc, #472]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a75      	ldr	r2, [pc, #468]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	4b73      	ldr	r3, [pc, #460]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a72      	ldr	r2, [pc, #456]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	e00b      	b.n	800b504 <HAL_RCC_OscConfig+0xcc>
 800b4ec:	4b6f      	ldr	r3, [pc, #444]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a6e      	ldr	r2, [pc, #440]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	4b6c      	ldr	r3, [pc, #432]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a6b      	ldr	r2, [pc, #428]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b4fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d013      	beq.n	800b534 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50c:	f7f9 f91a 	bl	8004744 <HAL_GetTick>
 800b510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b512:	e008      	b.n	800b526 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b514:	f7f9 f916 	bl	8004744 <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2b64      	cmp	r3, #100	; 0x64
 800b520:	d901      	bls.n	800b526 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e21f      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b526:	4b61      	ldr	r3, [pc, #388]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0f0      	beq.n	800b514 <HAL_RCC_OscConfig+0xdc>
 800b532:	e014      	b.n	800b55e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b534:	f7f9 f906 	bl	8004744 <HAL_GetTick>
 800b538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b53a:	e008      	b.n	800b54e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b53c:	f7f9 f902 	bl	8004744 <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	2b64      	cmp	r3, #100	; 0x64
 800b548:	d901      	bls.n	800b54e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e20b      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b54e:	4b57      	ldr	r3, [pc, #348]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1f0      	bne.n	800b53c <HAL_RCC_OscConfig+0x104>
 800b55a:	e000      	b.n	800b55e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b55c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	2b00      	cmp	r3, #0
 800b568:	d06f      	beq.n	800b64a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b56a:	4b50      	ldr	r3, [pc, #320]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	f003 030c 	and.w	r3, r3, #12
 800b572:	2b00      	cmp	r3, #0
 800b574:	d017      	beq.n	800b5a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b576:	4b4d      	ldr	r3, [pc, #308]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b57e:	2b08      	cmp	r3, #8
 800b580:	d105      	bne.n	800b58e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b582:	4b4a      	ldr	r3, [pc, #296]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00b      	beq.n	800b5a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b58e:	4b47      	ldr	r3, [pc, #284]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b596:	2b0c      	cmp	r3, #12
 800b598:	d11c      	bne.n	800b5d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b59a:	4b44      	ldr	r3, [pc, #272]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d116      	bne.n	800b5d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5a6:	4b41      	ldr	r3, [pc, #260]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d005      	beq.n	800b5be <HAL_RCC_OscConfig+0x186>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d001      	beq.n	800b5be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e1d3      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5be:	4b3b      	ldr	r3, [pc, #236]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	4937      	ldr	r1, [pc, #220]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5d2:	e03a      	b.n	800b64a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d020      	beq.n	800b61e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5dc:	4b34      	ldr	r3, [pc, #208]	; (800b6b0 <HAL_RCC_OscConfig+0x278>)
 800b5de:	2201      	movs	r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e2:	f7f9 f8af 	bl	8004744 <HAL_GetTick>
 800b5e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5e8:	e008      	b.n	800b5fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5ea:	f7f9 f8ab 	bl	8004744 <HAL_GetTick>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d901      	bls.n	800b5fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e1b4      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5fc:	4b2b      	ldr	r3, [pc, #172]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0f0      	beq.n	800b5ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b608:	4b28      	ldr	r3, [pc, #160]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	4925      	ldr	r1, [pc, #148]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b618:	4313      	orrs	r3, r2
 800b61a:	600b      	str	r3, [r1, #0]
 800b61c:	e015      	b.n	800b64a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b61e:	4b24      	ldr	r3, [pc, #144]	; (800b6b0 <HAL_RCC_OscConfig+0x278>)
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b624:	f7f9 f88e 	bl	8004744 <HAL_GetTick>
 800b628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b62a:	e008      	b.n	800b63e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b62c:	f7f9 f88a 	bl	8004744 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	2b02      	cmp	r3, #2
 800b638:	d901      	bls.n	800b63e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e193      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b63e:	4b1b      	ldr	r3, [pc, #108]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1f0      	bne.n	800b62c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0308 	and.w	r3, r3, #8
 800b652:	2b00      	cmp	r3, #0
 800b654:	d036      	beq.n	800b6c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d016      	beq.n	800b68c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b65e:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <HAL_RCC_OscConfig+0x27c>)
 800b660:	2201      	movs	r2, #1
 800b662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b664:	f7f9 f86e 	bl	8004744 <HAL_GetTick>
 800b668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b66a:	e008      	b.n	800b67e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b66c:	f7f9 f86a 	bl	8004744 <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b02      	cmp	r3, #2
 800b678:	d901      	bls.n	800b67e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e173      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b67e:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <HAL_RCC_OscConfig+0x274>)
 800b680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b682:	f003 0302 	and.w	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0f0      	beq.n	800b66c <HAL_RCC_OscConfig+0x234>
 800b68a:	e01b      	b.n	800b6c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b68c:	4b09      	ldr	r3, [pc, #36]	; (800b6b4 <HAL_RCC_OscConfig+0x27c>)
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b692:	f7f9 f857 	bl	8004744 <HAL_GetTick>
 800b696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b698:	e00e      	b.n	800b6b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b69a:	f7f9 f853 	bl	8004744 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d907      	bls.n	800b6b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e15c      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
 800b6ac:	40023800 	.word	0x40023800
 800b6b0:	42470000 	.word	0x42470000
 800b6b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6b8:	4b8a      	ldr	r3, [pc, #552]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1ea      	bne.n	800b69a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 8097 	beq.w	800b800 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6d6:	4b83      	ldr	r3, [pc, #524]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10f      	bne.n	800b702 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60bb      	str	r3, [r7, #8]
 800b6e6:	4b7f      	ldr	r3, [pc, #508]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	4a7e      	ldr	r2, [pc, #504]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b6ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f0:	6413      	str	r3, [r2, #64]	; 0x40
 800b6f2:	4b7c      	ldr	r3, [pc, #496]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6fa:	60bb      	str	r3, [r7, #8]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6fe:	2301      	movs	r3, #1
 800b700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b702:	4b79      	ldr	r3, [pc, #484]	; (800b8e8 <HAL_RCC_OscConfig+0x4b0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d118      	bne.n	800b740 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b70e:	4b76      	ldr	r3, [pc, #472]	; (800b8e8 <HAL_RCC_OscConfig+0x4b0>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a75      	ldr	r2, [pc, #468]	; (800b8e8 <HAL_RCC_OscConfig+0x4b0>)
 800b714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b71a:	f7f9 f813 	bl	8004744 <HAL_GetTick>
 800b71e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b720:	e008      	b.n	800b734 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b722:	f7f9 f80f 	bl	8004744 <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d901      	bls.n	800b734 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	e118      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b734:	4b6c      	ldr	r3, [pc, #432]	; (800b8e8 <HAL_RCC_OscConfig+0x4b0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0f0      	beq.n	800b722 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d106      	bne.n	800b756 <HAL_RCC_OscConfig+0x31e>
 800b748:	4b66      	ldr	r3, [pc, #408]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b74c:	4a65      	ldr	r2, [pc, #404]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b74e:	f043 0301 	orr.w	r3, r3, #1
 800b752:	6713      	str	r3, [r2, #112]	; 0x70
 800b754:	e01c      	b.n	800b790 <HAL_RCC_OscConfig+0x358>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d10c      	bne.n	800b778 <HAL_RCC_OscConfig+0x340>
 800b75e:	4b61      	ldr	r3, [pc, #388]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b762:	4a60      	ldr	r2, [pc, #384]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b764:	f043 0304 	orr.w	r3, r3, #4
 800b768:	6713      	str	r3, [r2, #112]	; 0x70
 800b76a:	4b5e      	ldr	r3, [pc, #376]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76e:	4a5d      	ldr	r2, [pc, #372]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b770:	f043 0301 	orr.w	r3, r3, #1
 800b774:	6713      	str	r3, [r2, #112]	; 0x70
 800b776:	e00b      	b.n	800b790 <HAL_RCC_OscConfig+0x358>
 800b778:	4b5a      	ldr	r3, [pc, #360]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77c:	4a59      	ldr	r2, [pc, #356]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	6713      	str	r3, [r2, #112]	; 0x70
 800b784:	4b57      	ldr	r3, [pc, #348]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b788:	4a56      	ldr	r2, [pc, #344]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b78a:	f023 0304 	bic.w	r3, r3, #4
 800b78e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d015      	beq.n	800b7c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b798:	f7f8 ffd4 	bl	8004744 <HAL_GetTick>
 800b79c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b79e:	e00a      	b.n	800b7b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7a0:	f7f8 ffd0 	bl	8004744 <HAL_GetTick>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d901      	bls.n	800b7b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e0d7      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7b6:	4b4b      	ldr	r3, [pc, #300]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ba:	f003 0302 	and.w	r3, r3, #2
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0ee      	beq.n	800b7a0 <HAL_RCC_OscConfig+0x368>
 800b7c2:	e014      	b.n	800b7ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7c4:	f7f8 ffbe 	bl	8004744 <HAL_GetTick>
 800b7c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7ca:	e00a      	b.n	800b7e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7cc:	f7f8 ffba 	bl	8004744 <HAL_GetTick>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d901      	bls.n	800b7e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e0c1      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7e2:	4b40      	ldr	r3, [pc, #256]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1ee      	bne.n	800b7cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d105      	bne.n	800b800 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7f4:	4b3b      	ldr	r3, [pc, #236]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f8:	4a3a      	ldr	r2, [pc, #232]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b7fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80ad 	beq.w	800b964 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b80a:	4b36      	ldr	r3, [pc, #216]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f003 030c 	and.w	r3, r3, #12
 800b812:	2b08      	cmp	r3, #8
 800b814:	d060      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d145      	bne.n	800b8aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b81e:	4b33      	ldr	r3, [pc, #204]	; (800b8ec <HAL_RCC_OscConfig+0x4b4>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b824:	f7f8 ff8e 	bl	8004744 <HAL_GetTick>
 800b828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b82a:	e008      	b.n	800b83e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b82c:	f7f8 ff8a 	bl	8004744 <HAL_GetTick>
 800b830:	4602      	mov	r2, r0
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	2b02      	cmp	r3, #2
 800b838:	d901      	bls.n	800b83e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e093      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b83e:	4b29      	ldr	r3, [pc, #164]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1f0      	bne.n	800b82c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	69da      	ldr	r2, [r3, #28]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	431a      	orrs	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	019b      	lsls	r3, r3, #6
 800b85a:	431a      	orrs	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	3b01      	subs	r3, #1
 800b864:	041b      	lsls	r3, r3, #16
 800b866:	431a      	orrs	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	061b      	lsls	r3, r3, #24
 800b86e:	431a      	orrs	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	491b      	ldr	r1, [pc, #108]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b878:	4313      	orrs	r3, r2
 800b87a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b87c:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <HAL_RCC_OscConfig+0x4b4>)
 800b87e:	2201      	movs	r2, #1
 800b880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b882:	f7f8 ff5f 	bl	8004744 <HAL_GetTick>
 800b886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b888:	e008      	b.n	800b89c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b88a:	f7f8 ff5b 	bl	8004744 <HAL_GetTick>
 800b88e:	4602      	mov	r2, r0
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	2b02      	cmp	r3, #2
 800b896:	d901      	bls.n	800b89c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b898:	2303      	movs	r3, #3
 800b89a:	e064      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b89c:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d0f0      	beq.n	800b88a <HAL_RCC_OscConfig+0x452>
 800b8a8:	e05c      	b.n	800b964 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8aa:	4b10      	ldr	r3, [pc, #64]	; (800b8ec <HAL_RCC_OscConfig+0x4b4>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8b0:	f7f8 ff48 	bl	8004744 <HAL_GetTick>
 800b8b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8b6:	e008      	b.n	800b8ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8b8:	f7f8 ff44 	bl	8004744 <HAL_GetTick>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d901      	bls.n	800b8ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e04d      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8ca:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <HAL_RCC_OscConfig+0x4ac>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1f0      	bne.n	800b8b8 <HAL_RCC_OscConfig+0x480>
 800b8d6:	e045      	b.n	800b964 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d107      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e040      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
 800b8e4:	40023800 	.word	0x40023800
 800b8e8:	40007000 	.word	0x40007000
 800b8ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b8f0:	4b1f      	ldr	r3, [pc, #124]	; (800b970 <HAL_RCC_OscConfig+0x538>)
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d030      	beq.n	800b960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b908:	429a      	cmp	r2, r3
 800b90a:	d129      	bne.n	800b960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b916:	429a      	cmp	r2, r3
 800b918:	d122      	bne.n	800b960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b920:	4013      	ands	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b928:	4293      	cmp	r3, r2
 800b92a:	d119      	bne.n	800b960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b936:	085b      	lsrs	r3, r3, #1
 800b938:	3b01      	subs	r3, #1
 800b93a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d10f      	bne.n	800b960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d107      	bne.n	800b960 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d001      	beq.n	800b964 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e000      	b.n	800b966 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40023800 	.word	0x40023800

0800b974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e041      	b.n	800ba0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7f8 fbf8 	bl	8004190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f000 fc9e 	bl	800c2f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d001      	beq.n	800ba2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e04e      	b.n	800baca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f042 0201 	orr.w	r2, r2, #1
 800ba42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a23      	ldr	r2, [pc, #140]	; (800bad8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d022      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba56:	d01d      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a1f      	ldr	r2, [pc, #124]	; (800badc <HAL_TIM_Base_Start_IT+0xc8>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d018      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a1e      	ldr	r2, [pc, #120]	; (800bae0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d013      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a1c      	ldr	r2, [pc, #112]	; (800bae4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d00e      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a1b      	ldr	r2, [pc, #108]	; (800bae8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d009      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a19      	ldr	r2, [pc, #100]	; (800baec <HAL_TIM_Base_Start_IT+0xd8>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d004      	beq.n	800ba94 <HAL_TIM_Base_Start_IT+0x80>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a18      	ldr	r2, [pc, #96]	; (800baf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d111      	bne.n	800bab8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2b06      	cmp	r3, #6
 800baa4:	d010      	beq.n	800bac8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f042 0201 	orr.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab6:	e007      	b.n	800bac8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f042 0201 	orr.w	r2, r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3714      	adds	r7, #20
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	40010000 	.word	0x40010000
 800badc:	40000400 	.word	0x40000400
 800bae0:	40000800 	.word	0x40000800
 800bae4:	40000c00 	.word	0x40000c00
 800bae8:	40010400 	.word	0x40010400
 800baec:	40014000 	.word	0x40014000
 800baf0:	40001800 	.word	0x40001800

0800baf4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f022 0201 	bic.w	r2, r2, #1
 800bb0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6a1a      	ldr	r2, [r3, #32]
 800bb12:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb16:	4013      	ands	r3, r2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10f      	bne.n	800bb3c <HAL_TIM_Base_Stop_IT+0x48>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6a1a      	ldr	r2, [r3, #32]
 800bb22:	f240 4344 	movw	r3, #1092	; 0x444
 800bb26:	4013      	ands	r3, r2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d107      	bne.n	800bb3c <HAL_TIM_Base_Stop_IT+0x48>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0201 	bic.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e041      	b.n	800bbe8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7f8 fb97 	bl	80042ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2202      	movs	r2, #2
 800bb82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f000 fbaf 	bl	800c2f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d109      	bne.n	800bc14 <HAL_TIM_PWM_Start+0x24>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	bf14      	ite	ne
 800bc0c:	2301      	movne	r3, #1
 800bc0e:	2300      	moveq	r3, #0
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	e022      	b.n	800bc5a <HAL_TIM_PWM_Start+0x6a>
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d109      	bne.n	800bc2e <HAL_TIM_PWM_Start+0x3e>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	bf14      	ite	ne
 800bc26:	2301      	movne	r3, #1
 800bc28:	2300      	moveq	r3, #0
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	e015      	b.n	800bc5a <HAL_TIM_PWM_Start+0x6a>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2b08      	cmp	r3, #8
 800bc32:	d109      	bne.n	800bc48 <HAL_TIM_PWM_Start+0x58>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	bf14      	ite	ne
 800bc40:	2301      	movne	r3, #1
 800bc42:	2300      	moveq	r3, #0
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	e008      	b.n	800bc5a <HAL_TIM_PWM_Start+0x6a>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	bf14      	ite	ne
 800bc54:	2301      	movne	r3, #1
 800bc56:	2300      	moveq	r3, #0
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e07c      	b.n	800bd5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d104      	bne.n	800bc72 <HAL_TIM_PWM_Start+0x82>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc70:	e013      	b.n	800bc9a <HAL_TIM_PWM_Start+0xaa>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d104      	bne.n	800bc82 <HAL_TIM_PWM_Start+0x92>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc80:	e00b      	b.n	800bc9a <HAL_TIM_PWM_Start+0xaa>
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b08      	cmp	r3, #8
 800bc86:	d104      	bne.n	800bc92 <HAL_TIM_PWM_Start+0xa2>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc90:	e003      	b.n	800bc9a <HAL_TIM_PWM_Start+0xaa>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2202      	movs	r2, #2
 800bc96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fe10 	bl	800c8c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <HAL_TIM_PWM_Start+0x174>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d004      	beq.n	800bcbc <HAL_TIM_PWM_Start+0xcc>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a2c      	ldr	r2, [pc, #176]	; (800bd68 <HAL_TIM_PWM_Start+0x178>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d101      	bne.n	800bcc0 <HAL_TIM_PWM_Start+0xd0>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e000      	b.n	800bcc2 <HAL_TIM_PWM_Start+0xd2>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d007      	beq.n	800bcd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a22      	ldr	r2, [pc, #136]	; (800bd64 <HAL_TIM_PWM_Start+0x174>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d022      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce8:	d01d      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a1f      	ldr	r2, [pc, #124]	; (800bd6c <HAL_TIM_PWM_Start+0x17c>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d018      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a1d      	ldr	r2, [pc, #116]	; (800bd70 <HAL_TIM_PWM_Start+0x180>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d013      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a1c      	ldr	r2, [pc, #112]	; (800bd74 <HAL_TIM_PWM_Start+0x184>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d00e      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a16      	ldr	r2, [pc, #88]	; (800bd68 <HAL_TIM_PWM_Start+0x178>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d009      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a18      	ldr	r2, [pc, #96]	; (800bd78 <HAL_TIM_PWM_Start+0x188>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d004      	beq.n	800bd26 <HAL_TIM_PWM_Start+0x136>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a16      	ldr	r2, [pc, #88]	; (800bd7c <HAL_TIM_PWM_Start+0x18c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d111      	bne.n	800bd4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f003 0307 	and.w	r3, r3, #7
 800bd30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2b06      	cmp	r3, #6
 800bd36:	d010      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f042 0201 	orr.w	r2, r2, #1
 800bd46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd48:	e007      	b.n	800bd5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f042 0201 	orr.w	r2, r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	40010000 	.word	0x40010000
 800bd68:	40010400 	.word	0x40010400
 800bd6c:	40000400 	.word	0x40000400
 800bd70:	40000800 	.word	0x40000800
 800bd74:	40000c00 	.word	0x40000c00
 800bd78:	40014000 	.word	0x40014000
 800bd7c:	40001800 	.word	0x40001800

0800bd80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	f003 0302 	and.w	r3, r3, #2
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d122      	bne.n	800bddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d11b      	bne.n	800bddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f06f 0202 	mvn.w	r2, #2
 800bdac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	f003 0303 	and.w	r3, r3, #3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fa77 	bl	800c2b6 <HAL_TIM_IC_CaptureCallback>
 800bdc8:	e005      	b.n	800bdd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa69 	bl	800c2a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa7a 	bl	800c2ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f003 0304 	and.w	r3, r3, #4
 800bde6:	2b04      	cmp	r3, #4
 800bde8:	d122      	bne.n	800be30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	f003 0304 	and.w	r3, r3, #4
 800bdf4:	2b04      	cmp	r3, #4
 800bdf6:	d11b      	bne.n	800be30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f06f 0204 	mvn.w	r2, #4
 800be00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2202      	movs	r2, #2
 800be06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	699b      	ldr	r3, [r3, #24]
 800be0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be12:	2b00      	cmp	r3, #0
 800be14:	d003      	beq.n	800be1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa4d 	bl	800c2b6 <HAL_TIM_IC_CaptureCallback>
 800be1c:	e005      	b.n	800be2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa3f 	bl	800c2a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fa50 	bl	800c2ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	f003 0308 	and.w	r3, r3, #8
 800be3a:	2b08      	cmp	r3, #8
 800be3c:	d122      	bne.n	800be84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	f003 0308 	and.w	r3, r3, #8
 800be48:	2b08      	cmp	r3, #8
 800be4a:	d11b      	bne.n	800be84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f06f 0208 	mvn.w	r2, #8
 800be54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2204      	movs	r2, #4
 800be5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	f003 0303 	and.w	r3, r3, #3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa23 	bl	800c2b6 <HAL_TIM_IC_CaptureCallback>
 800be70:	e005      	b.n	800be7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa15 	bl	800c2a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fa26 	bl	800c2ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	f003 0310 	and.w	r3, r3, #16
 800be8e:	2b10      	cmp	r3, #16
 800be90:	d122      	bne.n	800bed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	f003 0310 	and.w	r3, r3, #16
 800be9c:	2b10      	cmp	r3, #16
 800be9e:	d11b      	bne.n	800bed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f06f 0210 	mvn.w	r2, #16
 800bea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2208      	movs	r2, #8
 800beae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f9f9 	bl	800c2b6 <HAL_TIM_IC_CaptureCallback>
 800bec4:	e005      	b.n	800bed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f9eb 	bl	800c2a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f9fc 	bl	800c2ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d10e      	bne.n	800bf04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d107      	bne.n	800bf04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f06f 0201 	mvn.w	r2, #1
 800befc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7f6 ff14 	bl	8002d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf0e:	2b80      	cmp	r3, #128	; 0x80
 800bf10:	d10e      	bne.n	800bf30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1c:	2b80      	cmp	r3, #128	; 0x80
 800bf1e:	d107      	bne.n	800bf30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fdca 	bl	800cac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf3a:	2b40      	cmp	r3, #64	; 0x40
 800bf3c:	d10e      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf48:	2b40      	cmp	r3, #64	; 0x40
 800bf4a:	d107      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f9c1 	bl	800c2de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b20      	cmp	r3, #32
 800bf68:	d10e      	bne.n	800bf88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b20      	cmp	r3, #32
 800bf76:	d107      	bne.n	800bf88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f06f 0220 	mvn.w	r2, #32
 800bf80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fd94 	bl	800cab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d101      	bne.n	800bfae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bfaa:	2302      	movs	r3, #2
 800bfac:	e0ae      	b.n	800c10c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b0c      	cmp	r3, #12
 800bfba:	f200 809f 	bhi.w	800c0fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bfbe:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800bff9 	.word	0x0800bff9
 800bfc8:	0800c0fd 	.word	0x0800c0fd
 800bfcc:	0800c0fd 	.word	0x0800c0fd
 800bfd0:	0800c0fd 	.word	0x0800c0fd
 800bfd4:	0800c039 	.word	0x0800c039
 800bfd8:	0800c0fd 	.word	0x0800c0fd
 800bfdc:	0800c0fd 	.word	0x0800c0fd
 800bfe0:	0800c0fd 	.word	0x0800c0fd
 800bfe4:	0800c07b 	.word	0x0800c07b
 800bfe8:	0800c0fd 	.word	0x0800c0fd
 800bfec:	0800c0fd 	.word	0x0800c0fd
 800bff0:	0800c0fd 	.word	0x0800c0fd
 800bff4:	0800c0bb 	.word	0x0800c0bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68b9      	ldr	r1, [r7, #8]
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fa18 	bl	800c434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	699a      	ldr	r2, [r3, #24]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f042 0208 	orr.w	r2, r2, #8
 800c012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f022 0204 	bic.w	r2, r2, #4
 800c022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6999      	ldr	r1, [r3, #24]
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	691a      	ldr	r2, [r3, #16]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	430a      	orrs	r2, r1
 800c034:	619a      	str	r2, [r3, #24]
      break;
 800c036:	e064      	b.n	800c102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fa68 	bl	800c514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699a      	ldr	r2, [r3, #24]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	699a      	ldr	r2, [r3, #24]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6999      	ldr	r1, [r3, #24]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	021a      	lsls	r2, r3, #8
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	430a      	orrs	r2, r1
 800c076:	619a      	str	r2, [r3, #24]
      break;
 800c078:	e043      	b.n	800c102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fabd 	bl	800c600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	69da      	ldr	r2, [r3, #28]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f042 0208 	orr.w	r2, r2, #8
 800c094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f022 0204 	bic.w	r2, r2, #4
 800c0a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69d9      	ldr	r1, [r3, #28]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	691a      	ldr	r2, [r3, #16]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	61da      	str	r2, [r3, #28]
      break;
 800c0b8:	e023      	b.n	800c102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 fb11 	bl	800c6e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	69da      	ldr	r2, [r3, #28]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	69da      	ldr	r2, [r3, #28]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69d9      	ldr	r1, [r3, #28]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	021a      	lsls	r2, r3, #8
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	61da      	str	r2, [r3, #28]
      break;
 800c0fa:	e002      	b.n	800c102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <HAL_TIM_ConfigClockSource+0x1c>
 800c12c:	2302      	movs	r3, #2
 800c12e:	e0b4      	b.n	800c29a <HAL_TIM_ConfigClockSource+0x186>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2202      	movs	r2, #2
 800c13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c14e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c168:	d03e      	beq.n	800c1e8 <HAL_TIM_ConfigClockSource+0xd4>
 800c16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c16e:	f200 8087 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c176:	f000 8086 	beq.w	800c286 <HAL_TIM_ConfigClockSource+0x172>
 800c17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17e:	d87f      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c180:	2b70      	cmp	r3, #112	; 0x70
 800c182:	d01a      	beq.n	800c1ba <HAL_TIM_ConfigClockSource+0xa6>
 800c184:	2b70      	cmp	r3, #112	; 0x70
 800c186:	d87b      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c188:	2b60      	cmp	r3, #96	; 0x60
 800c18a:	d050      	beq.n	800c22e <HAL_TIM_ConfigClockSource+0x11a>
 800c18c:	2b60      	cmp	r3, #96	; 0x60
 800c18e:	d877      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c190:	2b50      	cmp	r3, #80	; 0x50
 800c192:	d03c      	beq.n	800c20e <HAL_TIM_ConfigClockSource+0xfa>
 800c194:	2b50      	cmp	r3, #80	; 0x50
 800c196:	d873      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c198:	2b40      	cmp	r3, #64	; 0x40
 800c19a:	d058      	beq.n	800c24e <HAL_TIM_ConfigClockSource+0x13a>
 800c19c:	2b40      	cmp	r3, #64	; 0x40
 800c19e:	d86f      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c1a0:	2b30      	cmp	r3, #48	; 0x30
 800c1a2:	d064      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x15a>
 800c1a4:	2b30      	cmp	r3, #48	; 0x30
 800c1a6:	d86b      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c1a8:	2b20      	cmp	r3, #32
 800c1aa:	d060      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x15a>
 800c1ac:	2b20      	cmp	r3, #32
 800c1ae:	d867      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d05c      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x15a>
 800c1b4:	2b10      	cmp	r3, #16
 800c1b6:	d05a      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x15a>
 800c1b8:	e062      	b.n	800c280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	6899      	ldr	r1, [r3, #8]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	f000 fb5d 	bl	800c888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	609a      	str	r2, [r3, #8]
      break;
 800c1e6:	e04f      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6818      	ldr	r0, [r3, #0]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	6899      	ldr	r1, [r3, #8]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f000 fb46 	bl	800c888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	689a      	ldr	r2, [r3, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c20a:	609a      	str	r2, [r3, #8]
      break;
 800c20c:	e03c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	6859      	ldr	r1, [r3, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	461a      	mov	r2, r3
 800c21c:	f000 faba 	bl	800c794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2150      	movs	r1, #80	; 0x50
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fb13 	bl	800c852 <TIM_ITRx_SetConfig>
      break;
 800c22c:	e02c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	6859      	ldr	r1, [r3, #4]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f000 fad9 	bl	800c7f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2160      	movs	r1, #96	; 0x60
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fb03 	bl	800c852 <TIM_ITRx_SetConfig>
      break;
 800c24c:	e01c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6859      	ldr	r1, [r3, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	461a      	mov	r2, r3
 800c25c:	f000 fa9a 	bl	800c794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2140      	movs	r1, #64	; 0x40
 800c266:	4618      	mov	r0, r3
 800c268:	f000 faf3 	bl	800c852 <TIM_ITRx_SetConfig>
      break;
 800c26c:	e00c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4619      	mov	r1, r3
 800c278:	4610      	mov	r0, r2
 800c27a:	f000 faea 	bl	800c852 <TIM_ITRx_SetConfig>
      break;
 800c27e:	e003      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	73fb      	strb	r3, [r7, #15]
      break;
 800c284:	e000      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2e6:	bf00      	nop
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a40      	ldr	r2, [pc, #256]	; (800c408 <TIM_Base_SetConfig+0x114>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d013      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c312:	d00f      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a3d      	ldr	r2, [pc, #244]	; (800c40c <TIM_Base_SetConfig+0x118>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d00b      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a3c      	ldr	r2, [pc, #240]	; (800c410 <TIM_Base_SetConfig+0x11c>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d007      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a3b      	ldr	r2, [pc, #236]	; (800c414 <TIM_Base_SetConfig+0x120>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d003      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a3a      	ldr	r2, [pc, #232]	; (800c418 <TIM_Base_SetConfig+0x124>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d108      	bne.n	800c346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c33a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	4313      	orrs	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a2f      	ldr	r2, [pc, #188]	; (800c408 <TIM_Base_SetConfig+0x114>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d02b      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c354:	d027      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a2c      	ldr	r2, [pc, #176]	; (800c40c <TIM_Base_SetConfig+0x118>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d023      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a2b      	ldr	r2, [pc, #172]	; (800c410 <TIM_Base_SetConfig+0x11c>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d01f      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a2a      	ldr	r2, [pc, #168]	; (800c414 <TIM_Base_SetConfig+0x120>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d01b      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a29      	ldr	r2, [pc, #164]	; (800c418 <TIM_Base_SetConfig+0x124>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d017      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a28      	ldr	r2, [pc, #160]	; (800c41c <TIM_Base_SetConfig+0x128>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d013      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a27      	ldr	r2, [pc, #156]	; (800c420 <TIM_Base_SetConfig+0x12c>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d00f      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a26      	ldr	r2, [pc, #152]	; (800c424 <TIM_Base_SetConfig+0x130>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d00b      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a25      	ldr	r2, [pc, #148]	; (800c428 <TIM_Base_SetConfig+0x134>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d007      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a24      	ldr	r2, [pc, #144]	; (800c42c <TIM_Base_SetConfig+0x138>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d003      	beq.n	800c3a6 <TIM_Base_SetConfig+0xb2>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a23      	ldr	r2, [pc, #140]	; (800c430 <TIM_Base_SetConfig+0x13c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d108      	bne.n	800c3b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a0a      	ldr	r2, [pc, #40]	; (800c408 <TIM_Base_SetConfig+0x114>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d003      	beq.n	800c3ec <TIM_Base_SetConfig+0xf8>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a0c      	ldr	r2, [pc, #48]	; (800c418 <TIM_Base_SetConfig+0x124>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d103      	bne.n	800c3f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	615a      	str	r2, [r3, #20]
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	40010000 	.word	0x40010000
 800c40c:	40000400 	.word	0x40000400
 800c410:	40000800 	.word	0x40000800
 800c414:	40000c00 	.word	0x40000c00
 800c418:	40010400 	.word	0x40010400
 800c41c:	40014000 	.word	0x40014000
 800c420:	40014400 	.word	0x40014400
 800c424:	40014800 	.word	0x40014800
 800c428:	40001800 	.word	0x40001800
 800c42c:	40001c00 	.word	0x40001c00
 800c430:	40002000 	.word	0x40002000

0800c434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c434:	b480      	push	{r7}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	f023 0201 	bic.w	r2, r3, #1
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f023 0303 	bic.w	r3, r3, #3
 800c46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	4313      	orrs	r3, r2
 800c474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	f023 0302 	bic.w	r3, r3, #2
 800c47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	4313      	orrs	r3, r2
 800c486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a20      	ldr	r2, [pc, #128]	; (800c50c <TIM_OC1_SetConfig+0xd8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d003      	beq.n	800c498 <TIM_OC1_SetConfig+0x64>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a1f      	ldr	r2, [pc, #124]	; (800c510 <TIM_OC1_SetConfig+0xdc>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d10c      	bne.n	800c4b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f023 0308 	bic.w	r3, r3, #8
 800c49e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f023 0304 	bic.w	r3, r3, #4
 800c4b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a15      	ldr	r2, [pc, #84]	; (800c50c <TIM_OC1_SetConfig+0xd8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d003      	beq.n	800c4c2 <TIM_OC1_SetConfig+0x8e>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a14      	ldr	r2, [pc, #80]	; (800c510 <TIM_OC1_SetConfig+0xdc>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d111      	bne.n	800c4e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	621a      	str	r2, [r3, #32]
}
 800c500:	bf00      	nop
 800c502:	371c      	adds	r7, #28
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	40010000 	.word	0x40010000
 800c510:	40010400 	.word	0x40010400

0800c514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c514:	b480      	push	{r7}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	f023 0210 	bic.w	r2, r3, #16
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	021b      	lsls	r3, r3, #8
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	4313      	orrs	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f023 0320 	bic.w	r3, r3, #32
 800c55e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	011b      	lsls	r3, r3, #4
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	4313      	orrs	r3, r2
 800c56a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a22      	ldr	r2, [pc, #136]	; (800c5f8 <TIM_OC2_SetConfig+0xe4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d003      	beq.n	800c57c <TIM_OC2_SetConfig+0x68>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a21      	ldr	r2, [pc, #132]	; (800c5fc <TIM_OC2_SetConfig+0xe8>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d10d      	bne.n	800c598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	011b      	lsls	r3, r3, #4
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a17      	ldr	r2, [pc, #92]	; (800c5f8 <TIM_OC2_SetConfig+0xe4>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d003      	beq.n	800c5a8 <TIM_OC2_SetConfig+0x94>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a16      	ldr	r2, [pc, #88]	; (800c5fc <TIM_OC2_SetConfig+0xe8>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d113      	bne.n	800c5d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	693a      	ldr	r2, [r7, #16]
 800c5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	697a      	ldr	r2, [r7, #20]
 800c5e8:	621a      	str	r2, [r3, #32]
}
 800c5ea:	bf00      	nop
 800c5ec:	371c      	adds	r7, #28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	40010000 	.word	0x40010000
 800c5fc:	40010400 	.word	0x40010400

0800c600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c600:	b480      	push	{r7}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c62e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f023 0303 	bic.w	r3, r3, #3
 800c636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	021b      	lsls	r3, r3, #8
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	4313      	orrs	r3, r2
 800c654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a21      	ldr	r2, [pc, #132]	; (800c6e0 <TIM_OC3_SetConfig+0xe0>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d003      	beq.n	800c666 <TIM_OC3_SetConfig+0x66>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a20      	ldr	r2, [pc, #128]	; (800c6e4 <TIM_OC3_SetConfig+0xe4>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d10d      	bne.n	800c682 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c66c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	021b      	lsls	r3, r3, #8
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	4313      	orrs	r3, r2
 800c678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a16      	ldr	r2, [pc, #88]	; (800c6e0 <TIM_OC3_SetConfig+0xe0>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d003      	beq.n	800c692 <TIM_OC3_SetConfig+0x92>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a15      	ldr	r2, [pc, #84]	; (800c6e4 <TIM_OC3_SetConfig+0xe4>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d113      	bne.n	800c6ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	011b      	lsls	r3, r3, #4
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	621a      	str	r2, [r3, #32]
}
 800c6d4:	bf00      	nop
 800c6d6:	371c      	adds	r7, #28
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400

0800c6e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	4313      	orrs	r3, r2
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	031b      	lsls	r3, r3, #12
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a12      	ldr	r2, [pc, #72]	; (800c78c <TIM_OC4_SetConfig+0xa4>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d003      	beq.n	800c750 <TIM_OC4_SetConfig+0x68>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a11      	ldr	r2, [pc, #68]	; (800c790 <TIM_OC4_SetConfig+0xa8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d109      	bne.n	800c764 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	695b      	ldr	r3, [r3, #20]
 800c75c:	019b      	lsls	r3, r3, #6
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4313      	orrs	r3, r2
 800c762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	621a      	str	r2, [r3, #32]
}
 800c77e:	bf00      	nop
 800c780:	371c      	adds	r7, #28
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	40010000 	.word	0x40010000
 800c790:	40010400 	.word	0x40010400

0800c794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c794:	b480      	push	{r7}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6a1b      	ldr	r3, [r3, #32]
 800c7a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	f023 0201 	bic.w	r2, r3, #1
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	699b      	ldr	r3, [r3, #24]
 800c7b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	011b      	lsls	r3, r3, #4
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	f023 030a 	bic.w	r3, r3, #10
 800c7d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7d2:	697a      	ldr	r2, [r7, #20]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	621a      	str	r2, [r3, #32]
}
 800c7e6:	bf00      	nop
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b087      	sub	sp, #28
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	f023 0210 	bic.w	r2, r3, #16
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c81c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	031b      	lsls	r3, r3, #12
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	4313      	orrs	r3, r2
 800c826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c82e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	011b      	lsls	r3, r3, #4
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	4313      	orrs	r3, r2
 800c838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	621a      	str	r2, [r3, #32]
}
 800c846:	bf00      	nop
 800c848:	371c      	adds	r7, #28
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4313      	orrs	r3, r2
 800c870:	f043 0307 	orr.w	r3, r3, #7
 800c874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	609a      	str	r2, [r3, #8]
}
 800c87c:	bf00      	nop
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	021a      	lsls	r2, r3, #8
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	609a      	str	r2, [r3, #8]
}
 800c8bc:	bf00      	nop
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	f003 031f 	and.w	r3, r3, #31
 800c8da:	2201      	movs	r2, #1
 800c8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6a1a      	ldr	r2, [r3, #32]
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	43db      	mvns	r3, r3
 800c8ea:	401a      	ands	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6a1a      	ldr	r2, [r3, #32]
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f003 031f 	and.w	r3, r3, #31
 800c8fa:	6879      	ldr	r1, [r7, #4]
 800c8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c900:	431a      	orrs	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
	...

0800c914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c924:	2b01      	cmp	r3, #1
 800c926:	d101      	bne.n	800c92c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c928:	2302      	movs	r3, #2
 800c92a:	e05a      	b.n	800c9e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a21      	ldr	r2, [pc, #132]	; (800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d022      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c978:	d01d      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a1d      	ldr	r2, [pc, #116]	; (800c9f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d018      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a1b      	ldr	r2, [pc, #108]	; (800c9f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d013      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a1a      	ldr	r2, [pc, #104]	; (800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d00e      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a18      	ldr	r2, [pc, #96]	; (800ca00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d009      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a17      	ldr	r2, [pc, #92]	; (800ca04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d004      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d10c      	bne.n	800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40000400 	.word	0x40000400
 800c9f8:	40000800 	.word	0x40000800
 800c9fc:	40000c00 	.word	0x40000c00
 800ca00:	40010400 	.word	0x40010400
 800ca04:	40014000 	.word	0x40014000
 800ca08:	40001800 	.word	0x40001800

0800ca0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d101      	bne.n	800ca28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca24:	2302      	movs	r3, #2
 800ca26:	e03d      	b.n	800caa4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cacc:	bf00      	nop
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cad8:	b084      	sub	sp, #16
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	f107 001c 	add.w	r0, r7, #28
 800cae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	2b01      	cmp	r3, #1
 800caee:	d122      	bne.n	800cb36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cb04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d105      	bne.n	800cb2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f001 fb16 	bl	800e15c <USB_CoreReset>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]
 800cb34:	e01a      	b.n	800cb6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f001 fb0a 	bl	800e15c <USB_CoreReset>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	639a      	str	r2, [r3, #56]	; 0x38
 800cb5e:	e005      	b.n	800cb6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d10b      	bne.n	800cb8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	f043 0206 	orr.w	r2, r3, #6
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	f043 0220 	orr.w	r2, r3, #32
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb96:	b004      	add	sp, #16
 800cb98:	4770      	bx	lr
	...

0800cb9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4613      	mov	r3, r2
 800cba8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d165      	bne.n	800cc7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	4a41      	ldr	r2, [pc, #260]	; (800ccb8 <USB_SetTurnaroundTime+0x11c>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d906      	bls.n	800cbc6 <USB_SetTurnaroundTime+0x2a>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	4a40      	ldr	r2, [pc, #256]	; (800ccbc <USB_SetTurnaroundTime+0x120>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d202      	bcs.n	800cbc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cbc0:	230f      	movs	r3, #15
 800cbc2:	617b      	str	r3, [r7, #20]
 800cbc4:	e062      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	4a3c      	ldr	r2, [pc, #240]	; (800ccbc <USB_SetTurnaroundTime+0x120>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d306      	bcc.n	800cbdc <USB_SetTurnaroundTime+0x40>
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	4a3b      	ldr	r2, [pc, #236]	; (800ccc0 <USB_SetTurnaroundTime+0x124>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d202      	bcs.n	800cbdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cbd6:	230e      	movs	r3, #14
 800cbd8:	617b      	str	r3, [r7, #20]
 800cbda:	e057      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	4a38      	ldr	r2, [pc, #224]	; (800ccc0 <USB_SetTurnaroundTime+0x124>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d306      	bcc.n	800cbf2 <USB_SetTurnaroundTime+0x56>
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	4a37      	ldr	r2, [pc, #220]	; (800ccc4 <USB_SetTurnaroundTime+0x128>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d202      	bcs.n	800cbf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cbec:	230d      	movs	r3, #13
 800cbee:	617b      	str	r3, [r7, #20]
 800cbf0:	e04c      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	4a33      	ldr	r2, [pc, #204]	; (800ccc4 <USB_SetTurnaroundTime+0x128>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d306      	bcc.n	800cc08 <USB_SetTurnaroundTime+0x6c>
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	4a32      	ldr	r2, [pc, #200]	; (800ccc8 <USB_SetTurnaroundTime+0x12c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d802      	bhi.n	800cc08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cc02:	230c      	movs	r3, #12
 800cc04:	617b      	str	r3, [r7, #20]
 800cc06:	e041      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4a2f      	ldr	r2, [pc, #188]	; (800ccc8 <USB_SetTurnaroundTime+0x12c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d906      	bls.n	800cc1e <USB_SetTurnaroundTime+0x82>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	4a2e      	ldr	r2, [pc, #184]	; (800cccc <USB_SetTurnaroundTime+0x130>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d802      	bhi.n	800cc1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cc18:	230b      	movs	r3, #11
 800cc1a:	617b      	str	r3, [r7, #20]
 800cc1c:	e036      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <USB_SetTurnaroundTime+0x130>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d906      	bls.n	800cc34 <USB_SetTurnaroundTime+0x98>
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	4a29      	ldr	r2, [pc, #164]	; (800ccd0 <USB_SetTurnaroundTime+0x134>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d802      	bhi.n	800cc34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cc2e:	230a      	movs	r3, #10
 800cc30:	617b      	str	r3, [r7, #20]
 800cc32:	e02b      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	4a26      	ldr	r2, [pc, #152]	; (800ccd0 <USB_SetTurnaroundTime+0x134>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d906      	bls.n	800cc4a <USB_SetTurnaroundTime+0xae>
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	4a25      	ldr	r2, [pc, #148]	; (800ccd4 <USB_SetTurnaroundTime+0x138>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d202      	bcs.n	800cc4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cc44:	2309      	movs	r3, #9
 800cc46:	617b      	str	r3, [r7, #20]
 800cc48:	e020      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	4a21      	ldr	r2, [pc, #132]	; (800ccd4 <USB_SetTurnaroundTime+0x138>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d306      	bcc.n	800cc60 <USB_SetTurnaroundTime+0xc4>
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	4a20      	ldr	r2, [pc, #128]	; (800ccd8 <USB_SetTurnaroundTime+0x13c>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d802      	bhi.n	800cc60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cc5a:	2308      	movs	r3, #8
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	e015      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	4a1d      	ldr	r2, [pc, #116]	; (800ccd8 <USB_SetTurnaroundTime+0x13c>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d906      	bls.n	800cc76 <USB_SetTurnaroundTime+0xda>
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	4a1c      	ldr	r2, [pc, #112]	; (800ccdc <USB_SetTurnaroundTime+0x140>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d202      	bcs.n	800cc76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cc70:	2307      	movs	r3, #7
 800cc72:	617b      	str	r3, [r7, #20]
 800cc74:	e00a      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cc76:	2306      	movs	r3, #6
 800cc78:	617b      	str	r3, [r7, #20]
 800cc7a:	e007      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cc7c:	79fb      	ldrb	r3, [r7, #7]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d102      	bne.n	800cc88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cc82:	2309      	movs	r3, #9
 800cc84:	617b      	str	r3, [r7, #20]
 800cc86:	e001      	b.n	800cc8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cc88:	2309      	movs	r3, #9
 800cc8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	029b      	lsls	r3, r3, #10
 800cca0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cca4:	431a      	orrs	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	371c      	adds	r7, #28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr
 800ccb8:	00d8acbf 	.word	0x00d8acbf
 800ccbc:	00e4e1c0 	.word	0x00e4e1c0
 800ccc0:	00f42400 	.word	0x00f42400
 800ccc4:	01067380 	.word	0x01067380
 800ccc8:	011a499f 	.word	0x011a499f
 800cccc:	01312cff 	.word	0x01312cff
 800ccd0:	014ca43f 	.word	0x014ca43f
 800ccd4:	016e3600 	.word	0x016e3600
 800ccd8:	01a6ab1f 	.word	0x01a6ab1f
 800ccdc:	01e84800 	.word	0x01e84800

0800cce0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f043 0201 	orr.w	r2, r3, #1
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b083      	sub	sp, #12
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	f023 0201 	bic.w	r2, r3, #1
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d115      	bne.n	800cd72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cd52:	2001      	movs	r0, #1
 800cd54:	f7f7 fd02 	bl	800475c <HAL_Delay>
      ms++;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f001 f96c 	bl	800e03c <USB_GetMode>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d01e      	beq.n	800cda8 <USB_SetCurrentMode+0x84>
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b31      	cmp	r3, #49	; 0x31
 800cd6e:	d9f0      	bls.n	800cd52 <USB_SetCurrentMode+0x2e>
 800cd70:	e01a      	b.n	800cda8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cd72:	78fb      	ldrb	r3, [r7, #3]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d115      	bne.n	800cda4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cd84:	2001      	movs	r0, #1
 800cd86:	f7f7 fce9 	bl	800475c <HAL_Delay>
      ms++;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 f953 	bl	800e03c <USB_GetMode>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d005      	beq.n	800cda8 <USB_SetCurrentMode+0x84>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b31      	cmp	r3, #49	; 0x31
 800cda0:	d9f0      	bls.n	800cd84 <USB_SetCurrentMode+0x60>
 800cda2:	e001      	b.n	800cda8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e005      	b.n	800cdb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b32      	cmp	r3, #50	; 0x32
 800cdac:	d101      	bne.n	800cdb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e000      	b.n	800cdb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b086      	sub	sp, #24
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cdca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	613b      	str	r3, [r7, #16]
 800cdda:	e009      	b.n	800cdf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	3340      	adds	r3, #64	; 0x40
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	2200      	movs	r2, #0
 800cde8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	3301      	adds	r3, #1
 800cdee:	613b      	str	r3, [r7, #16]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	2b0e      	cmp	r3, #14
 800cdf4:	d9f2      	bls.n	800cddc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cdf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d11c      	bne.n	800ce36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce0a:	f043 0302 	orr.w	r3, r3, #2
 800ce0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e005      	b.n	800ce42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce48:	461a      	mov	r2, r3
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce54:	4619      	mov	r1, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	680b      	ldr	r3, [r1, #0]
 800ce60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d10c      	bne.n	800ce82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d104      	bne.n	800ce78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ce6e:	2100      	movs	r1, #0
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f945 	bl	800d100 <USB_SetDevSpeed>
 800ce76:	e008      	b.n	800ce8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ce78:	2101      	movs	r1, #1
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f940 	bl	800d100 <USB_SetDevSpeed>
 800ce80:	e003      	b.n	800ce8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ce82:	2103      	movs	r1, #3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f93b 	bl	800d100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce8a:	2110      	movs	r1, #16
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f8f3 	bl	800d078 <USB_FlushTxFifo>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d001      	beq.n	800ce9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f90f 	bl	800d0c0 <USB_FlushRxFifo>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cebe:	461a      	mov	r2, r3
 800cec0:	2300      	movs	r3, #0
 800cec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceca:	461a      	mov	r2, r3
 800cecc:	2300      	movs	r3, #0
 800cece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	e043      	b.n	800cf5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	015a      	lsls	r2, r3, #5
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	4413      	add	r3, r2
 800cede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ceec:	d118      	bne.n	800cf20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf00:	461a      	mov	r2, r3
 800cf02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	e013      	b.n	800cf32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf16:	461a      	mov	r2, r3
 800cf18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf1c:	6013      	str	r3, [r2, #0]
 800cf1e:	e008      	b.n	800cf32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3e:	461a      	mov	r2, r3
 800cf40:	2300      	movs	r3, #0
 800cf42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	015a      	lsls	r2, r3, #5
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf50:	461a      	mov	r2, r3
 800cf52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	613b      	str	r3, [r7, #16]
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf60:	693a      	ldr	r2, [r7, #16]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d3b7      	bcc.n	800ced6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf66:	2300      	movs	r3, #0
 800cf68:	613b      	str	r3, [r7, #16]
 800cf6a:	e043      	b.n	800cff4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	015a      	lsls	r2, r3, #5
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4413      	add	r3, r2
 800cf74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf82:	d118      	bne.n	800cfb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	015a      	lsls	r2, r3, #5
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4413      	add	r3, r2
 800cf92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf96:	461a      	mov	r2, r3
 800cf98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	e013      	b.n	800cfc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfac:	461a      	mov	r2, r3
 800cfae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cfb2:	6013      	str	r3, [r2, #0]
 800cfb4:	e008      	b.n	800cfc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	015a      	lsls	r2, r3, #5
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	015a      	lsls	r2, r3, #5
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	015a      	lsls	r2, r3, #5
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cfec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	3301      	adds	r3, #1
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d3b7      	bcc.n	800cf6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d00a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d00e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d01c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	2b00      	cmp	r3, #0
 800d022:	d105      	bne.n	800d030 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	f043 0210 	orr.w	r2, r3, #16
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	699a      	ldr	r2, [r3, #24]
 800d034:	4b0f      	ldr	r3, [pc, #60]	; (800d074 <USB_DevInit+0x2b8>)
 800d036:	4313      	orrs	r3, r2
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d005      	beq.n	800d04e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	f043 0208 	orr.w	r2, r3, #8
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d050:	2b01      	cmp	r3, #1
 800d052:	d107      	bne.n	800d064 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d05c:	f043 0304 	orr.w	r3, r3, #4
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d070:	b004      	add	sp, #16
 800d072:	4770      	bx	lr
 800d074:	803c3800 	.word	0x803c3800

0800d078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	019b      	lsls	r3, r3, #6
 800d08a:	f043 0220 	orr.w	r2, r3, #32
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3301      	adds	r3, #1
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	4a08      	ldr	r2, [pc, #32]	; (800d0bc <USB_FlushTxFifo+0x44>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d901      	bls.n	800d0a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e006      	b.n	800d0b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	f003 0320 	and.w	r3, r3, #32
 800d0aa:	2b20      	cmp	r3, #32
 800d0ac:	d0f1      	beq.n	800d092 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	00030d40 	.word	0x00030d40

0800d0c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2210      	movs	r2, #16
 800d0d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	60fb      	str	r3, [r7, #12]
 800d0d8:	4a08      	ldr	r2, [pc, #32]	; (800d0fc <USB_FlushRxFifo+0x3c>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d901      	bls.n	800d0e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	e006      	b.n	800d0f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	f003 0310 	and.w	r3, r3, #16
 800d0ea:	2b10      	cmp	r3, #16
 800d0ec:	d0f1      	beq.n	800d0d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	00030d40 	.word	0x00030d40

0800d100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	68f9      	ldr	r1, [r7, #12]
 800d11c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d120:	4313      	orrs	r3, r2
 800d122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d132:	b480      	push	{r7}
 800d134:	b087      	sub	sp, #28
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f003 0306 	and.w	r3, r3, #6
 800d14a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d102      	bne.n	800d158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d152:	2300      	movs	r3, #0
 800d154:	75fb      	strb	r3, [r7, #23]
 800d156:	e00a      	b.n	800d16e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d002      	beq.n	800d164 <USB_GetDevSpeed+0x32>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b06      	cmp	r3, #6
 800d162:	d102      	bne.n	800d16a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d164:	2302      	movs	r3, #2
 800d166:	75fb      	strb	r3, [r7, #23]
 800d168:	e001      	b.n	800d16e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d16a:	230f      	movs	r3, #15
 800d16c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d170:	4618      	mov	r0, r3
 800d172:	371c      	adds	r7, #28
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	785b      	ldrb	r3, [r3, #1]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d13a      	bne.n	800d20e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19e:	69da      	ldr	r2, [r3, #28]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	f003 030f 	and.w	r3, r3, #15
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	68f9      	ldr	r1, [r7, #12]
 800d1b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d155      	bne.n	800d27c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	78db      	ldrb	r3, [r3, #3]
 800d1ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	059b      	lsls	r3, r3, #22
 800d1f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	0151      	lsls	r1, r2, #5
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	440a      	add	r2, r1
 800d1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	e036      	b.n	800d27c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d214:	69da      	ldr	r2, [r3, #28]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	f003 030f 	and.w	r3, r3, #15
 800d21e:	2101      	movs	r1, #1
 800d220:	fa01 f303 	lsl.w	r3, r1, r3
 800d224:	041b      	lsls	r3, r3, #16
 800d226:	68f9      	ldr	r1, [r7, #12]
 800d228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d22c:	4313      	orrs	r3, r2
 800d22e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	015a      	lsls	r2, r3, #5
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	4413      	add	r3, r2
 800d238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d11a      	bne.n	800d27c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	78db      	ldrb	r3, [r3, #3]
 800d260:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d262:	430b      	orrs	r3, r1
 800d264:	4313      	orrs	r3, r2
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	0151      	lsls	r1, r2, #5
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	440a      	add	r2, r1
 800d26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d27a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
	...

0800d28c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	785b      	ldrb	r3, [r3, #1]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d161      	bne.n	800d36c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	015a      	lsls	r2, r3, #5
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2be:	d11f      	bne.n	800d300 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	0151      	lsls	r1, r2, #5
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	440a      	add	r2, r1
 800d2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	0151      	lsls	r1, r2, #5
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	440a      	add	r2, r1
 800d2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	2101      	movs	r1, #1
 800d312:	fa01 f303 	lsl.w	r3, r1, r3
 800d316:	b29b      	uxth	r3, r3
 800d318:	43db      	mvns	r3, r3
 800d31a:	68f9      	ldr	r1, [r7, #12]
 800d31c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d320:	4013      	ands	r3, r2
 800d322:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d32a:	69da      	ldr	r2, [r3, #28]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f003 030f 	and.w	r3, r3, #15
 800d334:	2101      	movs	r1, #1
 800d336:	fa01 f303 	lsl.w	r3, r1, r3
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	43db      	mvns	r3, r3
 800d33e:	68f9      	ldr	r1, [r7, #12]
 800d340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d344:	4013      	ands	r3, r2
 800d346:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	0159      	lsls	r1, r3, #5
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	440b      	add	r3, r1
 800d35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d362:	4619      	mov	r1, r3
 800d364:	4b35      	ldr	r3, [pc, #212]	; (800d43c <USB_DeactivateEndpoint+0x1b0>)
 800d366:	4013      	ands	r3, r2
 800d368:	600b      	str	r3, [r1, #0]
 800d36a:	e060      	b.n	800d42e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	015a      	lsls	r2, r3, #5
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	4413      	add	r3, r2
 800d374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d37e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d382:	d11f      	bne.n	800d3c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	015a      	lsls	r2, r3, #5
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	0151      	lsls	r1, r2, #5
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	440a      	add	r2, r1
 800d39a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d39e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	0151      	lsls	r1, r2, #5
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	440a      	add	r2, r1
 800d3ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	f003 030f 	and.w	r3, r3, #15
 800d3d4:	2101      	movs	r1, #1
 800d3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d3da:	041b      	lsls	r3, r3, #16
 800d3dc:	43db      	mvns	r3, r3
 800d3de:	68f9      	ldr	r1, [r7, #12]
 800d3e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 030f 	and.w	r3, r3, #15
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3fe:	041b      	lsls	r3, r3, #16
 800d400:	43db      	mvns	r3, r3
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d408:	4013      	ands	r3, r2
 800d40a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	015a      	lsls	r2, r3, #5
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4413      	add	r3, r2
 800d414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	0159      	lsls	r1, r3, #5
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	440b      	add	r3, r1
 800d422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d426:	4619      	mov	r1, r3
 800d428:	4b05      	ldr	r3, [pc, #20]	; (800d440 <USB_DeactivateEndpoint+0x1b4>)
 800d42a:	4013      	ands	r3, r2
 800d42c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	ec337800 	.word	0xec337800
 800d440:	eff37800 	.word	0xeff37800

0800d444 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08a      	sub	sp, #40	; 0x28
 800d448:	af02      	add	r7, sp, #8
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	4613      	mov	r3, r2
 800d450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	785b      	ldrb	r3, [r3, #1]
 800d460:	2b01      	cmp	r3, #1
 800d462:	f040 815c 	bne.w	800d71e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d132      	bne.n	800d4d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	015a      	lsls	r2, r3, #5
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	4413      	add	r3, r2
 800d476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	0151      	lsls	r1, r2, #5
 800d480:	69fa      	ldr	r2, [r7, #28]
 800d482:	440a      	add	r2, r1
 800d484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d48c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	69ba      	ldr	r2, [r7, #24]
 800d4a2:	0151      	lsls	r1, r2, #5
 800d4a4:	69fa      	ldr	r2, [r7, #28]
 800d4a6:	440a      	add	r2, r1
 800d4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	015a      	lsls	r2, r3, #5
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	0151      	lsls	r1, r2, #5
 800d4c4:	69fa      	ldr	r2, [r7, #28]
 800d4c6:	440a      	add	r2, r1
 800d4c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4cc:	0cdb      	lsrs	r3, r3, #19
 800d4ce:	04db      	lsls	r3, r3, #19
 800d4d0:	6113      	str	r3, [r2, #16]
 800d4d2:	e074      	b.n	800d5be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	015a      	lsls	r2, r3, #5
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	4413      	add	r3, r2
 800d4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	0151      	lsls	r1, r2, #5
 800d4e6:	69fa      	ldr	r2, [r7, #28]
 800d4e8:	440a      	add	r2, r1
 800d4ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ee:	0cdb      	lsrs	r3, r3, #19
 800d4f0:	04db      	lsls	r3, r3, #19
 800d4f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	015a      	lsls	r2, r3, #5
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	0151      	lsls	r1, r2, #5
 800d506:	69fa      	ldr	r2, [r7, #28]
 800d508:	440a      	add	r2, r1
 800d50a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d50e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d512:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d524:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	6959      	ldr	r1, [r3, #20]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	440b      	add	r3, r1
 800d530:	1e59      	subs	r1, r3, #1
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	fbb1 f3f3 	udiv	r3, r1, r3
 800d53a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d53c:	4b9d      	ldr	r3, [pc, #628]	; (800d7b4 <USB_EPStartXfer+0x370>)
 800d53e:	400b      	ands	r3, r1
 800d540:	69b9      	ldr	r1, [r7, #24]
 800d542:	0148      	lsls	r0, r1, #5
 800d544:	69f9      	ldr	r1, [r7, #28]
 800d546:	4401      	add	r1, r0
 800d548:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d54c:	4313      	orrs	r3, r2
 800d54e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	015a      	lsls	r2, r3, #5
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	4413      	add	r3, r2
 800d558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d55c:	691a      	ldr	r2, [r3, #16]
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d566:	69b9      	ldr	r1, [r7, #24]
 800d568:	0148      	lsls	r0, r1, #5
 800d56a:	69f9      	ldr	r1, [r7, #28]
 800d56c:	4401      	add	r1, r0
 800d56e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d572:	4313      	orrs	r3, r2
 800d574:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	78db      	ldrb	r3, [r3, #3]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d11f      	bne.n	800d5be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	015a      	lsls	r2, r3, #5
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	4413      	add	r3, r2
 800d586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	0151      	lsls	r1, r2, #5
 800d590:	69fa      	ldr	r2, [r7, #28]
 800d592:	440a      	add	r2, r1
 800d594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d598:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d59c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	015a      	lsls	r2, r3, #5
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	0151      	lsls	r1, r2, #5
 800d5b0:	69fa      	ldr	r2, [r7, #28]
 800d5b2:	440a      	add	r2, r1
 800d5b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d14b      	bne.n	800d65c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d009      	beq.n	800d5e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d8:	461a      	mov	r2, r3
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	78db      	ldrb	r3, [r3, #3]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d128      	bne.n	800d63a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d110      	bne.n	800d61a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	69ba      	ldr	r2, [r7, #24]
 800d608:	0151      	lsls	r1, r2, #5
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	440a      	add	r2, r1
 800d60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d612:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	e00f      	b.n	800d63a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	015a      	lsls	r2, r3, #5
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	4413      	add	r3, r2
 800d622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	69ba      	ldr	r2, [r7, #24]
 800d62a:	0151      	lsls	r1, r2, #5
 800d62c:	69fa      	ldr	r2, [r7, #28]
 800d62e:	440a      	add	r2, r1
 800d630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d638:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	015a      	lsls	r2, r3, #5
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	4413      	add	r3, r2
 800d642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	69ba      	ldr	r2, [r7, #24]
 800d64a:	0151      	lsls	r1, r2, #5
 800d64c:	69fa      	ldr	r2, [r7, #28]
 800d64e:	440a      	add	r2, r1
 800d650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d654:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d658:	6013      	str	r3, [r2, #0]
 800d65a:	e12f      	b.n	800d8bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	4413      	add	r3, r2
 800d664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	69ba      	ldr	r2, [r7, #24]
 800d66c:	0151      	lsls	r1, r2, #5
 800d66e:	69fa      	ldr	r2, [r7, #28]
 800d670:	440a      	add	r2, r1
 800d672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d676:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d67a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	78db      	ldrb	r3, [r3, #3]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d015      	beq.n	800d6b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 8117 	beq.w	800d8bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	f003 030f 	and.w	r3, r3, #15
 800d69e:	2101      	movs	r1, #1
 800d6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d6a4:	69f9      	ldr	r1, [r7, #28]
 800d6a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	634b      	str	r3, [r1, #52]	; 0x34
 800d6ae:	e105      	b.n	800d8bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d110      	bne.n	800d6e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	015a      	lsls	r2, r3, #5
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	69ba      	ldr	r2, [r7, #24]
 800d6d0:	0151      	lsls	r1, r2, #5
 800d6d2:	69fa      	ldr	r2, [r7, #28]
 800d6d4:	440a      	add	r2, r1
 800d6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	e00f      	b.n	800d702 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	015a      	lsls	r2, r3, #5
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	69ba      	ldr	r2, [r7, #24]
 800d6f2:	0151      	lsls	r1, r2, #5
 800d6f4:	69fa      	ldr	r2, [r7, #28]
 800d6f6:	440a      	add	r2, r1
 800d6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d700:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	68d9      	ldr	r1, [r3, #12]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	781a      	ldrb	r2, [r3, #0]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	b298      	uxth	r0, r3
 800d710:	79fb      	ldrb	r3, [r7, #7]
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	4603      	mov	r3, r0
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f000 fa2b 	bl	800db72 <USB_WritePacket>
 800d71c:	e0ce      	b.n	800d8bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	69ba      	ldr	r2, [r7, #24]
 800d72e:	0151      	lsls	r1, r2, #5
 800d730:	69fa      	ldr	r2, [r7, #28]
 800d732:	440a      	add	r2, r1
 800d734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d738:	0cdb      	lsrs	r3, r3, #19
 800d73a:	04db      	lsls	r3, r3, #19
 800d73c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	69ba      	ldr	r2, [r7, #24]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	69fa      	ldr	r2, [r7, #28]
 800d752:	440a      	add	r2, r1
 800d754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d75c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d760:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d126      	bne.n	800d7b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	4413      	add	r3, r2
 800d772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d776:	691a      	ldr	r2, [r3, #16]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d780:	69b9      	ldr	r1, [r7, #24]
 800d782:	0148      	lsls	r0, r1, #5
 800d784:	69f9      	ldr	r1, [r7, #28]
 800d786:	4401      	add	r1, r0
 800d788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d78c:	4313      	orrs	r3, r2
 800d78e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	4413      	add	r3, r2
 800d798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	69ba      	ldr	r2, [r7, #24]
 800d7a0:	0151      	lsls	r1, r2, #5
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	440a      	add	r2, r1
 800d7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7ae:	6113      	str	r3, [r2, #16]
 800d7b0:	e036      	b.n	800d820 <USB_EPStartXfer+0x3dc>
 800d7b2:	bf00      	nop
 800d7b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	695a      	ldr	r2, [r3, #20]
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	1e5a      	subs	r2, r3, #1
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	015a      	lsls	r2, r3, #5
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7da:	691a      	ldr	r2, [r3, #16]
 800d7dc:	8afb      	ldrh	r3, [r7, #22]
 800d7de:	04d9      	lsls	r1, r3, #19
 800d7e0:	4b39      	ldr	r3, [pc, #228]	; (800d8c8 <USB_EPStartXfer+0x484>)
 800d7e2:	400b      	ands	r3, r1
 800d7e4:	69b9      	ldr	r1, [r7, #24]
 800d7e6:	0148      	lsls	r0, r1, #5
 800d7e8:	69f9      	ldr	r1, [r7, #28]
 800d7ea:	4401      	add	r1, r0
 800d7ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d800:	691a      	ldr	r2, [r3, #16]
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	8af9      	ldrh	r1, [r7, #22]
 800d808:	fb01 f303 	mul.w	r3, r1, r3
 800d80c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d810:	69b9      	ldr	r1, [r7, #24]
 800d812:	0148      	lsls	r0, r1, #5
 800d814:	69f9      	ldr	r1, [r7, #28]
 800d816:	4401      	add	r1, r0
 800d818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d81c:	4313      	orrs	r3, r2
 800d81e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d10d      	bne.n	800d842 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d009      	beq.n	800d842 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	68d9      	ldr	r1, [r3, #12]
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	015a      	lsls	r2, r3, #5
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	4413      	add	r3, r2
 800d83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83e:	460a      	mov	r2, r1
 800d840:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	78db      	ldrb	r3, [r3, #3]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d128      	bne.n	800d89c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d856:	2b00      	cmp	r3, #0
 800d858:	d110      	bne.n	800d87c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	015a      	lsls	r2, r3, #5
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	4413      	add	r3, r2
 800d862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69ba      	ldr	r2, [r7, #24]
 800d86a:	0151      	lsls	r1, r2, #5
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	440a      	add	r2, r1
 800d870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	e00f      	b.n	800d89c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	69ba      	ldr	r2, [r7, #24]
 800d88c:	0151      	lsls	r1, r2, #5
 800d88e:	69fa      	ldr	r2, [r7, #28]
 800d890:	440a      	add	r2, r1
 800d892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d89a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	015a      	lsls	r2, r3, #5
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	69ba      	ldr	r2, [r7, #24]
 800d8ac:	0151      	lsls	r1, r2, #5
 800d8ae:	69fa      	ldr	r2, [r7, #28]
 800d8b0:	440a      	add	r2, r1
 800d8b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3720      	adds	r7, #32
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	1ff80000 	.word	0x1ff80000

0800d8cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b087      	sub	sp, #28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	785b      	ldrb	r3, [r3, #1]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	f040 80cd 	bne.w	800da88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	695b      	ldr	r3, [r3, #20]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d132      	bne.n	800d95c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	0151      	lsls	r1, r2, #5
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	440a      	add	r2, r1
 800d90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d910:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d914:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	4413      	add	r3, r2
 800d922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	0151      	lsls	r1, r2, #5
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	440a      	add	r2, r1
 800d930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	015a      	lsls	r2, r3, #5
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	4413      	add	r3, r2
 800d942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	693a      	ldr	r2, [r7, #16]
 800d94a:	0151      	lsls	r1, r2, #5
 800d94c:	697a      	ldr	r2, [r7, #20]
 800d94e:	440a      	add	r2, r1
 800d950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d954:	0cdb      	lsrs	r3, r3, #19
 800d956:	04db      	lsls	r3, r3, #19
 800d958:	6113      	str	r3, [r2, #16]
 800d95a:	e04e      	b.n	800d9fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	693a      	ldr	r2, [r7, #16]
 800d96c:	0151      	lsls	r1, r2, #5
 800d96e:	697a      	ldr	r2, [r7, #20]
 800d970:	440a      	add	r2, r1
 800d972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d976:	0cdb      	lsrs	r3, r3, #19
 800d978:	04db      	lsls	r3, r3, #19
 800d97a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	015a      	lsls	r2, r3, #5
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	4413      	add	r3, r2
 800d984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d988:	691b      	ldr	r3, [r3, #16]
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	0151      	lsls	r1, r2, #5
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	440a      	add	r2, r1
 800d992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d996:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d99a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d99e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	695a      	ldr	r2, [r3, #20]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d903      	bls.n	800d9b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	689a      	ldr	r2, [r3, #8]
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	015a      	lsls	r2, r3, #5
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	0151      	lsls	r1, r2, #5
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	440a      	add	r2, r1
 800d9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	015a      	lsls	r2, r3, #5
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e0:	691a      	ldr	r2, [r3, #16]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9ea:	6939      	ldr	r1, [r7, #16]
 800d9ec:	0148      	lsls	r0, r1, #5
 800d9ee:	6979      	ldr	r1, [r7, #20]
 800d9f0:	4401      	add	r1, r0
 800d9f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d9fa:	79fb      	ldrb	r3, [r7, #7]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d11e      	bne.n	800da3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	015a      	lsls	r2, r3, #5
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	4413      	add	r3, r2
 800da10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da14:	461a      	mov	r2, r3
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	0151      	lsls	r1, r2, #5
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	440a      	add	r2, r1
 800da32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	e092      	b.n	800db64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	440a      	add	r2, r1
 800da54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d07e      	beq.n	800db64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	f003 030f 	and.w	r3, r3, #15
 800da76:	2101      	movs	r1, #1
 800da78:	fa01 f303 	lsl.w	r3, r1, r3
 800da7c:	6979      	ldr	r1, [r7, #20]
 800da7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da82:	4313      	orrs	r3, r2
 800da84:	634b      	str	r3, [r1, #52]	; 0x34
 800da86:	e06d      	b.n	800db64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	0151      	lsls	r1, r2, #5
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	440a      	add	r2, r1
 800da9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daa2:	0cdb      	lsrs	r3, r3, #19
 800daa4:	04db      	lsls	r3, r3, #19
 800daa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800daca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d003      	beq.n	800dadc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	689a      	ldr	r2, [r3, #8]
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	015a      	lsls	r2, r3, #5
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	4413      	add	r3, r2
 800dae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	693a      	ldr	r2, [r7, #16]
 800daec:	0151      	lsls	r1, r2, #5
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	440a      	add	r2, r1
 800daf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dafa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	015a      	lsls	r2, r3, #5
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	4413      	add	r3, r2
 800db04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db08:	691a      	ldr	r2, [r3, #16]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db12:	6939      	ldr	r1, [r7, #16]
 800db14:	0148      	lsls	r0, r1, #5
 800db16:	6979      	ldr	r1, [r7, #20]
 800db18:	4401      	add	r1, r0
 800db1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db1e:	4313      	orrs	r3, r2
 800db20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800db22:	79fb      	ldrb	r3, [r7, #7]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d10d      	bne.n	800db44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d009      	beq.n	800db44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	68d9      	ldr	r1, [r3, #12]
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db40:	460a      	mov	r2, r1
 800db42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	015a      	lsls	r2, r3, #5
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	4413      	add	r3, r2
 800db4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	0151      	lsls	r1, r2, #5
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	440a      	add	r2, r1
 800db5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	371c      	adds	r7, #28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800db72:	b480      	push	{r7}
 800db74:	b089      	sub	sp, #36	; 0x24
 800db76:	af00      	add	r7, sp, #0
 800db78:	60f8      	str	r0, [r7, #12]
 800db7a:	60b9      	str	r1, [r7, #8]
 800db7c:	4611      	mov	r1, r2
 800db7e:	461a      	mov	r2, r3
 800db80:	460b      	mov	r3, r1
 800db82:	71fb      	strb	r3, [r7, #7]
 800db84:	4613      	mov	r3, r2
 800db86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800db90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db94:	2b00      	cmp	r3, #0
 800db96:	d123      	bne.n	800dbe0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800db98:	88bb      	ldrh	r3, [r7, #4]
 800db9a:	3303      	adds	r3, #3
 800db9c:	089b      	lsrs	r3, r3, #2
 800db9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dba0:	2300      	movs	r3, #0
 800dba2:	61bb      	str	r3, [r7, #24]
 800dba4:	e018      	b.n	800dbd8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dba6:	79fb      	ldrb	r3, [r7, #7]
 800dba8:	031a      	lsls	r2, r3, #12
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	4413      	add	r3, r2
 800dbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	69ba      	ldr	r2, [r7, #24]
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d3e2      	bcc.n	800dba6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3724      	adds	r7, #36	; 0x24
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b08b      	sub	sp, #44	; 0x2c
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	60b9      	str	r1, [r7, #8]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dc04:	88fb      	ldrh	r3, [r7, #6]
 800dc06:	089b      	lsrs	r3, r3, #2
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dc0c:	88fb      	ldrh	r3, [r7, #6]
 800dc0e:	f003 0303 	and.w	r3, r3, #3
 800dc12:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dc14:	2300      	movs	r3, #0
 800dc16:	623b      	str	r3, [r7, #32]
 800dc18:	e014      	b.n	800dc44 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc24:	601a      	str	r2, [r3, #0]
    pDest++;
 800dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc28:	3301      	adds	r3, #1
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	3301      	adds	r3, #1
 800dc30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	3301      	adds	r3, #1
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	3301      	adds	r3, #1
 800dc42:	623b      	str	r3, [r7, #32]
 800dc44:	6a3a      	ldr	r2, [r7, #32]
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d3e6      	bcc.n	800dc1a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dc4c:	8bfb      	ldrh	r3, [r7, #30]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d01e      	beq.n	800dc90 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dc52:	2300      	movs	r3, #0
 800dc54:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	f107 0310 	add.w	r3, r7, #16
 800dc62:	6812      	ldr	r2, [r2, #0]
 800dc64:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	701a      	strb	r2, [r3, #0]
      i++;
 800dc78:	6a3b      	ldr	r3, [r7, #32]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	623b      	str	r3, [r7, #32]
      pDest++;
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	3301      	adds	r3, #1
 800dc82:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dc84:	8bfb      	ldrh	r3, [r7, #30]
 800dc86:	3b01      	subs	r3, #1
 800dc88:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dc8a:	8bfb      	ldrh	r3, [r7, #30]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1ea      	bne.n	800dc66 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	372c      	adds	r7, #44	; 0x2c
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc9e:	b480      	push	{r7}
 800dca0:	b085      	sub	sp, #20
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	785b      	ldrb	r3, [r3, #1]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d12c      	bne.n	800dd14 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	015a      	lsls	r2, r3, #5
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	db12      	blt.n	800dcf2 <USB_EPSetStall+0x54>
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00f      	beq.n	800dcf2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	015a      	lsls	r2, r3, #5
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	4413      	add	r3, r2
 800dcda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	0151      	lsls	r1, r2, #5
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	440a      	add	r2, r1
 800dce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcf0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	0151      	lsls	r1, r2, #5
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	440a      	add	r2, r1
 800dd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	e02b      	b.n	800dd6c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	015a      	lsls	r2, r3, #5
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	db12      	blt.n	800dd4c <USB_EPSetStall+0xae>
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00f      	beq.n	800dd4c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	0151      	lsls	r1, r2, #5
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	440a      	add	r2, r1
 800dd42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dd4a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	015a      	lsls	r2, r3, #5
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	4413      	add	r3, r2
 800dd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	0151      	lsls	r1, r2, #5
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	440a      	add	r2, r1
 800dd62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3714      	adds	r7, #20
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b085      	sub	sp, #20
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	785b      	ldrb	r3, [r3, #1]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d128      	bne.n	800dde8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	015a      	lsls	r2, r3, #5
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	0151      	lsls	r1, r2, #5
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	440a      	add	r2, r1
 800ddac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ddb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	78db      	ldrb	r3, [r3, #3]
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d003      	beq.n	800ddc6 <USB_EPClearStall+0x4c>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	78db      	ldrb	r3, [r3, #3]
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d138      	bne.n	800de38 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	015a      	lsls	r2, r3, #5
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4413      	add	r3, r2
 800ddce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	0151      	lsls	r1, r2, #5
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	440a      	add	r2, r1
 800dddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dde0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dde4:	6013      	str	r3, [r2, #0]
 800dde6:	e027      	b.n	800de38 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	015a      	lsls	r2, r3, #5
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	4413      	add	r3, r2
 800ddf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	0151      	lsls	r1, r2, #5
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	440a      	add	r2, r1
 800ddfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	78db      	ldrb	r3, [r3, #3]
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d003      	beq.n	800de18 <USB_EPClearStall+0x9e>
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	78db      	ldrb	r3, [r3, #3]
 800de14:	2b02      	cmp	r3, #2
 800de16:	d10f      	bne.n	800de38 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	0151      	lsls	r1, r2, #5
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	440a      	add	r2, r1
 800de2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de36:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3714      	adds	r7, #20
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800de46:	b480      	push	{r7}
 800de48:	b085      	sub	sp, #20
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	460b      	mov	r3, r1
 800de50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800de68:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	78fb      	ldrb	r3, [r7, #3]
 800de74:	011b      	lsls	r3, r3, #4
 800de76:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800de7a:	68f9      	ldr	r1, [r7, #12]
 800de7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de80:	4313      	orrs	r3, r2
 800de82:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de92:	b480      	push	{r7}
 800de94:	b085      	sub	sp, #20
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800deac:	f023 0303 	bic.w	r3, r3, #3
 800deb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dec0:	f023 0302 	bic.w	r3, r3, #2
 800dec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3714      	adds	r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800deee:	f023 0303 	bic.w	r3, r3, #3
 800def2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df02:	f043 0302 	orr.w	r3, r3, #2
 800df06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800df16:	b480      	push	{r7}
 800df18:	b085      	sub	sp, #20
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	4013      	ands	r3, r2
 800df2c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800df2e:	68fb      	ldr	r3, [r7, #12]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3714      	adds	r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df4e:	699b      	ldr	r3, [r3, #24]
 800df50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	4013      	ands	r3, r2
 800df5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	0c1b      	lsrs	r3, r3, #16
}
 800df64:	4618      	mov	r0, r3
 800df66:	3714      	adds	r7, #20
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	4013      	ands	r3, r2
 800df92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	b29b      	uxth	r3, r3
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	460b      	mov	r3, r1
 800dfae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	015a      	lsls	r2, r3, #5
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	4013      	ands	r3, r2
 800dfd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dfd2:	68bb      	ldr	r3, [r7, #8]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b087      	sub	sp, #28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e002:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e004:	78fb      	ldrb	r3, [r7, #3]
 800e006:	f003 030f 	and.w	r3, r3, #15
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	fa22 f303 	lsr.w	r3, r2, r3
 800e010:	01db      	lsls	r3, r3, #7
 800e012:	b2db      	uxtb	r3, r3
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	4313      	orrs	r3, r2
 800e018:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e01a:	78fb      	ldrb	r3, [r7, #3]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	4413      	add	r3, r2
 800e022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	4013      	ands	r3, r2
 800e02c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e02e:	68bb      	ldr	r3, [r7, #8]
}
 800e030:	4618      	mov	r0, r3
 800e032:	371c      	adds	r7, #28
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	695b      	ldr	r3, [r3, #20]
 800e048:	f003 0301 	and.w	r3, r3, #1
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e072:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e076:	f023 0307 	bic.w	r3, r3, #7
 800e07a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e08e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
	...

0800e0a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b087      	sub	sp, #28
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	333c      	adds	r3, #60	; 0x3c
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	4a26      	ldr	r2, [pc, #152]	; (800e158 <USB_EP0_OutStart+0xb8>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d90a      	bls.n	800e0da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0d4:	d101      	bne.n	800e0da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	e037      	b.n	800e14a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	697a      	ldr	r2, [r7, #20]
 800e0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e0f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e100:	691b      	ldr	r3, [r3, #16]
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e108:	f043 0318 	orr.w	r3, r3, #24
 800e10c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e11c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e120:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e122:	7afb      	ldrb	r3, [r7, #11]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d10f      	bne.n	800e148 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e12e:	461a      	mov	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	697a      	ldr	r2, [r7, #20]
 800e13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e142:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	371c      	adds	r7, #28
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	4f54300a 	.word	0x4f54300a

0800e15c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e164:	2300      	movs	r3, #0
 800e166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3301      	adds	r3, #1
 800e16c:	60fb      	str	r3, [r7, #12]
 800e16e:	4a13      	ldr	r2, [pc, #76]	; (800e1bc <USB_CoreReset+0x60>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d901      	bls.n	800e178 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800e174:	2303      	movs	r3, #3
 800e176:	e01a      	b.n	800e1ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	691b      	ldr	r3, [r3, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	daf3      	bge.n	800e168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	f043 0201 	orr.w	r2, r3, #1
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	3301      	adds	r3, #1
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	4a09      	ldr	r2, [pc, #36]	; (800e1bc <USB_CoreReset+0x60>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d901      	bls.n	800e1a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	e006      	b.n	800e1ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d0f1      	beq.n	800e190 <USB_CoreReset+0x34>

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	00030d40 	.word	0x00030d40

0800e1c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e1cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e1d0:	f002 fa66 	bl	80106a0 <USBD_static_malloc>
 800e1d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d105      	bne.n	800e1e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	e066      	b.n	800e2b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	7c1b      	ldrb	r3, [r3, #16]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d119      	bne.n	800e22c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e1f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1fc:	2202      	movs	r2, #2
 800e1fe:	2181      	movs	r1, #129	; 0x81
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f002 f8dc 	bl	80103be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e20c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e210:	2202      	movs	r2, #2
 800e212:	2101      	movs	r1, #1
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f002 f8d2 	bl	80103be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2210      	movs	r2, #16
 800e226:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e22a:	e016      	b.n	800e25a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e22c:	2340      	movs	r3, #64	; 0x40
 800e22e:	2202      	movs	r2, #2
 800e230:	2181      	movs	r1, #129	; 0x81
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f002 f8c3 	bl	80103be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e23e:	2340      	movs	r3, #64	; 0x40
 800e240:	2202      	movs	r2, #2
 800e242:	2101      	movs	r1, #1
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f002 f8ba 	bl	80103be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2210      	movs	r2, #16
 800e256:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e25a:	2308      	movs	r3, #8
 800e25c:	2203      	movs	r2, #3
 800e25e:	2182      	movs	r1, #130	; 0x82
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f002 f8ac 	bl	80103be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2200      	movs	r2, #0
 800e27c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7c1b      	ldrb	r3, [r3, #16]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d109      	bne.n	800e2a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e29a:	2101      	movs	r1, #1
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f002 f97d 	bl	801059c <USBD_LL_PrepareReceive>
 800e2a2:	e007      	b.n	800e2b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e2aa:	2340      	movs	r3, #64	; 0x40
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f002 f974 	bl	801059c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e2ca:	2181      	movs	r1, #129	; 0x81
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f002 f89c 	bl	801040a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e2d8:	2101      	movs	r1, #1
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f002 f895 	bl	801040a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e2e8:	2182      	movs	r1, #130	; 0x82
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f002 f88d 	bl	801040a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00e      	beq.n	800e328 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e31a:	4618      	mov	r0, r3
 800e31c:	f002 f9ce 	bl	80106bc <USBD_static_free>
    pdev->pClassData = NULL;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
	...

0800e334 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e344:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e346:	2300      	movs	r3, #0
 800e348:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d101      	bne.n	800e35c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e358:	2303      	movs	r3, #3
 800e35a:	e0af      	b.n	800e4bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e364:	2b00      	cmp	r3, #0
 800e366:	d03f      	beq.n	800e3e8 <USBD_CDC_Setup+0xb4>
 800e368:	2b20      	cmp	r3, #32
 800e36a:	f040 809f 	bne.w	800e4ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	88db      	ldrh	r3, [r3, #6]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d02e      	beq.n	800e3d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	b25b      	sxtb	r3, r3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	da16      	bge.n	800e3ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	683a      	ldr	r2, [r7, #0]
 800e38a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e38c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	88d2      	ldrh	r2, [r2, #6]
 800e392:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	88db      	ldrh	r3, [r3, #6]
 800e398:	2b07      	cmp	r3, #7
 800e39a:	bf28      	it	cs
 800e39c:	2307      	movcs	r3, #7
 800e39e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	89fa      	ldrh	r2, [r7, #14]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 fb43 	bl	800fa32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e3ac:	e085      	b.n	800e4ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	785a      	ldrb	r2, [r3, #1]
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	88db      	ldrh	r3, [r3, #6]
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e3c4:	6939      	ldr	r1, [r7, #16]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	88db      	ldrh	r3, [r3, #6]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f001 fb5c 	bl	800fa8a <USBD_CtlPrepareRx>
      break;
 800e3d2:	e072      	b.n	800e4ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	683a      	ldr	r2, [r7, #0]
 800e3de:	7850      	ldrb	r0, [r2, #1]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	4798      	blx	r3
      break;
 800e3e6:	e068      	b.n	800e4ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	785b      	ldrb	r3, [r3, #1]
 800e3ec:	2b0b      	cmp	r3, #11
 800e3ee:	d852      	bhi.n	800e496 <USBD_CDC_Setup+0x162>
 800e3f0:	a201      	add	r2, pc, #4	; (adr r2, 800e3f8 <USBD_CDC_Setup+0xc4>)
 800e3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f6:	bf00      	nop
 800e3f8:	0800e429 	.word	0x0800e429
 800e3fc:	0800e4a5 	.word	0x0800e4a5
 800e400:	0800e497 	.word	0x0800e497
 800e404:	0800e497 	.word	0x0800e497
 800e408:	0800e497 	.word	0x0800e497
 800e40c:	0800e497 	.word	0x0800e497
 800e410:	0800e497 	.word	0x0800e497
 800e414:	0800e497 	.word	0x0800e497
 800e418:	0800e497 	.word	0x0800e497
 800e41c:	0800e497 	.word	0x0800e497
 800e420:	0800e453 	.word	0x0800e453
 800e424:	0800e47d 	.word	0x0800e47d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b03      	cmp	r3, #3
 800e432:	d107      	bne.n	800e444 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e434:	f107 030a 	add.w	r3, r7, #10
 800e438:	2202      	movs	r2, #2
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 faf8 	bl	800fa32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e442:	e032      	b.n	800e4aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 fa82 	bl	800f950 <USBD_CtlError>
            ret = USBD_FAIL;
 800e44c:	2303      	movs	r3, #3
 800e44e:	75fb      	strb	r3, [r7, #23]
          break;
 800e450:	e02b      	b.n	800e4aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d107      	bne.n	800e46e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e45e:	f107 030d 	add.w	r3, r7, #13
 800e462:	2201      	movs	r2, #1
 800e464:	4619      	mov	r1, r3
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f001 fae3 	bl	800fa32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e46c:	e01d      	b.n	800e4aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e46e:	6839      	ldr	r1, [r7, #0]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f001 fa6d 	bl	800f950 <USBD_CtlError>
            ret = USBD_FAIL;
 800e476:	2303      	movs	r3, #3
 800e478:	75fb      	strb	r3, [r7, #23]
          break;
 800e47a:	e016      	b.n	800e4aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b03      	cmp	r3, #3
 800e486:	d00f      	beq.n	800e4a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e488:	6839      	ldr	r1, [r7, #0]
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f001 fa60 	bl	800f950 <USBD_CtlError>
            ret = USBD_FAIL;
 800e490:	2303      	movs	r3, #3
 800e492:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e494:	e008      	b.n	800e4a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 fa59 	bl	800f950 <USBD_CtlError>
          ret = USBD_FAIL;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e4a2:	e002      	b.n	800e4aa <USBD_CDC_Setup+0x176>
          break;
 800e4a4:	bf00      	nop
 800e4a6:	e008      	b.n	800e4ba <USBD_CDC_Setup+0x186>
          break;
 800e4a8:	bf00      	nop
      }
      break;
 800e4aa:	e006      	b.n	800e4ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e4ac:	6839      	ldr	r1, [r7, #0]
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f001 fa4e 	bl	800f950 <USBD_CtlError>
      ret = USBD_FAIL;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800e4b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3718      	adds	r7, #24
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e4d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	e04f      	b.n	800e586 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e4ee:	78fa      	ldrb	r2, [r7, #3]
 800e4f0:	6879      	ldr	r1, [r7, #4]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	4413      	add	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	440b      	add	r3, r1
 800e4fc:	3318      	adds	r3, #24
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d029      	beq.n	800e558 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e504:	78fa      	ldrb	r2, [r7, #3]
 800e506:	6879      	ldr	r1, [r7, #4]
 800e508:	4613      	mov	r3, r2
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	4413      	add	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	440b      	add	r3, r1
 800e512:	3318      	adds	r3, #24
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	78f9      	ldrb	r1, [r7, #3]
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	460b      	mov	r3, r1
 800e51c:	00db      	lsls	r3, r3, #3
 800e51e:	1a5b      	subs	r3, r3, r1
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4403      	add	r3, r0
 800e524:	3344      	adds	r3, #68	; 0x44
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	fbb2 f1f3 	udiv	r1, r2, r3
 800e52c:	fb03 f301 	mul.w	r3, r3, r1
 800e530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e532:	2b00      	cmp	r3, #0
 800e534:	d110      	bne.n	800e558 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e536:	78fa      	ldrb	r2, [r7, #3]
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	4613      	mov	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4413      	add	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	440b      	add	r3, r1
 800e544:	3318      	adds	r3, #24
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e54a:	78f9      	ldrb	r1, [r7, #3]
 800e54c:	2300      	movs	r3, #0
 800e54e:	2200      	movs	r2, #0
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f002 f802 	bl	801055a <USBD_LL_Transmit>
 800e556:	e015      	b.n	800e584 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e580:	78fa      	ldrb	r2, [r7, #3]
 800e582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	460b      	mov	r3, r1
 800e598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d101      	bne.n	800e5b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e015      	b.n	800e5dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e5b0:	78fb      	ldrb	r3, [r7, #3]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f002 f812 	bl	80105de <USBD_LL_GetRxDataSize>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5c8:	68db      	ldr	r3, [r3, #12]
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	e01b      	b.n	800e636 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d015      	beq.n	800e634 <USBD_CDC_EP0_RxReady+0x50>
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e60e:	2bff      	cmp	r3, #255	; 0xff
 800e610:	d010      	beq.n	800e634 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e620:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e628:	b292      	uxth	r2, r2
 800e62a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	22ff      	movs	r2, #255	; 0xff
 800e630:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
	...

0800e640 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2243      	movs	r2, #67	; 0x43
 800e64c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e64e:	4b03      	ldr	r3, [pc, #12]	; (800e65c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e650:	4618      	mov	r0, r3
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	20000094 	.word	0x20000094

0800e660 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2243      	movs	r2, #67	; 0x43
 800e66c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e66e:	4b03      	ldr	r3, [pc, #12]	; (800e67c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	20000050 	.word	0x20000050

0800e680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2243      	movs	r2, #67	; 0x43
 800e68c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e68e:	4b03      	ldr	r3, [pc, #12]	; (800e69c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	200000d8 	.word	0x200000d8

0800e6a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	220a      	movs	r2, #10
 800e6ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e6ae:	4b03      	ldr	r3, [pc, #12]	; (800e6bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	2000000c 	.word	0x2000000c

0800e6c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	e004      	b.n	800e6de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b087      	sub	sp, #28
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d101      	bne.n	800e708 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e704:	2303      	movs	r3, #3
 800e706:	e008      	b.n	800e71a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e726:	b480      	push	{r7}
 800e728:	b085      	sub	sp, #20
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e736:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e73e:	2303      	movs	r3, #3
 800e740:	e004      	b.n	800e74c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e766:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e768:	2301      	movs	r3, #1
 800e76a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	e01a      	b.n	800e7b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e780:	2b00      	cmp	r3, #0
 800e782:	d114      	bne.n	800e7ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2201      	movs	r2, #1
 800e788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e7a2:	2181      	movs	r1, #129	; 0x81
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f001 fed8 	bl	801055a <USBD_LL_Transmit>

    ret = USBD_OK;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	e016      	b.n	800e804 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	7c1b      	ldrb	r3, [r3, #16]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d109      	bne.n	800e7f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f001 fed6 	bl	801059c <USBD_LL_PrepareReceive>
 800e7f0:	e007      	b.n	800e802 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7f8:	2340      	movs	r3, #64	; 0x40
 800e7fa:	2101      	movs	r1, #1
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f001 fecd 	bl	801059c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	4613      	mov	r3, r2
 800e818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e820:	2303      	movs	r3, #3
 800e822:	e01f      	b.n	800e864 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d003      	beq.n	800e84a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	79fa      	ldrb	r2, [r7, #7]
 800e856:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f001 fd49 	bl	80102f0 <USBD_LL_Init>
 800e85e:	4603      	mov	r3, r0
 800e860:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e862:	7dfb      	ldrb	r3, [r7, #23]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e876:	2300      	movs	r3, #0
 800e878:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e880:	2303      	movs	r3, #3
 800e882:	e016      	b.n	800e8b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00b      	beq.n	800e8b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a0:	f107 020e 	add.w	r2, r7, #14
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	4798      	blx	r3
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f001 fd60 	bl	8010388 <USBD_LL_Start>
 800e8c8:	4603      	mov	r3, r0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b083      	sub	sp, #12
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d009      	beq.n	800e916 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	78fa      	ldrb	r2, [r7, #3]
 800e90c:	4611      	mov	r1, r2
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	4798      	blx	r3
 800e912:	4603      	mov	r3, r0
 800e914:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e916:	7bfb      	ldrb	r3, [r7, #15]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	460b      	mov	r3, r1
 800e92a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	78fa      	ldrb	r2, [r7, #3]
 800e940:	4611      	mov	r1, r2
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	4798      	blx	r3
  }

  return USBD_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 ffba 	bl	800f8dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e976:	461a      	mov	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e984:	f003 031f 	and.w	r3, r3, #31
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d01a      	beq.n	800e9c2 <USBD_LL_SetupStage+0x72>
 800e98c:	2b02      	cmp	r3, #2
 800e98e:	d822      	bhi.n	800e9d6 <USBD_LL_SetupStage+0x86>
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <USBD_LL_SetupStage+0x4a>
 800e994:	2b01      	cmp	r3, #1
 800e996:	d00a      	beq.n	800e9ae <USBD_LL_SetupStage+0x5e>
 800e998:	e01d      	b.n	800e9d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 fa62 	bl	800ee6c <USBD_StdDevReq>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ac:	e020      	b.n	800e9f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fac6 	bl	800ef48 <USBD_StdItfReq>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c0:	e016      	b.n	800e9f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fb05 	bl	800efda <USBD_StdEPReq>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9d4:	e00c      	b.n	800e9f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e9dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f001 fd2f 	bl	8010448 <USBD_LL_StallEP>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ee:	bf00      	nop
  }

  return ret;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b086      	sub	sp, #24
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	60f8      	str	r0, [r7, #12]
 800ea02:	460b      	mov	r3, r1
 800ea04:	607a      	str	r2, [r7, #4]
 800ea06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ea08:	7afb      	ldrb	r3, [r7, #11]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d138      	bne.n	800ea80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ea14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea1c:	2b03      	cmp	r3, #3
 800ea1e:	d14a      	bne.n	800eab6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	689a      	ldr	r2, [r3, #8]
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d913      	bls.n	800ea54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	689a      	ldr	r2, [r3, #8]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	1ad2      	subs	r2, r2, r3
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	68da      	ldr	r2, [r3, #12]
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	4293      	cmp	r3, r2
 800ea44:	bf28      	it	cs
 800ea46:	4613      	movcs	r3, r2
 800ea48:	461a      	mov	r2, r3
 800ea4a:	6879      	ldr	r1, [r7, #4]
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f001 f839 	bl	800fac4 <USBD_CtlContinueRx>
 800ea52:	e030      	b.n	800eab6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b03      	cmp	r3, #3
 800ea5e:	d10b      	bne.n	800ea78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f001 f834 	bl	800fae6 <USBD_CtlSendStatus>
 800ea7e:	e01a      	b.n	800eab6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d114      	bne.n	800eab6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00e      	beq.n	800eab6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea9e:	699b      	ldr	r3, [r3, #24]
 800eaa0:	7afa      	ldrb	r2, [r7, #11]
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	4798      	blx	r3
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eaac:	7dfb      	ldrb	r3, [r7, #23]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
 800eab4:	e000      	b.n	800eab8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	460b      	mov	r3, r1
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eace:	7afb      	ldrb	r3, [r7, #11]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d16b      	bne.n	800ebac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	3314      	adds	r3, #20
 800ead8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d156      	bne.n	800eb92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d914      	bls.n	800eb1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	689a      	ldr	r2, [r3, #8]
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	1ad2      	subs	r2, r2, r3
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	461a      	mov	r2, r3
 800eb04:	6879      	ldr	r1, [r7, #4]
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f000 ffae 	bl	800fa68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	2200      	movs	r2, #0
 800eb10:	2100      	movs	r1, #0
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f001 fd42 	bl	801059c <USBD_LL_PrepareReceive>
 800eb18:	e03b      	b.n	800eb92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d11c      	bne.n	800eb60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d316      	bcc.n	800eb60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	685a      	ldr	r2, [r3, #4]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d20f      	bcs.n	800eb60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb40:	2200      	movs	r2, #0
 800eb42:	2100      	movs	r1, #0
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f000 ff8f 	bl	800fa68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb52:	2300      	movs	r3, #0
 800eb54:	2200      	movs	r2, #0
 800eb56:	2100      	movs	r1, #0
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f001 fd1f 	bl	801059c <USBD_LL_PrepareReceive>
 800eb5e:	e018      	b.n	800eb92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d10b      	bne.n	800eb84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d005      	beq.n	800eb84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb84:	2180      	movs	r1, #128	; 0x80
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f001 fc5e 	bl	8010448 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f000 ffbd 	bl	800fb0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d122      	bne.n	800ebe2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7ff fe98 	bl	800e8d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ebaa:	e01a      	b.n	800ebe2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b03      	cmp	r3, #3
 800ebb6:	d114      	bne.n	800ebe2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00e      	beq.n	800ebe2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	7afa      	ldrb	r2, [r7, #11]
 800ebce:	4611      	mov	r1, r2
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	4798      	blx	r3
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ebd8:	7dfb      	ldrb	r3, [r7, #23]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ebde:	7dfb      	ldrb	r3, [r7, #23]
 800ebe0:	e000      	b.n	800ebe4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d101      	bne.n	800ec20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e02f      	b.n	800ec80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00f      	beq.n	800ec4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d009      	beq.n	800ec4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	6852      	ldr	r2, [r2, #4]
 800ec42:	b2d2      	uxtb	r2, r2
 800ec44:	4611      	mov	r1, r2
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec4a:	2340      	movs	r3, #64	; 0x40
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	2100      	movs	r1, #0
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f001 fbb4 	bl	80103be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2240      	movs	r2, #64	; 0x40
 800ec62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec66:	2340      	movs	r3, #64	; 0x40
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2180      	movs	r1, #128	; 0x80
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f001 fba6 	bl	80103be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2240      	movs	r2, #64	; 0x40
 800ec7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	78fa      	ldrb	r2, [r7, #3]
 800ec98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2204      	movs	r2, #4
 800ecc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d106      	bne.n	800ecf6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ed16:	2303      	movs	r3, #3
 800ed18:	e012      	b.n	800ed40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d10b      	bne.n	800ed3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2c:	69db      	ldr	r3, [r3, #28]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d005      	beq.n	800ed3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed38:	69db      	ldr	r3, [r3, #28]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	e014      	b.n	800ed8c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b03      	cmp	r3, #3
 800ed6c:	d10d      	bne.n	800ed8a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d007      	beq.n	800ed8a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed80:	6a1b      	ldr	r3, [r3, #32]
 800ed82:	78fa      	ldrb	r2, [r7, #3]
 800ed84:	4611      	mov	r1, r2
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ed8a:	2300      	movs	r3, #0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800edaa:	2303      	movs	r3, #3
 800edac:	e014      	b.n	800edd8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d10d      	bne.n	800edd6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d007      	beq.n	800edd6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edce:	78fa      	ldrb	r2, [r7, #3]
 800edd0:	4611      	mov	r1, r2
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b082      	sub	sp, #8
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d009      	beq.n	800ee24 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	6852      	ldr	r2, [r2, #4]
 800ee1c:	b2d2      	uxtb	r2, r2
 800ee1e:	4611      	mov	r1, r2
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	4798      	blx	r3
  }

  return USBD_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee2e:	b480      	push	{r7}
 800ee30:	b087      	sub	sp, #28
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	3301      	adds	r3, #1
 800ee44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee4c:	8a3b      	ldrh	r3, [r7, #16]
 800ee4e:	021b      	lsls	r3, r3, #8
 800ee50:	b21a      	sxth	r2, r3
 800ee52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	b21b      	sxth	r3, r3
 800ee5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee5c:	89fb      	ldrh	r3, [r7, #14]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	371c      	adds	r7, #28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr
	...

0800ee6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee82:	2b40      	cmp	r3, #64	; 0x40
 800ee84:	d005      	beq.n	800ee92 <USBD_StdDevReq+0x26>
 800ee86:	2b40      	cmp	r3, #64	; 0x40
 800ee88:	d853      	bhi.n	800ef32 <USBD_StdDevReq+0xc6>
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00b      	beq.n	800eea6 <USBD_StdDevReq+0x3a>
 800ee8e:	2b20      	cmp	r3, #32
 800ee90:	d14f      	bne.n	800ef32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	4798      	blx	r3
 800eea0:	4603      	mov	r3, r0
 800eea2:	73fb      	strb	r3, [r7, #15]
      break;
 800eea4:	e04a      	b.n	800ef3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	785b      	ldrb	r3, [r3, #1]
 800eeaa:	2b09      	cmp	r3, #9
 800eeac:	d83b      	bhi.n	800ef26 <USBD_StdDevReq+0xba>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <USBD_StdDevReq+0x48>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800ef09 	.word	0x0800ef09
 800eeb8:	0800ef1d 	.word	0x0800ef1d
 800eebc:	0800ef27 	.word	0x0800ef27
 800eec0:	0800ef13 	.word	0x0800ef13
 800eec4:	0800ef27 	.word	0x0800ef27
 800eec8:	0800eee7 	.word	0x0800eee7
 800eecc:	0800eedd 	.word	0x0800eedd
 800eed0:	0800ef27 	.word	0x0800ef27
 800eed4:	0800eeff 	.word	0x0800eeff
 800eed8:	0800eef1 	.word	0x0800eef1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 f9de 	bl	800f2a0 <USBD_GetDescriptor>
          break;
 800eee4:	e024      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fb6d 	bl	800f5c8 <USBD_SetAddress>
          break;
 800eeee:	e01f      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 fbac 	bl	800f650 <USBD_SetConfig>
 800eef8:	4603      	mov	r3, r0
 800eefa:	73fb      	strb	r3, [r7, #15]
          break;
 800eefc:	e018      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eefe:	6839      	ldr	r1, [r7, #0]
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fc4b 	bl	800f79c <USBD_GetConfig>
          break;
 800ef06:	e013      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ef08:	6839      	ldr	r1, [r7, #0]
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fc7c 	bl	800f808 <USBD_GetStatus>
          break;
 800ef10:	e00e      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ef12:	6839      	ldr	r1, [r7, #0]
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fcab 	bl	800f870 <USBD_SetFeature>
          break;
 800ef1a:	e009      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ef1c:	6839      	ldr	r1, [r7, #0]
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 fcba 	bl	800f898 <USBD_ClrFeature>
          break;
 800ef24:	e004      	b.n	800ef30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ef26:	6839      	ldr	r1, [r7, #0]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 fd11 	bl	800f950 <USBD_CtlError>
          break;
 800ef2e:	bf00      	nop
      }
      break;
 800ef30:	e004      	b.n	800ef3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 fd0b 	bl	800f950 <USBD_CtlError>
      break;
 800ef3a:	bf00      	nop
  }

  return ret;
 800ef3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop

0800ef48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef52:	2300      	movs	r3, #0
 800ef54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef5e:	2b40      	cmp	r3, #64	; 0x40
 800ef60:	d005      	beq.n	800ef6e <USBD_StdItfReq+0x26>
 800ef62:	2b40      	cmp	r3, #64	; 0x40
 800ef64:	d82f      	bhi.n	800efc6 <USBD_StdItfReq+0x7e>
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <USBD_StdItfReq+0x26>
 800ef6a:	2b20      	cmp	r3, #32
 800ef6c:	d12b      	bne.n	800efc6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	3b01      	subs	r3, #1
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d81d      	bhi.n	800efb8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	889b      	ldrh	r3, [r3, #4]
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d813      	bhi.n	800efae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	6839      	ldr	r1, [r7, #0]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	4798      	blx	r3
 800ef94:	4603      	mov	r3, r0
 800ef96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	88db      	ldrh	r3, [r3, #6]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d110      	bne.n	800efc2 <USBD_StdItfReq+0x7a>
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10d      	bne.n	800efc2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fd9d 	bl	800fae6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800efac:	e009      	b.n	800efc2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fccd 	bl	800f950 <USBD_CtlError>
          break;
 800efb6:	e004      	b.n	800efc2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fcc8 	bl	800f950 <USBD_CtlError>
          break;
 800efc0:	e000      	b.n	800efc4 <USBD_StdItfReq+0x7c>
          break;
 800efc2:	bf00      	nop
      }
      break;
 800efc4:	e004      	b.n	800efd0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 fcc1 	bl	800f950 <USBD_CtlError>
      break;
 800efce:	bf00      	nop
  }

  return ret;
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b084      	sub	sp, #16
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800efe4:	2300      	movs	r3, #0
 800efe6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	889b      	ldrh	r3, [r3, #4]
 800efec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eff6:	2b40      	cmp	r3, #64	; 0x40
 800eff8:	d007      	beq.n	800f00a <USBD_StdEPReq+0x30>
 800effa:	2b40      	cmp	r3, #64	; 0x40
 800effc:	f200 8145 	bhi.w	800f28a <USBD_StdEPReq+0x2b0>
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00c      	beq.n	800f01e <USBD_StdEPReq+0x44>
 800f004:	2b20      	cmp	r3, #32
 800f006:	f040 8140 	bne.w	800f28a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	4798      	blx	r3
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]
      break;
 800f01c:	e13a      	b.n	800f294 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	785b      	ldrb	r3, [r3, #1]
 800f022:	2b03      	cmp	r3, #3
 800f024:	d007      	beq.n	800f036 <USBD_StdEPReq+0x5c>
 800f026:	2b03      	cmp	r3, #3
 800f028:	f300 8129 	bgt.w	800f27e <USBD_StdEPReq+0x2a4>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d07f      	beq.n	800f130 <USBD_StdEPReq+0x156>
 800f030:	2b01      	cmp	r3, #1
 800f032:	d03c      	beq.n	800f0ae <USBD_StdEPReq+0xd4>
 800f034:	e123      	b.n	800f27e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	2b02      	cmp	r3, #2
 800f040:	d002      	beq.n	800f048 <USBD_StdEPReq+0x6e>
 800f042:	2b03      	cmp	r3, #3
 800f044:	d016      	beq.n	800f074 <USBD_StdEPReq+0x9a>
 800f046:	e02c      	b.n	800f0a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f048:	7bbb      	ldrb	r3, [r7, #14]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00d      	beq.n	800f06a <USBD_StdEPReq+0x90>
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
 800f050:	2b80      	cmp	r3, #128	; 0x80
 800f052:	d00a      	beq.n	800f06a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f054:	7bbb      	ldrb	r3, [r7, #14]
 800f056:	4619      	mov	r1, r3
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f001 f9f5 	bl	8010448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f05e:	2180      	movs	r1, #128	; 0x80
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f001 f9f1 	bl	8010448 <USBD_LL_StallEP>
 800f066:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f068:	e020      	b.n	800f0ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f06a:	6839      	ldr	r1, [r7, #0]
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 fc6f 	bl	800f950 <USBD_CtlError>
              break;
 800f072:	e01b      	b.n	800f0ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	885b      	ldrh	r3, [r3, #2]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10e      	bne.n	800f09a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00b      	beq.n	800f09a <USBD_StdEPReq+0xc0>
 800f082:	7bbb      	ldrb	r3, [r7, #14]
 800f084:	2b80      	cmp	r3, #128	; 0x80
 800f086:	d008      	beq.n	800f09a <USBD_StdEPReq+0xc0>
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	88db      	ldrh	r3, [r3, #6]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d104      	bne.n	800f09a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f090:	7bbb      	ldrb	r3, [r7, #14]
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f001 f9d7 	bl	8010448 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fd23 	bl	800fae6 <USBD_CtlSendStatus>

              break;
 800f0a0:	e004      	b.n	800f0ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fc53 	bl	800f950 <USBD_CtlError>
              break;
 800f0aa:	bf00      	nop
          }
          break;
 800f0ac:	e0ec      	b.n	800f288 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b02      	cmp	r3, #2
 800f0b8:	d002      	beq.n	800f0c0 <USBD_StdEPReq+0xe6>
 800f0ba:	2b03      	cmp	r3, #3
 800f0bc:	d016      	beq.n	800f0ec <USBD_StdEPReq+0x112>
 800f0be:	e030      	b.n	800f122 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00d      	beq.n	800f0e2 <USBD_StdEPReq+0x108>
 800f0c6:	7bbb      	ldrb	r3, [r7, #14]
 800f0c8:	2b80      	cmp	r3, #128	; 0x80
 800f0ca:	d00a      	beq.n	800f0e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f001 f9b9 	bl	8010448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0d6:	2180      	movs	r1, #128	; 0x80
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f001 f9b5 	bl	8010448 <USBD_LL_StallEP>
 800f0de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0e0:	e025      	b.n	800f12e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 fc33 	bl	800f950 <USBD_CtlError>
              break;
 800f0ea:	e020      	b.n	800f12e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	885b      	ldrh	r3, [r3, #2]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d11b      	bne.n	800f12c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f0f4:	7bbb      	ldrb	r3, [r7, #14]
 800f0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d004      	beq.n	800f108 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f0fe:	7bbb      	ldrb	r3, [r7, #14]
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f001 f9bf 	bl	8010486 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fcec 	bl	800fae6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	6839      	ldr	r1, [r7, #0]
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	4798      	blx	r3
 800f11c:	4603      	mov	r3, r0
 800f11e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f120:	e004      	b.n	800f12c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f122:	6839      	ldr	r1, [r7, #0]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 fc13 	bl	800f950 <USBD_CtlError>
              break;
 800f12a:	e000      	b.n	800f12e <USBD_StdEPReq+0x154>
              break;
 800f12c:	bf00      	nop
          }
          break;
 800f12e:	e0ab      	b.n	800f288 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f136:	b2db      	uxtb	r3, r3
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d002      	beq.n	800f142 <USBD_StdEPReq+0x168>
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	d032      	beq.n	800f1a6 <USBD_StdEPReq+0x1cc>
 800f140:	e097      	b.n	800f272 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f142:	7bbb      	ldrb	r3, [r7, #14]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <USBD_StdEPReq+0x17e>
 800f148:	7bbb      	ldrb	r3, [r7, #14]
 800f14a:	2b80      	cmp	r3, #128	; 0x80
 800f14c:	d004      	beq.n	800f158 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fbfd 	bl	800f950 <USBD_CtlError>
                break;
 800f156:	e091      	b.n	800f27c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da0b      	bge.n	800f178 <USBD_StdEPReq+0x19e>
 800f160:	7bbb      	ldrb	r3, [r7, #14]
 800f162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f166:	4613      	mov	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	3310      	adds	r3, #16
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	4413      	add	r3, r2
 800f174:	3304      	adds	r3, #4
 800f176:	e00b      	b.n	800f190 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f178:	7bbb      	ldrb	r3, [r7, #14]
 800f17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f17e:	4613      	mov	r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	4413      	add	r3, r2
 800f18e:	3304      	adds	r3, #4
 800f190:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	2200      	movs	r2, #0
 800f196:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2202      	movs	r2, #2
 800f19c:	4619      	mov	r1, r3
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fc47 	bl	800fa32 <USBD_CtlSendData>
              break;
 800f1a4:	e06a      	b.n	800f27c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f1a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	da11      	bge.n	800f1d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f1ae:	7bbb      	ldrb	r3, [r7, #14]
 800f1b0:	f003 020f 	and.w	r2, r3, #15
 800f1b4:	6879      	ldr	r1, [r7, #4]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4413      	add	r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	440b      	add	r3, r1
 800f1c0:	3324      	adds	r3, #36	; 0x24
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d117      	bne.n	800f1f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f1c8:	6839      	ldr	r1, [r7, #0]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fbc0 	bl	800f950 <USBD_CtlError>
                  break;
 800f1d0:	e054      	b.n	800f27c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f1d2:	7bbb      	ldrb	r3, [r7, #14]
 800f1d4:	f003 020f 	and.w	r2, r3, #15
 800f1d8:	6879      	ldr	r1, [r7, #4]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	4413      	add	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	440b      	add	r3, r1
 800f1e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d104      	bne.n	800f1f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fbad 	bl	800f950 <USBD_CtlError>
                  break;
 800f1f6:	e041      	b.n	800f27c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	da0b      	bge.n	800f218 <USBD_StdEPReq+0x23e>
 800f200:	7bbb      	ldrb	r3, [r7, #14]
 800f202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f206:	4613      	mov	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	4413      	add	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	3310      	adds	r3, #16
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	4413      	add	r3, r2
 800f214:	3304      	adds	r3, #4
 800f216:	e00b      	b.n	800f230 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f21e:	4613      	mov	r3, r2
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	4413      	add	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	4413      	add	r3, r2
 800f22e:	3304      	adds	r3, #4
 800f230:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f232:	7bbb      	ldrb	r3, [r7, #14]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <USBD_StdEPReq+0x264>
 800f238:	7bbb      	ldrb	r3, [r7, #14]
 800f23a:	2b80      	cmp	r3, #128	; 0x80
 800f23c:	d103      	bne.n	800f246 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	2200      	movs	r2, #0
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	e00e      	b.n	800f264 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f246:	7bbb      	ldrb	r3, [r7, #14]
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f001 f93a 	bl	80104c4 <USBD_LL_IsStallEP>
 800f250:	4603      	mov	r3, r0
 800f252:	2b00      	cmp	r3, #0
 800f254:	d003      	beq.n	800f25e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	2201      	movs	r2, #1
 800f25a:	601a      	str	r2, [r3, #0]
 800f25c:	e002      	b.n	800f264 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	2200      	movs	r2, #0
 800f262:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	2202      	movs	r2, #2
 800f268:	4619      	mov	r1, r3
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 fbe1 	bl	800fa32 <USBD_CtlSendData>
              break;
 800f270:	e004      	b.n	800f27c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f272:	6839      	ldr	r1, [r7, #0]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 fb6b 	bl	800f950 <USBD_CtlError>
              break;
 800f27a:	bf00      	nop
          }
          break;
 800f27c:	e004      	b.n	800f288 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fb65 	bl	800f950 <USBD_CtlError>
          break;
 800f286:	bf00      	nop
      }
      break;
 800f288:	e004      	b.n	800f294 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 fb5f 	bl	800f950 <USBD_CtlError>
      break;
 800f292:	bf00      	nop
  }

  return ret;
 800f294:	7bfb      	ldrb	r3, [r7, #15]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	885b      	ldrh	r3, [r3, #2]
 800f2ba:	0a1b      	lsrs	r3, r3, #8
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	2b0e      	cmp	r3, #14
 800f2c2:	f200 8152 	bhi.w	800f56a <USBD_GetDescriptor+0x2ca>
 800f2c6:	a201      	add	r2, pc, #4	; (adr r2, 800f2cc <USBD_GetDescriptor+0x2c>)
 800f2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2cc:	0800f33d 	.word	0x0800f33d
 800f2d0:	0800f355 	.word	0x0800f355
 800f2d4:	0800f395 	.word	0x0800f395
 800f2d8:	0800f56b 	.word	0x0800f56b
 800f2dc:	0800f56b 	.word	0x0800f56b
 800f2e0:	0800f50b 	.word	0x0800f50b
 800f2e4:	0800f537 	.word	0x0800f537
 800f2e8:	0800f56b 	.word	0x0800f56b
 800f2ec:	0800f56b 	.word	0x0800f56b
 800f2f0:	0800f56b 	.word	0x0800f56b
 800f2f4:	0800f56b 	.word	0x0800f56b
 800f2f8:	0800f56b 	.word	0x0800f56b
 800f2fc:	0800f56b 	.word	0x0800f56b
 800f300:	0800f56b 	.word	0x0800f56b
 800f304:	0800f309 	.word	0x0800f309
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f30e:	69db      	ldr	r3, [r3, #28]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00b      	beq.n	800f32c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f31a:	69db      	ldr	r3, [r3, #28]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	7c12      	ldrb	r2, [r2, #16]
 800f320:	f107 0108 	add.w	r1, r7, #8
 800f324:	4610      	mov	r0, r2
 800f326:	4798      	blx	r3
 800f328:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f32a:	e126      	b.n	800f57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f32c:	6839      	ldr	r1, [r7, #0]
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 fb0e 	bl	800f950 <USBD_CtlError>
        err++;
 800f334:	7afb      	ldrb	r3, [r7, #11]
 800f336:	3301      	adds	r3, #1
 800f338:	72fb      	strb	r3, [r7, #11]
      break;
 800f33a:	e11e      	b.n	800f57a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	7c12      	ldrb	r2, [r2, #16]
 800f348:	f107 0108 	add.w	r1, r7, #8
 800f34c:	4610      	mov	r0, r2
 800f34e:	4798      	blx	r3
 800f350:	60f8      	str	r0, [r7, #12]
      break;
 800f352:	e112      	b.n	800f57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	7c1b      	ldrb	r3, [r3, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10d      	bne.n	800f378 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f364:	f107 0208 	add.w	r2, r7, #8
 800f368:	4610      	mov	r0, r2
 800f36a:	4798      	blx	r3
 800f36c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	3301      	adds	r3, #1
 800f372:	2202      	movs	r2, #2
 800f374:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f376:	e100      	b.n	800f57a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f380:	f107 0208 	add.w	r2, r7, #8
 800f384:	4610      	mov	r0, r2
 800f386:	4798      	blx	r3
 800f388:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3301      	adds	r3, #1
 800f38e:	2202      	movs	r2, #2
 800f390:	701a      	strb	r2, [r3, #0]
      break;
 800f392:	e0f2      	b.n	800f57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	885b      	ldrh	r3, [r3, #2]
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	2b05      	cmp	r3, #5
 800f39c:	f200 80ac 	bhi.w	800f4f8 <USBD_GetDescriptor+0x258>
 800f3a0:	a201      	add	r2, pc, #4	; (adr r2, 800f3a8 <USBD_GetDescriptor+0x108>)
 800f3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a6:	bf00      	nop
 800f3a8:	0800f3c1 	.word	0x0800f3c1
 800f3ac:	0800f3f5 	.word	0x0800f3f5
 800f3b0:	0800f429 	.word	0x0800f429
 800f3b4:	0800f45d 	.word	0x0800f45d
 800f3b8:	0800f491 	.word	0x0800f491
 800f3bc:	0800f4c5 	.word	0x0800f4c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00b      	beq.n	800f3e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	7c12      	ldrb	r2, [r2, #16]
 800f3d8:	f107 0108 	add.w	r1, r7, #8
 800f3dc:	4610      	mov	r0, r2
 800f3de:	4798      	blx	r3
 800f3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3e2:	e091      	b.n	800f508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 fab2 	bl	800f950 <USBD_CtlError>
            err++;
 800f3ec:	7afb      	ldrb	r3, [r7, #11]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f3f2:	e089      	b.n	800f508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00b      	beq.n	800f418 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	7c12      	ldrb	r2, [r2, #16]
 800f40c:	f107 0108 	add.w	r1, r7, #8
 800f410:	4610      	mov	r0, r2
 800f412:	4798      	blx	r3
 800f414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f416:	e077      	b.n	800f508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fa98 	bl	800f950 <USBD_CtlError>
            err++;
 800f420:	7afb      	ldrb	r3, [r7, #11]
 800f422:	3301      	adds	r3, #1
 800f424:	72fb      	strb	r3, [r7, #11]
          break;
 800f426:	e06f      	b.n	800f508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00b      	beq.n	800f44c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f43a:	68db      	ldr	r3, [r3, #12]
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	7c12      	ldrb	r2, [r2, #16]
 800f440:	f107 0108 	add.w	r1, r7, #8
 800f444:	4610      	mov	r0, r2
 800f446:	4798      	blx	r3
 800f448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f44a:	e05d      	b.n	800f508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f44c:	6839      	ldr	r1, [r7, #0]
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 fa7e 	bl	800f950 <USBD_CtlError>
            err++;
 800f454:	7afb      	ldrb	r3, [r7, #11]
 800f456:	3301      	adds	r3, #1
 800f458:	72fb      	strb	r3, [r7, #11]
          break;
 800f45a:	e055      	b.n	800f508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00b      	beq.n	800f480 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f46e:	691b      	ldr	r3, [r3, #16]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	7c12      	ldrb	r2, [r2, #16]
 800f474:	f107 0108 	add.w	r1, r7, #8
 800f478:	4610      	mov	r0, r2
 800f47a:	4798      	blx	r3
 800f47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f47e:	e043      	b.n	800f508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f480:	6839      	ldr	r1, [r7, #0]
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fa64 	bl	800f950 <USBD_CtlError>
            err++;
 800f488:	7afb      	ldrb	r3, [r7, #11]
 800f48a:	3301      	adds	r3, #1
 800f48c:	72fb      	strb	r3, [r7, #11]
          break;
 800f48e:	e03b      	b.n	800f508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f496:	695b      	ldr	r3, [r3, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00b      	beq.n	800f4b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	7c12      	ldrb	r2, [r2, #16]
 800f4a8:	f107 0108 	add.w	r1, r7, #8
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	4798      	blx	r3
 800f4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4b2:	e029      	b.n	800f508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4b4:	6839      	ldr	r1, [r7, #0]
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fa4a 	bl	800f950 <USBD_CtlError>
            err++;
 800f4bc:	7afb      	ldrb	r3, [r7, #11]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4c2:	e021      	b.n	800f508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00b      	beq.n	800f4e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	7c12      	ldrb	r2, [r2, #16]
 800f4dc:	f107 0108 	add.w	r1, r7, #8
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	4798      	blx	r3
 800f4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4e6:	e00f      	b.n	800f508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fa30 	bl	800f950 <USBD_CtlError>
            err++;
 800f4f0:	7afb      	ldrb	r3, [r7, #11]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f4f6:	e007      	b.n	800f508 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 fa28 	bl	800f950 <USBD_CtlError>
          err++;
 800f500:	7afb      	ldrb	r3, [r7, #11]
 800f502:	3301      	adds	r3, #1
 800f504:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f506:	bf00      	nop
      }
      break;
 800f508:	e037      	b.n	800f57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	7c1b      	ldrb	r3, [r3, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51a:	f107 0208 	add.w	r2, r7, #8
 800f51e:	4610      	mov	r0, r2
 800f520:	4798      	blx	r3
 800f522:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f524:	e029      	b.n	800f57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fa11 	bl	800f950 <USBD_CtlError>
        err++;
 800f52e:	7afb      	ldrb	r3, [r7, #11]
 800f530:	3301      	adds	r3, #1
 800f532:	72fb      	strb	r3, [r7, #11]
      break;
 800f534:	e021      	b.n	800f57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	7c1b      	ldrb	r3, [r3, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d10d      	bne.n	800f55a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f546:	f107 0208 	add.w	r2, r7, #8
 800f54a:	4610      	mov	r0, r2
 800f54c:	4798      	blx	r3
 800f54e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3301      	adds	r3, #1
 800f554:	2207      	movs	r2, #7
 800f556:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f558:	e00f      	b.n	800f57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 f9f7 	bl	800f950 <USBD_CtlError>
        err++;
 800f562:	7afb      	ldrb	r3, [r7, #11]
 800f564:	3301      	adds	r3, #1
 800f566:	72fb      	strb	r3, [r7, #11]
      break;
 800f568:	e007      	b.n	800f57a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f9ef 	bl	800f950 <USBD_CtlError>
      err++;
 800f572:	7afb      	ldrb	r3, [r7, #11]
 800f574:	3301      	adds	r3, #1
 800f576:	72fb      	strb	r3, [r7, #11]
      break;
 800f578:	bf00      	nop
  }

  if (err != 0U)
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d11e      	bne.n	800f5be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	88db      	ldrh	r3, [r3, #6]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d016      	beq.n	800f5b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f588:	893b      	ldrh	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00e      	beq.n	800f5ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	88da      	ldrh	r2, [r3, #6]
 800f592:	893b      	ldrh	r3, [r7, #8]
 800f594:	4293      	cmp	r3, r2
 800f596:	bf28      	it	cs
 800f598:	4613      	movcs	r3, r2
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f59e:	893b      	ldrh	r3, [r7, #8]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	68f9      	ldr	r1, [r7, #12]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 fa44 	bl	800fa32 <USBD_CtlSendData>
 800f5aa:	e009      	b.n	800f5c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f5ac:	6839      	ldr	r1, [r7, #0]
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f9ce 	bl	800f950 <USBD_CtlError>
 800f5b4:	e004      	b.n	800f5c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 fa95 	bl	800fae6 <USBD_CtlSendStatus>
 800f5bc:	e000      	b.n	800f5c0 <USBD_GetDescriptor+0x320>
    return;
 800f5be:	bf00      	nop
  }
}
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop

0800f5c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	889b      	ldrh	r3, [r3, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d131      	bne.n	800f63e <USBD_SetAddress+0x76>
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	88db      	ldrh	r3, [r3, #6]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d12d      	bne.n	800f63e <USBD_SetAddress+0x76>
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	885b      	ldrh	r3, [r3, #2]
 800f5e6:	2b7f      	cmp	r3, #127	; 0x7f
 800f5e8:	d829      	bhi.n	800f63e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	885b      	ldrh	r3, [r3, #2]
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	d104      	bne.n	800f60c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 f9a3 	bl	800f950 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f60a:	e01d      	b.n	800f648 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	7bfa      	ldrb	r2, [r7, #15]
 800f610:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f614:	7bfb      	ldrb	r3, [r7, #15]
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 ff7f 	bl	801051c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fa61 	bl	800fae6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f624:	7bfb      	ldrb	r3, [r7, #15]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d004      	beq.n	800f634 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2202      	movs	r2, #2
 800f62e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f632:	e009      	b.n	800f648 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f63c:	e004      	b.n	800f648 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f63e:	6839      	ldr	r1, [r7, #0]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 f985 	bl	800f950 <USBD_CtlError>
  }
}
 800f646:	bf00      	nop
 800f648:	bf00      	nop
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f65a:	2300      	movs	r3, #0
 800f65c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	885b      	ldrh	r3, [r3, #2]
 800f662:	b2da      	uxtb	r2, r3
 800f664:	4b4c      	ldr	r3, [pc, #304]	; (800f798 <USBD_SetConfig+0x148>)
 800f666:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f668:	4b4b      	ldr	r3, [pc, #300]	; (800f798 <USBD_SetConfig+0x148>)
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d905      	bls.n	800f67c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 f96c 	bl	800f950 <USBD_CtlError>
    return USBD_FAIL;
 800f678:	2303      	movs	r3, #3
 800f67a:	e088      	b.n	800f78e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b02      	cmp	r3, #2
 800f686:	d002      	beq.n	800f68e <USBD_SetConfig+0x3e>
 800f688:	2b03      	cmp	r3, #3
 800f68a:	d025      	beq.n	800f6d8 <USBD_SetConfig+0x88>
 800f68c:	e071      	b.n	800f772 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f68e:	4b42      	ldr	r3, [pc, #264]	; (800f798 <USBD_SetConfig+0x148>)
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01c      	beq.n	800f6d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f696:	4b40      	ldr	r3, [pc, #256]	; (800f798 <USBD_SetConfig+0x148>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	461a      	mov	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f6a0:	4b3d      	ldr	r3, [pc, #244]	; (800f798 <USBD_SetConfig+0x148>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7ff f91e 	bl	800e8e8 <USBD_SetClassConfig>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d004      	beq.n	800f6c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f6b6:	6839      	ldr	r1, [r7, #0]
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 f949 	bl	800f950 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6be:	e065      	b.n	800f78c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 fa10 	bl	800fae6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2203      	movs	r2, #3
 800f6ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f6ce:	e05d      	b.n	800f78c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 fa08 	bl	800fae6 <USBD_CtlSendStatus>
      break;
 800f6d6:	e059      	b.n	800f78c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f6d8:	4b2f      	ldr	r3, [pc, #188]	; (800f798 <USBD_SetConfig+0x148>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d112      	bne.n	800f706 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2202      	movs	r2, #2
 800f6e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f6e8:	4b2b      	ldr	r3, [pc, #172]	; (800f798 <USBD_SetConfig+0x148>)
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f6f2:	4b29      	ldr	r3, [pc, #164]	; (800f798 <USBD_SetConfig+0x148>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7ff f911 	bl	800e920 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f9f1 	bl	800fae6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f704:	e042      	b.n	800f78c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f706:	4b24      	ldr	r3, [pc, #144]	; (800f798 <USBD_SetConfig+0x148>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	429a      	cmp	r2, r3
 800f712:	d02a      	beq.n	800f76a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	4619      	mov	r1, r3
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7ff f8ff 	bl	800e920 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f722:	4b1d      	ldr	r3, [pc, #116]	; (800f798 <USBD_SetConfig+0x148>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f72c:	4b1a      	ldr	r3, [pc, #104]	; (800f798 <USBD_SetConfig+0x148>)
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7ff f8d8 	bl	800e8e8 <USBD_SetClassConfig>
 800f738:	4603      	mov	r3, r0
 800f73a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00f      	beq.n	800f762 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 f903 	bl	800f950 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	4619      	mov	r1, r3
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7ff f8e4 	bl	800e920 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2202      	movs	r2, #2
 800f75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f760:	e014      	b.n	800f78c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f9bf 	bl	800fae6 <USBD_CtlSendStatus>
      break;
 800f768:	e010      	b.n	800f78c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 f9bb 	bl	800fae6 <USBD_CtlSendStatus>
      break;
 800f770:	e00c      	b.n	800f78c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f772:	6839      	ldr	r1, [r7, #0]
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f8eb 	bl	800f950 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f77a:	4b07      	ldr	r3, [pc, #28]	; (800f798 <USBD_SetConfig+0x148>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	4619      	mov	r1, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7ff f8cd 	bl	800e920 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f786:	2303      	movs	r3, #3
 800f788:	73fb      	strb	r3, [r7, #15]
      break;
 800f78a:	bf00      	nop
  }

  return ret;
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	200001ac 	.word	0x200001ac

0800f79c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	88db      	ldrh	r3, [r3, #6]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d004      	beq.n	800f7b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f7ae:	6839      	ldr	r1, [r7, #0]
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 f8cd 	bl	800f950 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f7b6:	e023      	b.n	800f800 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	dc02      	bgt.n	800f7ca <USBD_GetConfig+0x2e>
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dc03      	bgt.n	800f7d0 <USBD_GetConfig+0x34>
 800f7c8:	e015      	b.n	800f7f6 <USBD_GetConfig+0x5a>
 800f7ca:	2b03      	cmp	r3, #3
 800f7cc:	d00b      	beq.n	800f7e6 <USBD_GetConfig+0x4a>
 800f7ce:	e012      	b.n	800f7f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	3308      	adds	r3, #8
 800f7da:	2201      	movs	r2, #1
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f927 	bl	800fa32 <USBD_CtlSendData>
        break;
 800f7e4:	e00c      	b.n	800f800 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 f91f 	bl	800fa32 <USBD_CtlSendData>
        break;
 800f7f4:	e004      	b.n	800f800 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 f8a9 	bl	800f950 <USBD_CtlError>
        break;
 800f7fe:	bf00      	nop
}
 800f800:	bf00      	nop
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	3b01      	subs	r3, #1
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d81e      	bhi.n	800f85e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	88db      	ldrh	r3, [r3, #6]
 800f824:	2b02      	cmp	r3, #2
 800f826:	d004      	beq.n	800f832 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f890 	bl	800f950 <USBD_CtlError>
        break;
 800f830:	e01a      	b.n	800f868 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2201      	movs	r2, #1
 800f836:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d005      	beq.n	800f84e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	f043 0202 	orr.w	r2, r3, #2
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	330c      	adds	r3, #12
 800f852:	2202      	movs	r2, #2
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 f8eb 	bl	800fa32 <USBD_CtlSendData>
      break;
 800f85c:	e004      	b.n	800f868 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 f875 	bl	800f950 <USBD_CtlError>
      break;
 800f866:	bf00      	nop
  }
}
 800f868:	bf00      	nop
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	885b      	ldrh	r3, [r3, #2]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d106      	bne.n	800f890 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2201      	movs	r2, #1
 800f886:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 f92b 	bl	800fae6 <USBD_CtlSendStatus>
  }
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d80b      	bhi.n	800f8c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	885b      	ldrh	r3, [r3, #2]
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d10c      	bne.n	800f8d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f910 	bl	800fae6 <USBD_CtlSendStatus>
      }
      break;
 800f8c6:	e004      	b.n	800f8d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 f840 	bl	800f950 <USBD_CtlError>
      break;
 800f8d0:	e000      	b.n	800f8d4 <USBD_ClrFeature+0x3c>
      break;
 800f8d2:	bf00      	nop
  }
}
 800f8d4:	bf00      	nop
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	781a      	ldrb	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	781a      	ldrb	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3301      	adds	r3, #1
 800f904:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f7ff fa91 	bl	800ee2e <SWAPBYTE>
 800f90c:	4603      	mov	r3, r0
 800f90e:	461a      	mov	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	3301      	adds	r3, #1
 800f918:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	3301      	adds	r3, #1
 800f91e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f7ff fa84 	bl	800ee2e <SWAPBYTE>
 800f926:	4603      	mov	r3, r0
 800f928:	461a      	mov	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	3301      	adds	r3, #1
 800f932:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	3301      	adds	r3, #1
 800f938:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7ff fa77 	bl	800ee2e <SWAPBYTE>
 800f940:	4603      	mov	r3, r0
 800f942:	461a      	mov	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	80da      	strh	r2, [r3, #6]
}
 800f948:	bf00      	nop
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f95a:	2180      	movs	r1, #128	; 0x80
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 fd73 	bl	8010448 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f962:	2100      	movs	r1, #0
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fd6f 	bl	8010448 <USBD_LL_StallEP>
}
 800f96a:	bf00      	nop
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b086      	sub	sp, #24
 800f976:	af00      	add	r7, sp, #0
 800f978:	60f8      	str	r0, [r7, #12]
 800f97a:	60b9      	str	r1, [r7, #8]
 800f97c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d036      	beq.n	800f9f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f98c:	6938      	ldr	r0, [r7, #16]
 800f98e:	f000 f836 	bl	800f9fe <USBD_GetLen>
 800f992:	4603      	mov	r3, r0
 800f994:	3301      	adds	r3, #1
 800f996:	b29b      	uxth	r3, r3
 800f998:	005b      	lsls	r3, r3, #1
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f9a0:	7dfb      	ldrb	r3, [r7, #23]
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	7812      	ldrb	r2, [r2, #0]
 800f9aa:	701a      	strb	r2, [r3, #0]
  idx++;
 800f9ac:	7dfb      	ldrb	r3, [r7, #23]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
 800f9b4:	68ba      	ldr	r2, [r7, #8]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	2203      	movs	r2, #3
 800f9ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f9c2:	e013      	b.n	800f9ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f9c4:	7dfb      	ldrb	r3, [r7, #23]
 800f9c6:	68ba      	ldr	r2, [r7, #8]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	7812      	ldrb	r2, [r2, #0]
 800f9ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	613b      	str	r3, [r7, #16]
    idx++;
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f9dc:	7dfb      	ldrb	r3, [r7, #23]
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d1e7      	bne.n	800f9c4 <USBD_GetString+0x52>
 800f9f4:	e000      	b.n	800f9f8 <USBD_GetString+0x86>
    return;
 800f9f6:	bf00      	nop
  }
}
 800f9f8:	3718      	adds	r7, #24
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b085      	sub	sp, #20
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa06:	2300      	movs	r3, #0
 800fa08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa0e:	e005      	b.n	800fa1c <USBD_GetLen+0x1e>
  {
    len++;
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
 800fa12:	3301      	adds	r3, #1
 800fa14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1f5      	bne.n	800fa10 <USBD_GetLen+0x12>
  }

  return len;
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3714      	adds	r7, #20
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr

0800fa32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	60f8      	str	r0, [r7, #12]
 800fa3a:	60b9      	str	r1, [r7, #8]
 800fa3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2202      	movs	r2, #2
 800fa42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	2100      	movs	r1, #0
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 fd7e 	bl	801055a <USBD_LL_Transmit>

  return USBD_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	2100      	movs	r1, #0
 800fa7a:	68f8      	ldr	r0, [r7, #12]
 800fa7c:	f000 fd6d 	bl	801055a <USBD_LL_Transmit>

  return USBD_OK;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	60f8      	str	r0, [r7, #12]
 800fa92:	60b9      	str	r1, [r7, #8]
 800fa94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2203      	movs	r2, #3
 800fa9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	2100      	movs	r1, #0
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f000 fd71 	bl	801059c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	68ba      	ldr	r2, [r7, #8]
 800fad4:	2100      	movs	r1, #0
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	f000 fd60 	bl	801059c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2204      	movs	r2, #4
 800faf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800faf6:	2300      	movs	r3, #0
 800faf8:	2200      	movs	r2, #0
 800fafa:	2100      	movs	r1, #0
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 fd2c 	bl	801055a <USBD_LL_Transmit>

  return USBD_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2205      	movs	r2, #5
 800fb18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	2200      	movs	r2, #0
 800fb20:	2100      	movs	r1, #0
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fd3a 	bl	801059c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb28:	2300      	movs	r3, #0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
	...

0800fb34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	4912      	ldr	r1, [pc, #72]	; (800fb84 <MX_USB_DEVICE_Init+0x50>)
 800fb3c:	4812      	ldr	r0, [pc, #72]	; (800fb88 <MX_USB_DEVICE_Init+0x54>)
 800fb3e:	f7fe fe65 	bl	800e80c <USBD_Init>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fb48:	f7f1 fba4 	bl	8001294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fb4c:	490f      	ldr	r1, [pc, #60]	; (800fb8c <MX_USB_DEVICE_Init+0x58>)
 800fb4e:	480e      	ldr	r0, [pc, #56]	; (800fb88 <MX_USB_DEVICE_Init+0x54>)
 800fb50:	f7fe fe8c 	bl	800e86c <USBD_RegisterClass>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fb5a:	f7f1 fb9b 	bl	8001294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fb5e:	490c      	ldr	r1, [pc, #48]	; (800fb90 <MX_USB_DEVICE_Init+0x5c>)
 800fb60:	4809      	ldr	r0, [pc, #36]	; (800fb88 <MX_USB_DEVICE_Init+0x54>)
 800fb62:	f7fe fdad 	bl	800e6c0 <USBD_CDC_RegisterInterface>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fb6c:	f7f1 fb92 	bl	8001294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fb70:	4805      	ldr	r0, [pc, #20]	; (800fb88 <MX_USB_DEVICE_Init+0x54>)
 800fb72:	f7fe fea2 	bl	800e8ba <USBD_Start>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fb7c:	f7f1 fb8a 	bl	8001294 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fb80:	bf00      	nop
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	20000130 	.word	0x20000130
 800fb88:	200012c4 	.word	0x200012c4
 800fb8c:	20000018 	.word	0x20000018
 800fb90:	2000011c 	.word	0x2000011c

0800fb94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fb98:	2200      	movs	r2, #0
 800fb9a:	4905      	ldr	r1, [pc, #20]	; (800fbb0 <CDC_Init_FS+0x1c>)
 800fb9c:	4805      	ldr	r0, [pc, #20]	; (800fbb4 <CDC_Init_FS+0x20>)
 800fb9e:	f7fe fda4 	bl	800e6ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fba2:	4905      	ldr	r1, [pc, #20]	; (800fbb8 <CDC_Init_FS+0x24>)
 800fba4:	4803      	ldr	r0, [pc, #12]	; (800fbb4 <CDC_Init_FS+0x20>)
 800fba6:	f7fe fdbe 	bl	800e726 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fbaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	20001d94 	.word	0x20001d94
 800fbb4:	200012c4 	.word	0x200012c4
 800fbb8:	20001594 	.word	0x20001594

0800fbbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fbc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	6039      	str	r1, [r7, #0]
 800fbd6:	71fb      	strb	r3, [r7, #7]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fbdc:	79fb      	ldrb	r3, [r7, #7]
 800fbde:	2b23      	cmp	r3, #35	; 0x23
 800fbe0:	f200 808c 	bhi.w	800fcfc <CDC_Control_FS+0x130>
 800fbe4:	a201      	add	r2, pc, #4	; (adr r2, 800fbec <CDC_Control_FS+0x20>)
 800fbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbea:	bf00      	nop
 800fbec:	0800fcfd 	.word	0x0800fcfd
 800fbf0:	0800fcfd 	.word	0x0800fcfd
 800fbf4:	0800fcfd 	.word	0x0800fcfd
 800fbf8:	0800fcfd 	.word	0x0800fcfd
 800fbfc:	0800fcfd 	.word	0x0800fcfd
 800fc00:	0800fcfd 	.word	0x0800fcfd
 800fc04:	0800fcfd 	.word	0x0800fcfd
 800fc08:	0800fcfd 	.word	0x0800fcfd
 800fc0c:	0800fcfd 	.word	0x0800fcfd
 800fc10:	0800fcfd 	.word	0x0800fcfd
 800fc14:	0800fcfd 	.word	0x0800fcfd
 800fc18:	0800fcfd 	.word	0x0800fcfd
 800fc1c:	0800fcfd 	.word	0x0800fcfd
 800fc20:	0800fcfd 	.word	0x0800fcfd
 800fc24:	0800fcfd 	.word	0x0800fcfd
 800fc28:	0800fcfd 	.word	0x0800fcfd
 800fc2c:	0800fcfd 	.word	0x0800fcfd
 800fc30:	0800fcfd 	.word	0x0800fcfd
 800fc34:	0800fcfd 	.word	0x0800fcfd
 800fc38:	0800fcfd 	.word	0x0800fcfd
 800fc3c:	0800fcfd 	.word	0x0800fcfd
 800fc40:	0800fcfd 	.word	0x0800fcfd
 800fc44:	0800fcfd 	.word	0x0800fcfd
 800fc48:	0800fcfd 	.word	0x0800fcfd
 800fc4c:	0800fcfd 	.word	0x0800fcfd
 800fc50:	0800fcfd 	.word	0x0800fcfd
 800fc54:	0800fcfd 	.word	0x0800fcfd
 800fc58:	0800fcfd 	.word	0x0800fcfd
 800fc5c:	0800fcfd 	.word	0x0800fcfd
 800fc60:	0800fcfd 	.word	0x0800fcfd
 800fc64:	0800fcfd 	.word	0x0800fcfd
 800fc68:	0800fcfd 	.word	0x0800fcfd
 800fc6c:	0800fc7d 	.word	0x0800fc7d
 800fc70:	0800fcb7 	.word	0x0800fcb7
 800fc74:	0800fcfd 	.word	0x0800fcfd
 800fc78:	0800fcfd 	.word	0x0800fcfd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	USB_VCP_Parameters[0] = pbuf[0];
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	781a      	ldrb	r2, [r3, #0]
 800fc80:	4b22      	ldr	r3, [pc, #136]	; (800fd0c <CDC_Control_FS+0x140>)
 800fc82:	701a      	strb	r2, [r3, #0]
    	USB_VCP_Parameters[1] = pbuf[1];
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	785a      	ldrb	r2, [r3, #1]
 800fc88:	4b20      	ldr	r3, [pc, #128]	; (800fd0c <CDC_Control_FS+0x140>)
 800fc8a:	705a      	strb	r2, [r3, #1]
    	USB_VCP_Parameters[2] = pbuf[2];
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	789a      	ldrb	r2, [r3, #2]
 800fc90:	4b1e      	ldr	r3, [pc, #120]	; (800fd0c <CDC_Control_FS+0x140>)
 800fc92:	709a      	strb	r2, [r3, #2]
    	USB_VCP_Parameters[3] = pbuf[3];
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	78da      	ldrb	r2, [r3, #3]
 800fc98:	4b1c      	ldr	r3, [pc, #112]	; (800fd0c <CDC_Control_FS+0x140>)
 800fc9a:	70da      	strb	r2, [r3, #3]
    	USB_VCP_Parameters[4] = pbuf[4];
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	791a      	ldrb	r2, [r3, #4]
 800fca0:	4b1a      	ldr	r3, [pc, #104]	; (800fd0c <CDC_Control_FS+0x140>)
 800fca2:	711a      	strb	r2, [r3, #4]
    	USB_VCP_Parameters[5] = pbuf[5];
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	795a      	ldrb	r2, [r3, #5]
 800fca8:	4b18      	ldr	r3, [pc, #96]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcaa:	715a      	strb	r2, [r3, #5]
    	USB_VCP_Parameters[6] = pbuf[6];
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	799a      	ldrb	r2, [r3, #6]
 800fcb0:	4b16      	ldr	r3, [pc, #88]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcb2:	719a      	strb	r2, [r3, #6]
    break;
 800fcb4:	e023      	b.n	800fcfe <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = USB_VCP_Parameters[0];
 800fcb6:	4b15      	ldr	r3, [pc, #84]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcb8:	781a      	ldrb	r2, [r3, #0]
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = USB_VCP_Parameters[1];
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	4a12      	ldr	r2, [pc, #72]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcc4:	7852      	ldrb	r2, [r2, #1]
 800fcc6:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = USB_VCP_Parameters[2];
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	3302      	adds	r3, #2
 800fccc:	4a0f      	ldr	r2, [pc, #60]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcce:	7892      	ldrb	r2, [r2, #2]
 800fcd0:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = USB_VCP_Parameters[3];
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	3303      	adds	r3, #3
 800fcd6:	4a0d      	ldr	r2, [pc, #52]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcd8:	78d2      	ldrb	r2, [r2, #3]
 800fcda:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = USB_VCP_Parameters[4];
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	3304      	adds	r3, #4
 800fce0:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <CDC_Control_FS+0x140>)
 800fce2:	7912      	ldrb	r2, [r2, #4]
 800fce4:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = USB_VCP_Parameters[5];
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	3305      	adds	r3, #5
 800fcea:	4a08      	ldr	r2, [pc, #32]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcec:	7952      	ldrb	r2, [r2, #5]
 800fcee:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = USB_VCP_Parameters[6];
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	3306      	adds	r3, #6
 800fcf4:	4a05      	ldr	r2, [pc, #20]	; (800fd0c <CDC_Control_FS+0x140>)
 800fcf6:	7992      	ldrb	r2, [r2, #6]
 800fcf8:	701a      	strb	r2, [r3, #0]
    break;
 800fcfa:	e000      	b.n	800fcfe <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fcfc:	bf00      	nop
  }

  return (USBD_OK);
 800fcfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	200003d0 	.word	0x200003d0

0800fd10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd1a:	6879      	ldr	r1, [r7, #4]
 800fd1c:	480c      	ldr	r0, [pc, #48]	; (800fd50 <CDC_Receive_FS+0x40>)
 800fd1e:	f7fe fd02 	bl	800e726 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd22:	480b      	ldr	r0, [pc, #44]	; (800fd50 <CDC_Receive_FS+0x40>)
 800fd24:	f7fe fd48 	bl	800e7b8 <USBD_CDC_ReceivePacket>

  PDM_USB_Receive(Buf, *Len);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	4619      	mov	r1, r3
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7f2 fb31 	bl	8002398 <PDM_USB_Receive>
  PDM_USB_Transmit_Config(Buf, *Len);
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7f2 fbcc 	bl	80024dc <PDM_USB_Transmit_Config>

  return (USBD_OK);
 800fd44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	200012c4 	.word	0x200012c4

0800fd54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fd64:	4b0d      	ldr	r3, [pc, #52]	; (800fd9c <CDC_Transmit_FS+0x48>)
 800fd66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d001      	beq.n	800fd7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fd76:	2301      	movs	r3, #1
 800fd78:	e00b      	b.n	800fd92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fd7a:	887b      	ldrh	r3, [r7, #2]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	6879      	ldr	r1, [r7, #4]
 800fd80:	4806      	ldr	r0, [pc, #24]	; (800fd9c <CDC_Transmit_FS+0x48>)
 800fd82:	f7fe fcb2 	bl	800e6ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fd86:	4805      	ldr	r0, [pc, #20]	; (800fd9c <CDC_Transmit_FS+0x48>)
 800fd88:	f7fe fce6 	bl	800e758 <USBD_CDC_TransmitPacket>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	200012c4 	.word	0x200012c4

0800fda0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b087      	sub	sp, #28
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fdb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	371c      	adds	r7, #28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
	...

0800fdc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	6039      	str	r1, [r7, #0]
 800fdce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	2212      	movs	r2, #18
 800fdd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fdd6:	4b03      	ldr	r3, [pc, #12]	; (800fde4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	20000150 	.word	0x20000150

0800fde8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	4603      	mov	r3, r0
 800fdf0:	6039      	str	r1, [r7, #0]
 800fdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	2204      	movs	r2, #4
 800fdf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fdfa:	4b03      	ldr	r3, [pc, #12]	; (800fe08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	20000170 	.word	0x20000170

0800fe0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	6039      	str	r1, [r7, #0]
 800fe16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe18:	79fb      	ldrb	r3, [r7, #7]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d105      	bne.n	800fe2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	4907      	ldr	r1, [pc, #28]	; (800fe40 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe22:	4808      	ldr	r0, [pc, #32]	; (800fe44 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe24:	f7ff fda5 	bl	800f972 <USBD_GetString>
 800fe28:	e004      	b.n	800fe34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	4904      	ldr	r1, [pc, #16]	; (800fe40 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe2e:	4805      	ldr	r0, [pc, #20]	; (800fe44 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe30:	f7ff fd9f 	bl	800f972 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe34:	4b02      	ldr	r3, [pc, #8]	; (800fe40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	20002594 	.word	0x20002594
 800fe44:	08010798 	.word	0x08010798

0800fe48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	4603      	mov	r3, r0
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	4904      	ldr	r1, [pc, #16]	; (800fe68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe58:	4804      	ldr	r0, [pc, #16]	; (800fe6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe5a:	f7ff fd8a 	bl	800f972 <USBD_GetString>
  return USBD_StrDesc;
 800fe5e:	4b02      	ldr	r3, [pc, #8]	; (800fe68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	20002594 	.word	0x20002594
 800fe6c:	080107b0 	.word	0x080107b0

0800fe70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	6039      	str	r1, [r7, #0]
 800fe7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	221a      	movs	r2, #26
 800fe80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe82:	f000 f855 	bl	800ff30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe86:	4b02      	ldr	r3, [pc, #8]	; (800fe90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	20000174 	.word	0x20000174

0800fe94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	6039      	str	r1, [r7, #0]
 800fe9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fea0:	79fb      	ldrb	r3, [r7, #7]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d105      	bne.n	800feb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	4907      	ldr	r1, [pc, #28]	; (800fec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800feaa:	4808      	ldr	r0, [pc, #32]	; (800fecc <USBD_FS_ConfigStrDescriptor+0x38>)
 800feac:	f7ff fd61 	bl	800f972 <USBD_GetString>
 800feb0:	e004      	b.n	800febc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800feb2:	683a      	ldr	r2, [r7, #0]
 800feb4:	4904      	ldr	r1, [pc, #16]	; (800fec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800feb6:	4805      	ldr	r0, [pc, #20]	; (800fecc <USBD_FS_ConfigStrDescriptor+0x38>)
 800feb8:	f7ff fd5b 	bl	800f972 <USBD_GetString>
  }
  return USBD_StrDesc;
 800febc:	4b02      	ldr	r3, [pc, #8]	; (800fec8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3708      	adds	r7, #8
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	20002594 	.word	0x20002594
 800fecc:	080107c4 	.word	0x080107c4

0800fed0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	6039      	str	r1, [r7, #0]
 800feda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d105      	bne.n	800feee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fee2:	683a      	ldr	r2, [r7, #0]
 800fee4:	4907      	ldr	r1, [pc, #28]	; (800ff04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fee6:	4808      	ldr	r0, [pc, #32]	; (800ff08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fee8:	f7ff fd43 	bl	800f972 <USBD_GetString>
 800feec:	e004      	b.n	800fef8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	4904      	ldr	r1, [pc, #16]	; (800ff04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fef2:	4805      	ldr	r0, [pc, #20]	; (800ff08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fef4:	f7ff fd3d 	bl	800f972 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fef8:	4b02      	ldr	r3, [pc, #8]	; (800ff04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	20002594 	.word	0x20002594
 800ff08:	080107d0 	.word	0x080107d0

0800ff0c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	4603      	mov	r3, r0
 800ff14:	6039      	str	r1, [r7, #0]
 800ff16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	220c      	movs	r2, #12
 800ff1c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ff1e:	4b03      	ldr	r3, [pc, #12]	; (800ff2c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	20000164 	.word	0x20000164

0800ff30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff36:	4b0f      	ldr	r3, [pc, #60]	; (800ff74 <Get_SerialNum+0x44>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff3c:	4b0e      	ldr	r3, [pc, #56]	; (800ff78 <Get_SerialNum+0x48>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff42:	4b0e      	ldr	r3, [pc, #56]	; (800ff7c <Get_SerialNum+0x4c>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d009      	beq.n	800ff6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff56:	2208      	movs	r2, #8
 800ff58:	4909      	ldr	r1, [pc, #36]	; (800ff80 <Get_SerialNum+0x50>)
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f000 f814 	bl	800ff88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff60:	2204      	movs	r2, #4
 800ff62:	4908      	ldr	r1, [pc, #32]	; (800ff84 <Get_SerialNum+0x54>)
 800ff64:	68b8      	ldr	r0, [r7, #8]
 800ff66:	f000 f80f 	bl	800ff88 <IntToUnicode>
  }
}
 800ff6a:	bf00      	nop
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	1fff7a10 	.word	0x1fff7a10
 800ff78:	1fff7a14 	.word	0x1fff7a14
 800ff7c:	1fff7a18 	.word	0x1fff7a18
 800ff80:	20000176 	.word	0x20000176
 800ff84:	20000186 	.word	0x20000186

0800ff88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b087      	sub	sp, #28
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	4613      	mov	r3, r2
 800ff94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]
 800ff9e:	e027      	b.n	800fff0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	0f1b      	lsrs	r3, r3, #28
 800ffa4:	2b09      	cmp	r3, #9
 800ffa6:	d80b      	bhi.n	800ffc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	0f1b      	lsrs	r3, r3, #28
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	7dfb      	ldrb	r3, [r7, #23]
 800ffb0:	005b      	lsls	r3, r3, #1
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	440b      	add	r3, r1
 800ffb8:	3230      	adds	r2, #48	; 0x30
 800ffba:	b2d2      	uxtb	r2, r2
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	e00a      	b.n	800ffd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	0f1b      	lsrs	r3, r3, #28
 800ffc4:	b2da      	uxtb	r2, r3
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	4619      	mov	r1, r3
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	440b      	add	r3, r1
 800ffd0:	3237      	adds	r2, #55	; 0x37
 800ffd2:	b2d2      	uxtb	r2, r2
 800ffd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	011b      	lsls	r3, r3, #4
 800ffda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ffdc:	7dfb      	ldrb	r3, [r7, #23]
 800ffde:	005b      	lsls	r3, r3, #1
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	3301      	adds	r3, #1
 800ffee:	75fb      	strb	r3, [r7, #23]
 800fff0:	7dfa      	ldrb	r2, [r7, #23]
 800fff2:	79fb      	ldrb	r3, [r7, #7]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d3d3      	bcc.n	800ffa0 <IntToUnicode+0x18>
  }
}
 800fff8:	bf00      	nop
 800fffa:	bf00      	nop
 800fffc:	371c      	adds	r7, #28
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
	...

08010008 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b0a0      	sub	sp, #128	; 0x80
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010010:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010014:	2200      	movs	r2, #0
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	605a      	str	r2, [r3, #4]
 801001a:	609a      	str	r2, [r3, #8]
 801001c:	60da      	str	r2, [r3, #12]
 801001e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010020:	f107 0310 	add.w	r3, r7, #16
 8010024:	225c      	movs	r2, #92	; 0x5c
 8010026:	2100      	movs	r1, #0
 8010028:	4618      	mov	r0, r3
 801002a:	f000 fba1 	bl	8010770 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010036:	d161      	bne.n	80100fc <HAL_PCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010038:	f44f 7380 	mov.w	r3, #256	; 0x100
 801003c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 801003e:	2304      	movs	r3, #4
 8010040:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8010042:	2360      	movs	r3, #96	; 0x60
 8010044:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8010046:	2302      	movs	r3, #2
 8010048:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 801004a:	2304      	movs	r3, #4
 801004c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 801004e:	2301      	movs	r3, #1
 8010050:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8010052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010056:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010058:	f107 0310 	add.w	r3, r7, #16
 801005c:	4618      	mov	r0, r3
 801005e:	f7fa fd0f 	bl	800aa80 <HAL_RCCEx_PeriphCLKConfig>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8010068:	f7f1 f914 	bl	8001294 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801006c:	2300      	movs	r3, #0
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	4b24      	ldr	r3, [pc, #144]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 8010072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010074:	4a23      	ldr	r2, [pc, #140]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 8010076:	f043 0301 	orr.w	r3, r3, #1
 801007a:	6313      	str	r3, [r2, #48]	; 0x30
 801007c:	4b21      	ldr	r3, [pc, #132]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 801007e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010080:	f003 0301 	and.w	r3, r3, #1
 8010084:	60fb      	str	r3, [r7, #12]
 8010086:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010088:	f44f 7300 	mov.w	r3, #512	; 0x200
 801008c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801008e:	2300      	movs	r3, #0
 8010090:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010092:	2300      	movs	r3, #0
 8010094:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010096:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801009a:	4619      	mov	r1, r3
 801009c:	481a      	ldr	r0, [pc, #104]	; (8010108 <HAL_PCD_MspInit+0x100>)
 801009e:	f7f6 fa33 	bl	8006508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80100a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80100a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100a8:	2302      	movs	r3, #2
 80100aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100ac:	2300      	movs	r3, #0
 80100ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100b0:	2303      	movs	r3, #3
 80100b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80100b4:	230a      	movs	r3, #10
 80100b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80100bc:	4619      	mov	r1, r3
 80100be:	4812      	ldr	r0, [pc, #72]	; (8010108 <HAL_PCD_MspInit+0x100>)
 80100c0:	f7f6 fa22 	bl	8006508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80100c4:	4b0f      	ldr	r3, [pc, #60]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 80100c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100c8:	4a0e      	ldr	r2, [pc, #56]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 80100ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ce:	6353      	str	r3, [r2, #52]	; 0x34
 80100d0:	2300      	movs	r3, #0
 80100d2:	60bb      	str	r3, [r7, #8]
 80100d4:	4b0b      	ldr	r3, [pc, #44]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 80100d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100d8:	4a0a      	ldr	r2, [pc, #40]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 80100da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80100de:	6453      	str	r3, [r2, #68]	; 0x44
 80100e0:	4b08      	ldr	r3, [pc, #32]	; (8010104 <HAL_PCD_MspInit+0xfc>)
 80100e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100e8:	60bb      	str	r3, [r7, #8]
 80100ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80100ec:	2200      	movs	r2, #0
 80100ee:	2100      	movs	r1, #0
 80100f0:	2043      	movs	r0, #67	; 0x43
 80100f2:	f7f5 fdca 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80100f6:	2043      	movs	r0, #67	; 0x43
 80100f8:	f7f5 fde3 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80100fc:	bf00      	nop
 80100fe:	3780      	adds	r7, #128	; 0x80
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	40023800 	.word	0x40023800
 8010108:	40020000 	.word	0x40020000

0801010c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010120:	4619      	mov	r1, r3
 8010122:	4610      	mov	r0, r2
 8010124:	f7fe fc14 	bl	800e950 <USBD_LL_SetupStage>
}
 8010128:	bf00      	nop
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010142:	78fa      	ldrb	r2, [r7, #3]
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	4613      	mov	r3, r2
 8010148:	00db      	lsls	r3, r3, #3
 801014a:	1a9b      	subs	r3, r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	78fb      	ldrb	r3, [r7, #3]
 8010158:	4619      	mov	r1, r3
 801015a:	f7fe fc4e 	bl	800e9fa <USBD_LL_DataOutStage>
}
 801015e:	bf00      	nop
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010178:	78fa      	ldrb	r2, [r7, #3]
 801017a:	6879      	ldr	r1, [r7, #4]
 801017c:	4613      	mov	r3, r2
 801017e:	00db      	lsls	r3, r3, #3
 8010180:	1a9b      	subs	r3, r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	440b      	add	r3, r1
 8010186:	3348      	adds	r3, #72	; 0x48
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	4619      	mov	r1, r3
 801018e:	f7fe fc97 	bl	800eac0 <USBD_LL_DataInStage>
}
 8010192:	bf00      	nop
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b082      	sub	sp, #8
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fe fdab 	bl	800ed04 <USBD_LL_SOF>
}
 80101ae:	bf00      	nop
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80101be:	2301      	movs	r3, #1
 80101c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d102      	bne.n	80101d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80101ca:	2300      	movs	r3, #0
 80101cc:	73fb      	strb	r3, [r7, #15]
 80101ce:	e008      	b.n	80101e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d102      	bne.n	80101de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80101d8:	2301      	movs	r3, #1
 80101da:	73fb      	strb	r3, [r7, #15]
 80101dc:	e001      	b.n	80101e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80101de:	f7f1 f859 	bl	8001294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101e8:	7bfa      	ldrb	r2, [r7, #15]
 80101ea:	4611      	mov	r1, r2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe fd4b 	bl	800ec88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe fcf7 	bl	800ebec <USBD_LL_Reset>
}
 80101fe:	bf00      	nop
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010216:	4618      	mov	r0, r3
 8010218:	f7fe fd46 	bl	800eca8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	6812      	ldr	r2, [r2, #0]
 801022a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801022e:	f043 0301 	orr.w	r3, r3, #1
 8010232:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a1b      	ldr	r3, [r3, #32]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d005      	beq.n	8010248 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801023c:	4b04      	ldr	r3, [pc, #16]	; (8010250 <HAL_PCD_SuspendCallback+0x48>)
 801023e:	691b      	ldr	r3, [r3, #16]
 8010240:	4a03      	ldr	r2, [pc, #12]	; (8010250 <HAL_PCD_SuspendCallback+0x48>)
 8010242:	f043 0306 	orr.w	r3, r3, #6
 8010246:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010248:	bf00      	nop
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	e000ed00 	.word	0xe000ed00

08010254 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe fd36 	bl	800ecd4 <USBD_LL_Resume>
}
 8010268:	bf00      	nop
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	460b      	mov	r3, r1
 801027a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010282:	78fa      	ldrb	r2, [r7, #3]
 8010284:	4611      	mov	r1, r2
 8010286:	4618      	mov	r0, r3
 8010288:	f7fe fd84 	bl	800ed94 <USBD_LL_IsoOUTIncomplete>
}
 801028c:	bf00      	nop
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	460b      	mov	r3, r1
 801029e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102a6:	78fa      	ldrb	r2, [r7, #3]
 80102a8:	4611      	mov	r1, r2
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fe fd4c 	bl	800ed48 <USBD_LL_IsoINIncomplete>
}
 80102b0:	bf00      	nop
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe fd8a 	bl	800ede0 <USBD_LL_DevConnected>
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe fd87 	bl	800edf6 <USBD_LL_DevDisconnected>
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d13c      	bne.n	801037a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010300:	4a20      	ldr	r2, [pc, #128]	; (8010384 <USBD_LL_Init+0x94>)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4a1e      	ldr	r2, [pc, #120]	; (8010384 <USBD_LL_Init+0x94>)
 801030c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010310:	4b1c      	ldr	r3, [pc, #112]	; (8010384 <USBD_LL_Init+0x94>)
 8010312:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010316:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010318:	4b1a      	ldr	r3, [pc, #104]	; (8010384 <USBD_LL_Init+0x94>)
 801031a:	2206      	movs	r2, #6
 801031c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801031e:	4b19      	ldr	r3, [pc, #100]	; (8010384 <USBD_LL_Init+0x94>)
 8010320:	2202      	movs	r2, #2
 8010322:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010324:	4b17      	ldr	r3, [pc, #92]	; (8010384 <USBD_LL_Init+0x94>)
 8010326:	2200      	movs	r2, #0
 8010328:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801032a:	4b16      	ldr	r3, [pc, #88]	; (8010384 <USBD_LL_Init+0x94>)
 801032c:	2202      	movs	r2, #2
 801032e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010330:	4b14      	ldr	r3, [pc, #80]	; (8010384 <USBD_LL_Init+0x94>)
 8010332:	2200      	movs	r2, #0
 8010334:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010336:	4b13      	ldr	r3, [pc, #76]	; (8010384 <USBD_LL_Init+0x94>)
 8010338:	2200      	movs	r2, #0
 801033a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801033c:	4b11      	ldr	r3, [pc, #68]	; (8010384 <USBD_LL_Init+0x94>)
 801033e:	2200      	movs	r2, #0
 8010340:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010342:	4b10      	ldr	r3, [pc, #64]	; (8010384 <USBD_LL_Init+0x94>)
 8010344:	2201      	movs	r2, #1
 8010346:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010348:	4b0e      	ldr	r3, [pc, #56]	; (8010384 <USBD_LL_Init+0x94>)
 801034a:	2200      	movs	r2, #0
 801034c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801034e:	480d      	ldr	r0, [pc, #52]	; (8010384 <USBD_LL_Init+0x94>)
 8010350:	f7f9 f870 	bl	8009434 <HAL_PCD_Init>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801035a:	f7f0 ff9b 	bl	8001294 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801035e:	2180      	movs	r1, #128	; 0x80
 8010360:	4808      	ldr	r0, [pc, #32]	; (8010384 <USBD_LL_Init+0x94>)
 8010362:	f7fa fa02 	bl	800a76a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010366:	2240      	movs	r2, #64	; 0x40
 8010368:	2100      	movs	r1, #0
 801036a:	4806      	ldr	r0, [pc, #24]	; (8010384 <USBD_LL_Init+0x94>)
 801036c:	f7fa f9b6 	bl	800a6dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010370:	2280      	movs	r2, #128	; 0x80
 8010372:	2101      	movs	r1, #1
 8010374:	4803      	ldr	r0, [pc, #12]	; (8010384 <USBD_LL_Init+0x94>)
 8010376:	f7fa f9b1 	bl	800a6dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	20002794 	.word	0x20002794

08010388 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010394:	2300      	movs	r3, #0
 8010396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801039e:	4618      	mov	r0, r3
 80103a0:	f7f9 f96c 	bl	800967c <HAL_PCD_Start>
 80103a4:	4603      	mov	r3, r0
 80103a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103a8:	7bfb      	ldrb	r3, [r7, #15]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 f990 	bl	80106d0 <USBD_Get_USB_Status>
 80103b0:	4603      	mov	r3, r0
 80103b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	4608      	mov	r0, r1
 80103c8:	4611      	mov	r1, r2
 80103ca:	461a      	mov	r2, r3
 80103cc:	4603      	mov	r3, r0
 80103ce:	70fb      	strb	r3, [r7, #3]
 80103d0:	460b      	mov	r3, r1
 80103d2:	70bb      	strb	r3, [r7, #2]
 80103d4:	4613      	mov	r3, r2
 80103d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103e6:	78bb      	ldrb	r3, [r7, #2]
 80103e8:	883a      	ldrh	r2, [r7, #0]
 80103ea:	78f9      	ldrb	r1, [r7, #3]
 80103ec:	f7f9 fd7d 	bl	8009eea <HAL_PCD_EP_Open>
 80103f0:	4603      	mov	r3, r0
 80103f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103f4:	7bfb      	ldrb	r3, [r7, #15]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f000 f96a 	bl	80106d0 <USBD_Get_USB_Status>
 80103fc:	4603      	mov	r3, r0
 80103fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010400:	7bbb      	ldrb	r3, [r7, #14]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b084      	sub	sp, #16
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	460b      	mov	r3, r1
 8010414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010416:	2300      	movs	r3, #0
 8010418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801041a:	2300      	movs	r3, #0
 801041c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010424:	78fa      	ldrb	r2, [r7, #3]
 8010426:	4611      	mov	r1, r2
 8010428:	4618      	mov	r0, r3
 801042a:	f7f9 fdc6 	bl	8009fba <HAL_PCD_EP_Close>
 801042e:	4603      	mov	r3, r0
 8010430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010432:	7bfb      	ldrb	r3, [r7, #15]
 8010434:	4618      	mov	r0, r3
 8010436:	f000 f94b 	bl	80106d0 <USBD_Get_USB_Status>
 801043a:	4603      	mov	r3, r0
 801043c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801043e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	460b      	mov	r3, r1
 8010452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010458:	2300      	movs	r3, #0
 801045a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010462:	78fa      	ldrb	r2, [r7, #3]
 8010464:	4611      	mov	r1, r2
 8010466:	4618      	mov	r0, r3
 8010468:	f7f9 fe9e 	bl	800a1a8 <HAL_PCD_EP_SetStall>
 801046c:	4603      	mov	r3, r0
 801046e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010470:	7bfb      	ldrb	r3, [r7, #15]
 8010472:	4618      	mov	r0, r3
 8010474:	f000 f92c 	bl	80106d0 <USBD_Get_USB_Status>
 8010478:	4603      	mov	r3, r0
 801047a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047c:	7bbb      	ldrb	r3, [r7, #14]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	460b      	mov	r3, r1
 8010490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010496:	2300      	movs	r3, #0
 8010498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104a0:	78fa      	ldrb	r2, [r7, #3]
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7f9 fee3 	bl	800a270 <HAL_PCD_EP_ClrStall>
 80104aa:	4603      	mov	r3, r0
 80104ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ae:	7bfb      	ldrb	r3, [r7, #15]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f000 f90d 	bl	80106d0 <USBD_Get_USB_Status>
 80104b6:	4603      	mov	r3, r0
 80104b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	460b      	mov	r3, r1
 80104ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80104d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	da0b      	bge.n	80104f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80104e6:	68f9      	ldr	r1, [r7, #12]
 80104e8:	4613      	mov	r3, r2
 80104ea:	00db      	lsls	r3, r3, #3
 80104ec:	1a9b      	subs	r3, r3, r2
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	440b      	add	r3, r1
 80104f2:	333e      	adds	r3, #62	; 0x3e
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	e00b      	b.n	8010510 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80104f8:	78fb      	ldrb	r3, [r7, #3]
 80104fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80104fe:	68f9      	ldr	r1, [r7, #12]
 8010500:	4613      	mov	r3, r2
 8010502:	00db      	lsls	r3, r3, #3
 8010504:	1a9b      	subs	r3, r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	440b      	add	r3, r1
 801050a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801050e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010510:	4618      	mov	r0, r3
 8010512:	3714      	adds	r7, #20
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	460b      	mov	r3, r1
 8010526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801052c:	2300      	movs	r3, #0
 801052e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010536:	78fa      	ldrb	r2, [r7, #3]
 8010538:	4611      	mov	r1, r2
 801053a:	4618      	mov	r0, r3
 801053c:	f7f9 fcb0 	bl	8009ea0 <HAL_PCD_SetAddress>
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	4618      	mov	r0, r3
 8010548:	f000 f8c2 	bl	80106d0 <USBD_Get_USB_Status>
 801054c:	4603      	mov	r3, r0
 801054e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010550:	7bbb      	ldrb	r3, [r7, #14]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b086      	sub	sp, #24
 801055e:	af00      	add	r7, sp, #0
 8010560:	60f8      	str	r0, [r7, #12]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
 8010566:	460b      	mov	r3, r1
 8010568:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056a:	2300      	movs	r3, #0
 801056c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010578:	7af9      	ldrb	r1, [r7, #11]
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	f7f9 fdc9 	bl	800a114 <HAL_PCD_EP_Transmit>
 8010582:	4603      	mov	r3, r0
 8010584:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010586:	7dfb      	ldrb	r3, [r7, #23]
 8010588:	4618      	mov	r0, r3
 801058a:	f000 f8a1 	bl	80106d0 <USBD_Get_USB_Status>
 801058e:	4603      	mov	r3, r0
 8010590:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010592:	7dbb      	ldrb	r3, [r7, #22]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3718      	adds	r7, #24
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	607a      	str	r2, [r7, #4]
 80105a6:	603b      	str	r3, [r7, #0]
 80105a8:	460b      	mov	r3, r1
 80105aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ac:	2300      	movs	r3, #0
 80105ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105b0:	2300      	movs	r3, #0
 80105b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105ba:	7af9      	ldrb	r1, [r7, #11]
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	f7f9 fd45 	bl	800a04e <HAL_PCD_EP_Receive>
 80105c4:	4603      	mov	r3, r0
 80105c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c8:	7dfb      	ldrb	r3, [r7, #23]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f000 f880 	bl	80106d0 <USBD_Get_USB_Status>
 80105d0:	4603      	mov	r3, r0
 80105d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3718      	adds	r7, #24
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b082      	sub	sp, #8
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	460b      	mov	r3, r1
 80105e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105f0:	78fa      	ldrb	r2, [r7, #3]
 80105f2:	4611      	mov	r1, r2
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7f9 fd75 	bl	800a0e4 <HAL_PCD_EP_GetRxCount>
 80105fa:	4603      	mov	r3, r0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010610:	78fb      	ldrb	r3, [r7, #3]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d002      	beq.n	801061c <HAL_PCDEx_LPM_Callback+0x18>
 8010616:	2b01      	cmp	r3, #1
 8010618:	d01f      	beq.n	801065a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801061a:	e03b      	b.n	8010694 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6a1b      	ldr	r3, [r3, #32]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d007      	beq.n	8010634 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8010624:	f7f0 f854 	bl	80006d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010628:	4b1c      	ldr	r3, [pc, #112]	; (801069c <HAL_PCDEx_LPM_Callback+0x98>)
 801062a:	691b      	ldr	r3, [r3, #16]
 801062c:	4a1b      	ldr	r2, [pc, #108]	; (801069c <HAL_PCDEx_LPM_Callback+0x98>)
 801062e:	f023 0306 	bic.w	r3, r3, #6
 8010632:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	6812      	ldr	r2, [r2, #0]
 8010642:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010646:	f023 0301 	bic.w	r3, r3, #1
 801064a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010652:	4618      	mov	r0, r3
 8010654:	f7fe fb3e 	bl	800ecd4 <USBD_LL_Resume>
    break;
 8010658:	e01c      	b.n	8010694 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	6812      	ldr	r2, [r2, #0]
 8010668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801066c:	f043 0301 	orr.w	r3, r3, #1
 8010670:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010678:	4618      	mov	r0, r3
 801067a:	f7fe fb15 	bl	800eca8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6a1b      	ldr	r3, [r3, #32]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d005      	beq.n	8010692 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010686:	4b05      	ldr	r3, [pc, #20]	; (801069c <HAL_PCDEx_LPM_Callback+0x98>)
 8010688:	691b      	ldr	r3, [r3, #16]
 801068a:	4a04      	ldr	r2, [pc, #16]	; (801069c <HAL_PCDEx_LPM_Callback+0x98>)
 801068c:	f043 0306 	orr.w	r3, r3, #6
 8010690:	6113      	str	r3, [r2, #16]
    break;
 8010692:	bf00      	nop
}
 8010694:	bf00      	nop
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	e000ed00 	.word	0xe000ed00

080106a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80106a8:	4b03      	ldr	r3, [pc, #12]	; (80106b8 <USBD_static_malloc+0x18>)
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop
 80106b8:	200001b0 	.word	0x200001b0

080106bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]

}
 80106c4:	bf00      	nop
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106de:	79fb      	ldrb	r3, [r7, #7]
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	d817      	bhi.n	8010714 <USBD_Get_USB_Status+0x44>
 80106e4:	a201      	add	r2, pc, #4	; (adr r2, 80106ec <USBD_Get_USB_Status+0x1c>)
 80106e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ea:	bf00      	nop
 80106ec:	080106fd 	.word	0x080106fd
 80106f0:	08010703 	.word	0x08010703
 80106f4:	08010709 	.word	0x08010709
 80106f8:	0801070f 	.word	0x0801070f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010700:	e00b      	b.n	801071a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010702:	2303      	movs	r3, #3
 8010704:	73fb      	strb	r3, [r7, #15]
    break;
 8010706:	e008      	b.n	801071a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010708:	2301      	movs	r3, #1
 801070a:	73fb      	strb	r3, [r7, #15]
    break;
 801070c:	e005      	b.n	801071a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801070e:	2303      	movs	r3, #3
 8010710:	73fb      	strb	r3, [r7, #15]
    break;
 8010712:	e002      	b.n	801071a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010714:	2303      	movs	r3, #3
 8010716:	73fb      	strb	r3, [r7, #15]
    break;
 8010718:	bf00      	nop
  }
  return usb_status;
 801071a:	7bfb      	ldrb	r3, [r7, #15]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <__libc_init_array>:
 8010728:	b570      	push	{r4, r5, r6, lr}
 801072a:	4d0d      	ldr	r5, [pc, #52]	; (8010760 <__libc_init_array+0x38>)
 801072c:	4c0d      	ldr	r4, [pc, #52]	; (8010764 <__libc_init_array+0x3c>)
 801072e:	1b64      	subs	r4, r4, r5
 8010730:	10a4      	asrs	r4, r4, #2
 8010732:	2600      	movs	r6, #0
 8010734:	42a6      	cmp	r6, r4
 8010736:	d109      	bne.n	801074c <__libc_init_array+0x24>
 8010738:	4d0b      	ldr	r5, [pc, #44]	; (8010768 <__libc_init_array+0x40>)
 801073a:	4c0c      	ldr	r4, [pc, #48]	; (801076c <__libc_init_array+0x44>)
 801073c:	f000 f820 	bl	8010780 <_init>
 8010740:	1b64      	subs	r4, r4, r5
 8010742:	10a4      	asrs	r4, r4, #2
 8010744:	2600      	movs	r6, #0
 8010746:	42a6      	cmp	r6, r4
 8010748:	d105      	bne.n	8010756 <__libc_init_array+0x2e>
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010750:	4798      	blx	r3
 8010752:	3601      	adds	r6, #1
 8010754:	e7ee      	b.n	8010734 <__libc_init_array+0xc>
 8010756:	f855 3b04 	ldr.w	r3, [r5], #4
 801075a:	4798      	blx	r3
 801075c:	3601      	adds	r6, #1
 801075e:	e7f2      	b.n	8010746 <__libc_init_array+0x1e>
 8010760:	08010808 	.word	0x08010808
 8010764:	08010808 	.word	0x08010808
 8010768:	08010808 	.word	0x08010808
 801076c:	0801080c 	.word	0x0801080c

08010770 <memset>:
 8010770:	4402      	add	r2, r0
 8010772:	4603      	mov	r3, r0
 8010774:	4293      	cmp	r3, r2
 8010776:	d100      	bne.n	801077a <memset+0xa>
 8010778:	4770      	bx	lr
 801077a:	f803 1b01 	strb.w	r1, [r3], #1
 801077e:	e7f9      	b.n	8010774 <memset+0x4>

08010780 <_init>:
 8010780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010782:	bf00      	nop
 8010784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010786:	bc08      	pop	{r3}
 8010788:	469e      	mov	lr, r3
 801078a:	4770      	bx	lr

0801078c <_fini>:
 801078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078e:	bf00      	nop
 8010790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010792:	bc08      	pop	{r3}
 8010794:	469e      	mov	lr, r3
 8010796:	4770      	bx	lr

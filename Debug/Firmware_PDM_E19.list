
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010110  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080102d4  080102d4  000202d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801033c  0801033c  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  0801033c  0801033c  0002033c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010344  08010344  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010344  08010344  00020344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010348  08010348  00020348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0801034c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a0c  20000190  080104dc  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  20002b9c  080104dc  00032b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca11  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052c5  00000000  00000000  0005cbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00061e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  00063848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e68  00000000  00000000  00064fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023889  00000000  00000000  0008de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6329  00000000  00000000  000b16d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac0  00000000  00000000  00197a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080102bc 	.word	0x080102bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	080102bc 	.word	0x080102bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <AT24Cxx_Read>:
 */

#include "AT24Cxx.h"

HAL_StatusTypeDef AT24Cxx_Read(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	461a      	mov	r2, r3
 8000508:	460b      	mov	r3, r1
 800050a:	817b      	strh	r3, [r7, #10]
 800050c:	4613      	mov	r3, r2
 800050e:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
 8000510:	897b      	ldrh	r3, [r7, #10]
 8000512:	09db      	lsrs	r3, r3, #7
 8000514:	b29b      	uxth	r3, r3
 8000516:	b21b      	sxth	r3, r3
 8000518:	f003 030e 	and.w	r3, r3, #14
 800051c:	b21b      	sxth	r3, r3
 800051e:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 8000522:	b21b      	sxth	r3, r3
 8000524:	b299      	uxth	r1, r3
 8000526:	897a      	ldrh	r2, [r7, #10]
 8000528:	2301      	movs	r3, #1
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	893b      	ldrh	r3, [r7, #8]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f006 f9b4 	bl	80068a4 <HAL_I2C_Mem_Read>
 800053c:	4603      	mov	r3, r0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <AT24Cxx_Write_DMA>:
{
	return HAL_I2C_Mem_Write(hi2c, 0xA0 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size, 1);
}

HAL_StatusTypeDef AT24Cxx_Write_DMA(I2C_HandleTypeDef* hi2c, uint16_t MemAddress_Start, uint8_t* pData, uint16_t Size)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af02      	add	r7, sp, #8
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	461a      	mov	r2, r3
 8000552:	460b      	mov	r3, r1
 8000554:	817b      	strh	r3, [r7, #10]
 8000556:	4613      	mov	r3, r2
 8000558:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write_DMA(hi2c, 0xA1 | ((MemAddress_Start >> 7) & 0x0E), MemAddress_Start, 1, pData, Size);
 800055a:	897b      	ldrh	r3, [r7, #10]
 800055c:	09db      	lsrs	r3, r3, #7
 800055e:	b29b      	uxth	r3, r3
 8000560:	b21b      	sxth	r3, r3
 8000562:	f003 030e 	and.w	r3, r3, #14
 8000566:	b21b      	sxth	r3, r3
 8000568:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 800056c:	b21b      	sxth	r3, r3
 800056e:	b299      	uxth	r1, r3
 8000570:	897a      	ldrh	r2, [r7, #10]
 8000572:	893b      	ldrh	r3, [r7, #8]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f006 fbb7 	bl	8006cf0 <HAL_I2C_Mem_Write_DMA>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f004 f80a 	bl	80045a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f89a 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fd4e 	bl	8001038 <MX_GPIO_Init>
  MX_ADC1_Init();
 800059c:	f000 f908 	bl	80007b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a0:	f000 f992 	bl	80008c8 <MX_ADC2_Init>
  MX_DMA_Init();
 80005a4:	f000 fd0a 	bl	8000fbc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005a8:	f00f f862 	bl	800f670 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 80005ac:	f000 fa16 	bl	80009dc <MX_CAN1_Init>
  MX_I2C1_Init();
 80005b0:	f000 fa5e 	bl	8000a70 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005b4:	f000 fa8a 	bl	8000acc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b8:	f000 fb26 	bl	8000c08 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005bc:	f000 fb9a 	bl	8000cf4 <MX_TIM3_Init>
  MX_TIM6_Init();
 80005c0:	f000 fc0e 	bl	8000de0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80005c4:	f000 fc42 	bl	8000e4c <MX_TIM7_Init>
  MX_TIM8_Init();
 80005c8:	f000 fc74 	bl	8000eb4 <MX_TIM8_Init>
  MX_CRC_Init();
 80005cc:	f000 fa3c 	bl	8000a48 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 80005d0:	4931      	ldr	r1, [pc, #196]	; (8000698 <main+0x10c>)
 80005d2:	4832      	ldr	r0, [pc, #200]	; (800069c <main+0x110>)
 80005d4:	f001 fe2a 	bl	800222c <PDM_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(Accumulator_Delay == 0)
 80005d8:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <main+0x114>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <main+0x5a>
	{
		PDM_Read_Data(&Data_Conversion);
 80005e0:	4830      	ldr	r0, [pc, #192]	; (80006a4 <main+0x118>)
 80005e2:	f003 f98b 	bl	80038fc <PDM_Read_Data>
	}

	if(Accumulator_Output_Check >= OUTPUT_FUSE_FREQ)
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <main+0x11c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b18      	cmp	r3, #24
 80005ec:	d901      	bls.n	80005f2 <main+0x66>
	{
		PDM_Output_Fuse();
 80005ee:	f002 faa9 	bl	8002b44 <PDM_Output_Fuse>
	}

	if(Accumulator_Msg_10Hz >= DATA_FREQ_10HZ)
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <main+0x120>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fa:	d306      	bcc.n	800060a <main+0x7e>
	{
		Accumulator_Msg_10Hz = 0;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <main+0x120>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 8000602:	2101      	movs	r1, #1
 8000604:	4825      	ldr	r0, [pc, #148]	; (800069c <main+0x110>)
 8000606:	f000 fe85 	bl	8001314 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_25Hz >= DATA_FREQ_25HZ)
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <main+0x124>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000612:	d306      	bcc.n	8000622 <main+0x96>
	{
		Accumulator_Msg_25Hz = 0;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <main+0x124>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 800061a:	2102      	movs	r1, #2
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <main+0x110>)
 800061e:	f000 fe79 	bl	8001314 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_50Hz >= DATA_FREQ_50HZ)
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <main+0x128>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2bc7      	cmp	r3, #199	; 0xc7
 8000628:	d906      	bls.n	8000638 <main+0xac>
	{
		Accumulator_Msg_50Hz = 0;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <main+0x128>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 8000630:	2103      	movs	r1, #3
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <main+0x110>)
 8000634:	f000 fe6e 	bl	8001314 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_80Hz >= DATA_FREQ_80HZ)
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0x12c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b7c      	cmp	r3, #124	; 0x7c
 800063e:	d906      	bls.n	800064e <main+0xc2>
	{
		Accumulator_Msg_10Hz = 0;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <main+0x120>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 8000646:	2104      	movs	r1, #4
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <main+0x110>)
 800064a:	f000 fe63 	bl	8001314 <PDM_CAN_Transmit_Data>
	}

	if(Accumulator_Msg_100Hz >= DATA_FREQ_100HZ)
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <main+0x130>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b63      	cmp	r3, #99	; 0x63
 8000654:	d906      	bls.n	8000664 <main+0xd8>
	{
		Accumulator_Msg_100Hz = 0;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <main+0x130>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 800065c:	2105      	movs	r1, #5
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <main+0x110>)
 8000660:	f000 fe58 	bl	8001314 <PDM_CAN_Transmit_Data>
	}

	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) && (Accumulator_USB_Data >= DATA_FREQ_USB))
 8000664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000668:	4815      	ldr	r0, [pc, #84]	; (80006c0 <main+0x134>)
 800066a:	f005 ff73 	bl	8006554 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10d      	bne.n	8000690 <main+0x104>
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x138>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800067c:	d308      	bcc.n	8000690 <main+0x104>
	{

		Accumulator_USB_Data = 0;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <main+0x138>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
		USB_Connected_Flag = 1;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <main+0x13c>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		PDM_USB_Transmit_Data();
 800068a:	f001 ffd3 	bl	8002634 <PDM_USB_Transmit_Data>
 800068e:	e002      	b.n	8000696 <main+0x10a>
	}else
		USB_Connected_Flag = 0;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <main+0x13c>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
	if(Accumulator_Delay == 0)
 8000696:	e79f      	b.n	80005d8 <main+0x4c>
 8000698:	200004d0 	.word	0x200004d0
 800069c:	20001204 	.word	0x20001204
 80006a0:	200011a0 	.word	0x200011a0
 80006a4:	20000e3c 	.word	0x20000e3c
 80006a8:	2000052c 	.word	0x2000052c
 80006ac:	20001118 	.word	0x20001118
 80006b0:	20000e40 	.word	0x20000e40
 80006b4:	20000f2c 	.word	0x20000f2c
 80006b8:	20001000 	.word	0x20001000
 80006bc:	20000f50 	.word	0x20000f50
 80006c0:	40020000 	.word	0x40020000
 80006c4:	2000122c 	.word	0x2000122c
 80006c8:	20000fb4 	.word	0x20000fb4

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	; 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00f fde6 	bl	80102ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <SystemClock_Config+0xdc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <SystemClock_Config+0xdc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xdc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <SystemClock_Config+0xe0>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000740:	23b4      	movs	r3, #180	; 0xb4
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000748:	2303      	movs	r3, #3
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f00a fc0d 	bl	800af74 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 fd96 	bl	8001290 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f009 fdd4 	bl	800a310 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800076e:	f000 fd8f 	bl	8001290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2105      	movs	r1, #5
 8000790:	4618      	mov	r0, r3
 8000792:	f009 fe0d 	bl	800a3b0 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800079c:	f000 fd78 	bl	8001290 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007c4:	4a3d      	ldr	r2, [pc, #244]	; (80008bc <MX_ADC1_Init+0x10c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c8:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007d8:	2201      	movs	r2, #1
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007de:	2201      	movs	r2, #1
 80007e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007f2:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <MX_ADC1_Init+0x110>)
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_ADC1_Init+0x108>)
 80007fe:	2205      	movs	r2, #5
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_ADC1_Init+0x108>)
 8000804:	2201      	movs	r2, #1
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_ADC1_Init+0x108>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	4829      	ldr	r0, [pc, #164]	; (80008b8 <MX_ADC1_Init+0x108>)
 8000812:	f003 ff5f 	bl	80046d4 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 fd38 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000828:	2307      	movs	r3, #7
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4821      	ldr	r0, [pc, #132]	; (80008b8 <MX_ADC1_Init+0x108>)
 8000832:	f003 ff93 	bl	800475c <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fd28 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000840:	2301      	movs	r3, #1
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <MX_ADC1_Init+0x108>)
 800084e:	f003 ff85 	bl	800475c <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000858:	f000 fd1a 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800085c:	2302      	movs	r3, #2
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000860:	2303      	movs	r3, #3
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_ADC1_Init+0x108>)
 800086a:	f003 ff77 	bl	800475c <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000874:	f000 fd0c 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000878:	2303      	movs	r3, #3
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_ADC1_Init+0x108>)
 8000886:	f003 ff69 	bl	800475c <HAL_ADC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000890:	f000 fcfe 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_ADC1_Init+0x114>)
 8000896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000898:	2305      	movs	r3, #5
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_ADC1_Init+0x108>)
 80008a2:	f003 ff5b 	bl	800475c <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80008ac:	f000 fcf0 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000e5c 	.word	0x20000e5c
 80008bc:	40012000 	.word	0x40012000
 80008c0:	0f000001 	.word	0x0f000001
 80008c4:	10000012 	.word	0x10000012

080008c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <MX_ADC2_Init+0x108>)
 80008dc:	4a3d      	ldr	r2, [pc, #244]	; (80009d4 <MX_ADC2_Init+0x10c>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_ADC2_Init+0x108>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_ADC2_Init+0x108>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <MX_ADC2_Init+0x108>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008f4:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_ADC2_Init+0x108>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_ADC2_Init+0x108>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <MX_ADC2_Init+0x108>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_ADC2_Init+0x108>)
 800090a:	4a33      	ldr	r2, [pc, #204]	; (80009d8 <MX_ADC2_Init+0x110>)
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <MX_ADC2_Init+0x108>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_ADC2_Init+0x108>)
 8000916:	2205      	movs	r2, #5
 8000918:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_ADC2_Init+0x108>)
 800091c:	2201      	movs	r2, #1
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_ADC2_Init+0x108>)
 8000924:	2201      	movs	r2, #1
 8000926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_ADC2_Init+0x108>)
 800092a:	f003 fed3 	bl	80046d4 <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000934:	f000 fcac 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000938:	2304      	movs	r3, #4
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000940:	2307      	movs	r3, #7
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_ADC2_Init+0x108>)
 800094a:	f003 ff07 	bl	800475c <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 fc9c 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000958:	2305      	movs	r3, #5
 800095a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <MX_ADC2_Init+0x108>)
 8000966:	f003 fef9 	bl	800475c <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000970:	f000 fc8e 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000974:	2306      	movs	r3, #6
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000978:	2303      	movs	r3, #3
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_ADC2_Init+0x108>)
 8000982:	f003 feeb 	bl	800475c <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800098c:	f000 fc80 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000990:	2307      	movs	r3, #7
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_ADC2_Init+0x108>)
 800099e:	f003 fedd 	bl	800475c <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80009a8:	f000 fc72 	bl	8001290 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009ac:	230e      	movs	r3, #14
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009b0:	2305      	movs	r3, #5
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_ADC2_Init+0x108>)
 80009ba:	f003 fecf 	bl	800475c <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80009c4:	f000 fc64 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000428 	.word	0x20000428
 80009d4:	40012100 	.word	0x40012100
 80009d8:	0f000001 	.word	0x0f000001

080009dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_CAN1_Init+0x64>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <MX_CAN1_Init+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_CAN1_Init+0x64>)
 80009e8:	2205      	movs	r2, #5
 80009ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_CAN1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_CAN1_Init+0x64>)
 80009f4:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_CAN1_Init+0x64>)
 80009fc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a00:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_CAN1_Init+0x64>)
 8000a2e:	f004 f8c3 	bl	8004bb8 <HAL_CAN_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a38:	f000 fc2a 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20001204 	.word	0x20001204
 8000a44:	40006400 	.word	0x40006400

08000a48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_CRC_Init+0x20>)
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <MX_CRC_Init+0x24>)
 8000a50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_CRC_Init+0x20>)
 8000a54:	f004 ffef 	bl	8005a36 <HAL_CRC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a5e:	f000 fc17 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000524 	.word	0x20000524
 8000a6c:	40023000 	.word	0x40023000

08000a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <MX_I2C1_Init+0x54>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_I2C1_Init+0x58>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000aae:	f005 fdb5 	bl	800661c <HAL_I2C_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab8:	f000 fbea 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200004d0 	.word	0x200004d0
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	00061a80 	.word	0x00061a80

08000acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b096      	sub	sp, #88	; 0x58
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
 8000afa:	615a      	str	r2, [r3, #20]
 8000afc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2220      	movs	r2, #32
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00f fbd1 	bl	80102ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <MX_TIM1_Init+0x138>)
 8000b0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17;
 8000b10:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b12:	2211      	movs	r2, #17
 8000b14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b1c:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b36:	4832      	ldr	r0, [pc, #200]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b38:	f00a fcba 	bl	800b4b0 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b42:	f000 fba5 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b50:	4619      	mov	r1, r3
 8000b52:	482b      	ldr	r0, [pc, #172]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b54:	f00b f87c 	bl	800bc50 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b5e:	f000 fb97 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b62:	4827      	ldr	r0, [pc, #156]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b64:	f00a fd93 	bl	800b68e <HAL_TIM_PWM_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b6e:	f000 fb8f 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000b82:	f00b fc65 	bl	800c450 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b8c:	f000 fb80 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b90:	2360      	movs	r3, #96	; 0x60
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	220c      	movs	r2, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000bb2:	f00a ff8b 	bl	800bacc <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bbc:	f000 fb68 	bl	8001290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000be4:	f00b fcb0 	bl	800c548 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000bee:	f000 fb4f 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM1_Init+0x134>)
 8000bf4:	f003 fb14 	bl	8004220 <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3758      	adds	r7, #88	; 0x58
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20001004 	.word	0x20001004
 8000c04:	40010000 	.word	0x40010000

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	f107 0320 	add.w	r3, r7, #32
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c42:	2208      	movs	r2, #8
 8000c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c60:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c62:	f00a fc25 	bl	800b4b0 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c6c:	f000 fb10 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c7e:	f00a ffe7 	bl	800bc50 <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c88:	f000 fb02 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c8c:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c8e:	f00a fcfe 	bl	800b68e <HAL_TIM_PWM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c98:	f000 fafa 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000cac:	f00b fbd0 	bl	800c450 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 faeb 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2208      	movs	r2, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000cd2:	f00a fefb 	bl	800bacc <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cdc:	f000 fad8 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000ce2:	f003 fa9d 	bl	8004220 <HAL_TIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3738      	adds	r7, #56	; 0x38
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000111c 	.word	0x2000111c

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d26:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4a:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d4c:	f00a fbb0 	bl	800b4b0 <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d56:	f000 fa9b 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d68:	f00a ff72 	bl	800bc50 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d72:	f000 fa8d 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d78:	f00a fc89 	bl	800b68e <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d82:	f000 fa85 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	4619      	mov	r1, r3
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d96:	f00b fb5b 	bl	800c450 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000da0:	f000 fa76 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	220c      	movs	r2, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000dbc:	f00a fe86 	bl	800bacc <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dc6:	f000 fa63 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000dcc:	f003 fa28 	bl	8004220 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	; 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000df4 	.word	0x20000df4
 8000ddc:	40000400 	.word	0x40000400

08000de0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000df0:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <MX_TIM6_Init+0x68>)
 8000df2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000df6:	2259      	movs	r2, #89	; 0x59
 8000df8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000e10:	f00a fb4e 	bl	800b4b0 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e1a:	f000 fa39 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM6_Init+0x64>)
 8000e2c:	f00b fb10 	bl	800c450 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e36:	f000 fa2b 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000fb8 	.word	0x20000fb8
 8000e48:	40001000 	.word	0x40001000

08000e4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <MX_TIM7_Init+0x64>)
 8000e5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e62:	2208      	movs	r2, #8
 8000e64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e6e:	2209      	movs	r2, #9
 8000e70:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e7a:	f00a fb19 	bl	800b4b0 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000e84:	f000 fa04 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_TIM7_Init+0x60>)
 8000e96:	f00b fadb 	bl	800c450 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000ea0:	f000 f9f6 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000126c 	.word	0x2000126c
 8000eb0:	40001400 	.word	0x40001400

08000eb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b092      	sub	sp, #72	; 0x48
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2220      	movs	r2, #32
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00f f9e4 	bl	80102ac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000ee6:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <MX_TIM8_Init+0x104>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17;
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000eec:	2211      	movs	r2, #17
 8000eee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f10:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f12:	f00a fbbc 	bl	800b68e <HAL_TIM_PWM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000f1c:	f000 f9b8 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f30:	f00b fa8e 	bl	800c450 <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000f3a:	f000 f9a9 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f3e:	2370      	movs	r3, #112	; 0x70
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f64:	f00a fdb2 	bl	800bacc <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f6e:	f000 f98f 	bl	8001290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000f96:	f00b fad7 	bl	800c548 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000fa0:	f000 f976 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MX_TIM8_Init+0x100>)
 8000fa6:	f003 f93b 	bl	8004220 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3748      	adds	r7, #72	; 0x48
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200003dc 	.word	0x200003dc
 8000fb8:	40010400 	.word	0x40010400

08000fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_DMA_Init+0x78>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <MX_DMA_Init+0x78>)
 8000fcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_DMA_Init+0x78>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_DMA_Init+0x78>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <MX_DMA_Init+0x78>)
 8000fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_DMA_Init+0x78>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2011      	movs	r0, #17
 8001000:	f004 fce3 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001004:	2011      	movs	r0, #17
 8001006:	f004 fcfc 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2038      	movs	r0, #56	; 0x38
 8001010:	f004 fcdb 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001014:	2038      	movs	r0, #56	; 0x38
 8001016:	f004 fcf4 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	203a      	movs	r0, #58	; 0x3a
 8001020:	f004 fcd3 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001024:	203a      	movs	r0, #58	; 0x3a
 8001026:	f004 fcec 	bl	8005a02 <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	4b88      	ldr	r3, [pc, #544]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a87      	ldr	r2, [pc, #540]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001058:	f043 0310 	orr.w	r3, r3, #16
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b85      	ldr	r3, [pc, #532]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	4b81      	ldr	r3, [pc, #516]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a80      	ldr	r2, [pc, #512]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b7e      	ldr	r3, [pc, #504]	; (8001274 <MX_GPIO_Init+0x23c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <MX_GPIO_Init+0x23c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a79      	ldr	r2, [pc, #484]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b77      	ldr	r3, [pc, #476]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	4b73      	ldr	r3, [pc, #460]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a72      	ldr	r2, [pc, #456]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b70      	ldr	r3, [pc, #448]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a6b      	ldr	r2, [pc, #428]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a64      	ldr	r2, [pc, #400]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b62      	ldr	r3, [pc, #392]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <MX_GPIO_Init+0x23c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a5d      	ldr	r2, [pc, #372]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b5b      	ldr	r3, [pc, #364]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b57      	ldr	r3, [pc, #348]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a56      	ldr	r2, [pc, #344]	; (8001274 <MX_GPIO_Init+0x23c>)
 800111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <MX_GPIO_Init+0x23c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	213c      	movs	r1, #60	; 0x3c
 8001132:	4851      	ldr	r0, [pc, #324]	; (8001278 <MX_GPIO_Init+0x240>)
 8001134:	f005 fa26 	bl	8006584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800113e:	484f      	ldr	r0, [pc, #316]	; (800127c <MX_GPIO_Init+0x244>)
 8001140:	f005 fa20 	bl	8006584 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800114a:	484d      	ldr	r0, [pc, #308]	; (8001280 <MX_GPIO_Init+0x248>)
 800114c:	f005 fa1a 	bl	8006584 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8001150:	233c      	movs	r3, #60	; 0x3c
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4844      	ldr	r0, [pc, #272]	; (8001278 <MX_GPIO_Init+0x240>)
 8001168:	f005 f860 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 800116c:	230f      	movs	r3, #15
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001170:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4840      	ldr	r0, [pc, #256]	; (8001284 <MX_GPIO_Init+0x24c>)
 8001182:	f005 f853 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 8001186:	f24f 0330 	movw	r3, #61488	; 0xf030
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	483a      	ldr	r0, [pc, #232]	; (8001288 <MX_GPIO_Init+0x250>)
 800119e:	f005 f845 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80011a2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4830      	ldr	r0, [pc, #192]	; (800127c <MX_GPIO_Init+0x244>)
 80011bc:	f005 f836 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80011c0:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <MX_GPIO_Init+0x248>)
 80011da:	f005 f827 	bl	800622c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80011de:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4825      	ldr	r0, [pc, #148]	; (800128c <MX_GPIO_Init+0x254>)
 80011f6:	f005 f819 	bl	800622c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2101      	movs	r1, #1
 80011fe:	2006      	movs	r0, #6
 8001200:	f004 fbe3 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001204:	2006      	movs	r0, #6
 8001206:	f004 fbfc 	bl	8005a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	2007      	movs	r0, #7
 8001210:	f004 fbdb 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001214:	2007      	movs	r0, #7
 8001216:	f004 fbf4 	bl	8005a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2101      	movs	r1, #1
 800121e:	2008      	movs	r0, #8
 8001220:	f004 fbd3 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001224:	2008      	movs	r0, #8
 8001226:	f004 fbec 	bl	8005a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2101      	movs	r1, #1
 800122e:	2009      	movs	r0, #9
 8001230:	f004 fbcb 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001234:	2009      	movs	r0, #9
 8001236:	f004 fbe4 	bl	8005a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2101      	movs	r1, #1
 800123e:	200a      	movs	r0, #10
 8001240:	f004 fbc3 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001244:	200a      	movs	r0, #10
 8001246:	f004 fbdc 	bl	8005a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	2017      	movs	r0, #23
 8001250:	f004 fbbb 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001254:	2017      	movs	r0, #23
 8001256:	f004 fbd4 	bl	8005a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2101      	movs	r1, #1
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f004 fbb3 	bl	80059ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001264:	2028      	movs	r0, #40	; 0x28
 8001266:	f004 fbcc 	bl	8005a02 <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	3738      	adds	r7, #56	; 0x38
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40021000 	.word	0x40021000
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021800 	.word	0x40021800
 8001284:	40021400 	.word	0x40021400
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <PDM_PWM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
HAL_StatusTypeDef PDM_PWM_CAN_Filter_Config(CAN_HandleTypeDef *hcan, PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4613      	mov	r3, r2
 80012a8:	71fb      	strb	r3, [r7, #7]
	if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_CAN_DISABLE)
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <PDM_PWM_CAN_Filter_Config+0x74>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	fa42 f303 	asr.w	r3, r2, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <PDM_PWM_CAN_Filter_Config+0x26>
		return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e022      	b.n	8001308 <PDM_PWM_CAN_Filter_Config+0x6c>

	CAN_FilterTypeDef CAN_Filter_Config;

	CAN_Filter_Config.FilterBank = pwm_out_number;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_Filter_Config.FilterIdHigh = pwm_struct->Command_Var_CAN_ID[0] >> 13;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	0b5b      	lsrs	r3, r3, #13
 80012d4:	613b      	str	r3, [r7, #16]
	CAN_Filter_Config.FilterIdLow = (pwm_struct->Command_Var_CAN_ID[0] << 3) & 0xFFF8;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	617b      	str	r3, [r7, #20]
	CAN_Filter_Config.FilterMaskIdHigh = pwm_struct->Command_Var_CAN_ID[1] >> 13;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	0b5b      	lsrs	r3, r3, #13
 80012e6:	61bb      	str	r3, [r7, #24]
	CAN_Filter_Config.FilterMaskIdLow = (pwm_struct->Command_Var_CAN_ID[1] << 3) & 0xFFF8;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	61fb      	str	r3, [r7, #28]
	CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
	CAN_Filter_Config.FilterActivation = ENABLE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &CAN_Filter_Config);
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f003 fd55 	bl	8004db0 <HAL_CAN_ConfigFilter>
 8001306:	4603      	mov	r3, r0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3738      	adds	r7, #56	; 0x38
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000ea4 	.word	0x20000ea4

08001314 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

	switch(data_freq)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	3b01      	subs	r3, #1
 8001328:	2b04      	cmp	r3, #4
 800132a:	d821      	bhi.n	8001370 <PDM_CAN_Transmit_Data+0x5c>
 800132c:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <PDM_CAN_Transmit_Data+0x20>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	08001369 	.word	0x08001369
 8001338:	08001361 	.word	0x08001361
 800133c:	08001359 	.word	0x08001359
 8001340:	08001351 	.word	0x08001351
 8001344:	08001349 	.word	0x08001349
	{
	case Data_Freq_100Hz:
		CAN_Tx_Message.ExtId = 0x1E35C003;
 8001348:	4b58      	ldr	r3, [pc, #352]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 800134a:	4a59      	ldr	r2, [pc, #356]	; (80014b0 <PDM_CAN_Transmit_Data+0x19c>)
 800134c:	605a      	str	r2, [r3, #4]
		break;
 800134e:	e011      	b.n	8001374 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_80Hz:
		CAN_Tx_Message.ExtId = 0x1E35C004;
 8001350:	4b56      	ldr	r3, [pc, #344]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 8001352:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <PDM_CAN_Transmit_Data+0x1a0>)
 8001354:	605a      	str	r2, [r3, #4]
		break;
 8001356:	e00d      	b.n	8001374 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_50Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 8001358:	4b54      	ldr	r3, [pc, #336]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 800135a:	4a57      	ldr	r2, [pc, #348]	; (80014b8 <PDM_CAN_Transmit_Data+0x1a4>)
 800135c:	605a      	str	r2, [r3, #4]
		break;
 800135e:	e009      	b.n	8001374 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_25Hz:
		CAN_Tx_Message.ExtId = 0x1E35C005;
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 8001362:	4a55      	ldr	r2, [pc, #340]	; (80014b8 <PDM_CAN_Transmit_Data+0x1a4>)
 8001364:	605a      	str	r2, [r3, #4]
		break;
 8001366:	e005      	b.n	8001374 <PDM_CAN_Transmit_Data+0x60>
	case Data_Freq_10Hz:
		CAN_Tx_Message.ExtId = 0x1E35C006;
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 800136a:	4a54      	ldr	r2, [pc, #336]	; (80014bc <PDM_CAN_Transmit_Data+0x1a8>)
 800136c:	605a      	str	r2, [r3, #4]
		break;
 800136e:	e001      	b.n	8001374 <PDM_CAN_Transmit_Data+0x60>
	default:
		return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e096      	b.n	80014a2 <PDM_CAN_Transmit_Data+0x18e>
	}

	CAN_Rx_Message.DLC = 0;
 8001374:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
	CAN_Tx_Message.IDE = CAN_ID_EXT;
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 800137c:	2204      	movs	r2, #4
 800137e:	609a      	str	r2, [r3, #8]
	CAN_Tx_Message.RTR = CAN_RTR_DATA;
 8001380:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
	CAN_Tx_Message.TransmitGlobalTime = DISABLE;
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 8001388:	2200      	movs	r2, #0
 800138a:	751a      	strb	r2, [r3, #20]

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	73bb      	strb	r3, [r7, #14]
 8001390:	e068      	b.n	8001464 <PDM_CAN_Transmit_Data+0x150>
	{
		if(Data_Freq_Buffer[i] == data_freq)
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <PDM_CAN_Transmit_Data+0x1b0>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	429a      	cmp	r2, r3
 800139c:	d141      	bne.n	8001422 <PDM_CAN_Transmit_Data+0x10e>
		{
			CAN_Tx_Data[CAN_Rx_Message.DLC]		 = Data_ID_Buffer[i] >> 8;
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <PDM_CAN_Transmit_Data+0x1b4>)
 80013a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	b2d1      	uxtb	r1, r2
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 80013b2:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Rx_Message.DLC + 1] |= Data_ID_Buffer[i] & 0xFF;
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a44      	ldr	r2, [pc, #272]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	b25a      	sxtb	r2, r3
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	4941      	ldr	r1, [pc, #260]	; (80014c8 <PDM_CAN_Transmit_Data+0x1b4>)
 80013c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2d1      	uxtb	r1, r2
 80013d6:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 80013d8:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Rx_Message.DLC + 2]  = Data_Buffer[i] >> 8;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	4a3c      	ldr	r2, [pc, #240]	; (80014d0 <PDM_CAN_Transmit_Data+0x1bc>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	3302      	adds	r3, #2
 80013ec:	b2d1      	uxtb	r1, r2
 80013ee:	4a37      	ldr	r2, [pc, #220]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 80013f0:	54d1      	strb	r1, [r2, r3]
			CAN_Tx_Data[CAN_Rx_Message.DLC + 3] |= Data_Buffer[i] & 0xFF;
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	3303      	adds	r3, #3
 80013f8:	4a34      	ldr	r2, [pc, #208]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4933      	ldr	r1, [pc, #204]	; (80014d0 <PDM_CAN_Transmit_Data+0x1bc>)
 8001402:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b25a      	sxtb	r2, r3
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	3303      	adds	r3, #3
 8001412:	b2d1      	uxtb	r1, r2
 8001414:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 8001416:	54d1      	strb	r1, [r2, r3]

			CAN_Rx_Message.DLC += 4;
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	3304      	adds	r3, #4
 800141e:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 8001420:	6113      	str	r3, [r2, #16]
		}

		if(CAN_Rx_Message.DLC == 8)
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d119      	bne.n	800145e <PDM_CAN_Transmit_Data+0x14a>
		{
			ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <PDM_CAN_Transmit_Data+0x1c0>)
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 800142e:	491f      	ldr	r1, [pc, #124]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f003 fd9d 	bl	8004f70 <HAL_CAN_AddTxMessage>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

			//Wait Transmission finish
			for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800143a:	2300      	movs	r3, #0
 800143c:	737b      	strb	r3, [r7, #13]
 800143e:	e002      	b.n	8001446 <PDM_CAN_Transmit_Data+0x132>
 8001440:	7b7b      	ldrb	r3, [r7, #13]
 8001442:	3301      	adds	r3, #1
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f003 fe6d 	bl	8005126 <HAL_CAN_GetTxMailboxesFreeLevel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b03      	cmp	r3, #3
 8001450:	d002      	beq.n	8001458 <PDM_CAN_Transmit_Data+0x144>
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d9f3      	bls.n	8001440 <PDM_CAN_Transmit_Data+0x12c>

			CAN_Rx_Message.DLC = 0;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	2b1d      	cmp	r3, #29
 8001468:	d993      	bls.n	8001392 <PDM_CAN_Transmit_Data+0x7e>
		}
	}

	if(CAN_Rx_Message.DLC == 4)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <PDM_CAN_Transmit_Data+0x1ac>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b04      	cmp	r3, #4
 8001470:	d116      	bne.n	80014a0 <PDM_CAN_Transmit_Data+0x18c>
	{
		ret_val = HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Message, CAN_Tx_Data, &pTxMailbox);
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <PDM_CAN_Transmit_Data+0x1c0>)
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <PDM_CAN_Transmit_Data+0x1b8>)
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <PDM_CAN_Transmit_Data+0x198>)
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f003 fd79 	bl	8004f70 <HAL_CAN_AddTxMessage>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001482:	2300      	movs	r3, #0
 8001484:	733b      	strb	r3, [r7, #12]
 8001486:	e002      	b.n	800148e <PDM_CAN_Transmit_Data+0x17a>
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	733b      	strb	r3, [r7, #12]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f003 fe49 	bl	8005126 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b03      	cmp	r3, #3
 8001498:	d002      	beq.n	80014a0 <PDM_CAN_Transmit_Data+0x18c>
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d9f3      	bls.n	8001488 <PDM_CAN_Transmit_Data+0x174>
	}

	return ret_val;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000e44 	.word	0x20000e44
 80014b0:	1e35c003 	.word	0x1e35c003
 80014b4:	1e35c004 	.word	0x1e35c004
 80014b8:	1e35c005 	.word	0x1e35c005
 80014bc:	1e35c006 	.word	0x1e35c006
 80014c0:	20000ed0 	.word	0x20000ed0
 80014c4:	20000f30 	.word	0x20000f30
 80014c8:	20001164 	.word	0x20001164
 80014cc:	200012b4 	.word	0x200012b4
 80014d0:	20001230 	.word	0x20001230
 80014d4:	200003d8 	.word	0x200003d8

080014d8 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	uint8_t receive_flag = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
	uint32_t rx_id = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]

	if(CAN_Rx_Message.IDE == CAN_ID_STD)
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <PDM_CAN_Process_Rx_Data+0x184>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <PDM_CAN_Process_Rx_Data+0x1e>
	{
		rx_id = CAN_Rx_Message.StdId;
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <PDM_CAN_Process_Rx_Data+0x184>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	e002      	b.n	80014fc <PDM_CAN_Process_Rx_Data+0x24>
	}else{
		rx_id = CAN_Rx_Message.ExtId;
 80014f6:	4b59      	ldr	r3, [pc, #356]	; (800165c <PDM_CAN_Process_Rx_Data+0x184>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i = 0; i < 4; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	e0a4      	b.n	800164c <PDM_CAN_Process_Rx_Data+0x174>
	{
		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[0])
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a56      	ldr	r2, [pc, #344]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 8001506:	f44f 710c 	mov.w	r1, #560	; 0x230
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	331c      	adds	r3, #28
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	429a      	cmp	r2, r3
 8001518:	d13c      	bne.n	8001594 <PDM_CAN_Process_Rx_Data+0xbc>
		{
			PWM_Pins[i].Command_Var[0]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0]]) << 8;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a50      	ldr	r2, [pc, #320]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 800151e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3318      	adds	r3, #24
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	021a      	lsls	r2, r3, #8
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	b210      	sxth	r0, r2
 8001538:	4a49      	ldr	r2, [pc, #292]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 800153a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3326      	adds	r3, #38	; 0x26
 8001546:	4602      	mov	r2, r0
 8001548:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[0] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[0] + 1]) & 0xFF;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4a44      	ldr	r2, [pc, #272]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 800154e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001552:	fb01 f303 	mul.w	r3, r1, r3
 8001556:	4413      	add	r3, r2
 8001558:	3326      	adds	r3, #38	; 0x26
 800155a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 8001562:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001566:	fb00 f303 	mul.w	r3, r0, r3
 800156a:	4413      	add	r3, r2
 800156c:	3318      	adds	r3, #24
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	b21a      	sxth	r2, r3
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	430a      	orrs	r2, r1
 800157c:	b210      	sxth	r0, r2
 800157e:	4a38      	ldr	r2, [pc, #224]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 8001580:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	4413      	add	r3, r2
 800158a:	3326      	adds	r3, #38	; 0x26
 800158c:	4602      	mov	r2, r0
 800158e:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
		}

		if(rx_id == PWM_Pins[i].Command_Var_CAN_ID[1])
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4a32      	ldr	r2, [pc, #200]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 8001598:	f44f 710c 	mov.w	r1, #560	; 0x230
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	3320      	adds	r3, #32
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d13c      	bne.n	8001626 <PDM_CAN_Process_Rx_Data+0x14e>
		{
			PWM_Pins[i].Command_Var[1]  = (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1]]) << 8;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 80015b0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	3319      	adds	r3, #25
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <PDM_CAN_Process_Rx_Data+0x18c>)
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	021a      	lsls	r2, r3, #8
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	b210      	sxth	r0, r2
 80015ca:	4a25      	ldr	r2, [pc, #148]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 80015cc:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	3328      	adds	r3, #40	; 0x28
 80015d8:	4602      	mov	r2, r0
 80015da:	801a      	strh	r2, [r3, #0]
			PWM_Pins[i].Command_Var[1] |= (CAN_Rx_Data[PWM_Pins[i].Command_Var_Position[1] + 1]) & 0xFF;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 80015e0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	3328      	adds	r3, #40	; 0x28
 80015ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 80015f4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80015f8:	fb00 f303 	mul.w	r3, r0, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	3319      	adds	r3, #25
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <PDM_CAN_Process_Rx_Data+0x18c>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	b21a      	sxth	r2, r3
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	430a      	orrs	r2, r1
 800160e:	b210      	sxth	r0, r2
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 8001612:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	3328      	adds	r3, #40	; 0x28
 800161e:	4602      	mov	r2, r0
 8001620:	801a      	strh	r2, [r3, #0]

			receive_flag = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
		}

		if(receive_flag == 1)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10c      	bne.n	8001646 <PDM_CAN_Process_Rx_Data+0x16e>
		{
			PDM_PWM_Output_Process(&PWM_Pins[i], i);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <PDM_CAN_Process_Rx_Data+0x188>)
 8001638:	4413      	add	r3, r2
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f001 ffdc 	bl	80035fc <PDM_PWM_Output_Process>
			return;
 8001644:	e007      	b.n	8001656 <PDM_CAN_Process_Rx_Data+0x17e>
	for(uint8_t i = 0; i < 4; i++)
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	3301      	adds	r3, #1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b03      	cmp	r3, #3
 8001650:	f67f af57 	bls.w	8001502 <PDM_CAN_Process_Rx_Data+0x2a>
		}
	}

	return;
 8001654:	bf00      	nop
}
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000ed0 	.word	0x20000ed0
 8001660:	20000534 	.word	0x20000534
 8001664:	20001110 	.word	0x20001110

08001668 <PDM_Load_Config_Buffer>:

//Use to load pin, current limit and basic pwm control into a buffer
//uint8_t *data_buffer - buffer to receive config
//uint16_t Size - size of the buffer, must match the size of the config (EEPROM_BUFFER_SIZE)
static void PDM_Load_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001668:	b490      	push	{r4, r7}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
	if(Size != EEPROM_BUFFER_SIZE)
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800167a:	f040 82d0 	bne.w	8001c1e <PDM_Load_Config_Buffer+0x5b6>
		return;

	uint16_t data_index = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	82fb      	strh	r3, [r7, #22]

	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	82bb      	strh	r3, [r7, #20]
 8001686:	e0e4      	b.n	8001852 <PDM_Load_Config_Buffer+0x1ea>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001688:	2300      	movs	r3, #0
 800168a:	74fb      	strb	r3, [r7, #19]
 800168c:	e073      	b.n	8001776 <PDM_Load_Config_Buffer+0x10e>
		{
			Output_Pin[i].Enabled_Inputs[j]  = data_buffer[data_index++] << 8;
 800168e:	8afb      	ldrh	r3, [r7, #22]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	82fa      	strh	r2, [r7, #22]
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	8aba      	ldrh	r2, [r7, #20]
 80016a0:	7cf9      	ldrb	r1, [r7, #19]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b29c      	uxth	r4, r3
 80016a6:	4881      	ldr	r0, [pc, #516]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			Output_Pin[i].Enabled_Inputs[j] |= data_buffer[data_index++] & 0xFF;
 80016b8:	8afb      	ldrh	r3, [r7, #22]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	82fa      	strh	r2, [r7, #22]
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461c      	mov	r4, r3
 80016c8:	8aba      	ldrh	r2, [r7, #20]
 80016ca:	7cf9      	ldrb	r1, [r7, #19]
 80016cc:	4877      	ldr	r0, [pc, #476]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	440b      	add	r3, r1
 80016d8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80016dc:	b21a      	sxth	r2, r3
 80016de:	b223      	sxth	r3, r4
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	8aba      	ldrh	r2, [r7, #20]
 80016e6:	7cf9      	ldrb	r1, [r7, #19]
 80016e8:	b29c      	uxth	r4, r3
 80016ea:	4870      	ldr	r0, [pc, #448]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	4622      	mov	r2, r4
 80016f8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

			Output_Pin[i].Input_Levels[j]	 = data_buffer[data_index++] << 8;
 80016fc:	8afb      	ldrh	r3, [r7, #22]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	82fa      	strh	r2, [r7, #22]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	8aba      	ldrh	r2, [r7, #20]
 800170e:	7cf9      	ldrb	r1, [r7, #19]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b29c      	uxth	r4, r3
 8001714:	4865      	ldr	r0, [pc, #404]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4403      	add	r3, r0
 8001724:	4622      	mov	r2, r4
 8001726:	809a      	strh	r2, [r3, #4]
			Output_Pin[i].Input_Levels[j]	|= data_buffer[data_index++] & 0xFF;
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	82fa      	strh	r2, [r7, #22]
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461c      	mov	r4, r3
 8001738:	8aba      	ldrh	r2, [r7, #20]
 800173a:	7cf9      	ldrb	r1, [r7, #19]
 800173c:	485b      	ldr	r0, [pc, #364]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	440b      	add	r3, r1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4403      	add	r3, r0
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	b21a      	sxth	r2, r3
 8001750:	b223      	sxth	r3, r4
 8001752:	4313      	orrs	r3, r2
 8001754:	b21b      	sxth	r3, r3
 8001756:	8aba      	ldrh	r2, [r7, #20]
 8001758:	7cf9      	ldrb	r1, [r7, #19]
 800175a:	b29c      	uxth	r4, r3
 800175c:	4853      	ldr	r0, [pc, #332]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4403      	add	r3, r0
 800176c:	4622      	mov	r2, r4
 800176e:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 2 ; j++)
 8001770:	7cfb      	ldrb	r3, [r7, #19]
 8001772:	3301      	adds	r3, #1
 8001774:	74fb      	strb	r3, [r7, #19]
 8001776:	7cfb      	ldrb	r3, [r7, #19]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d988      	bls.n	800168e <PDM_Load_Config_Buffer+0x26>
		}
		Output_Pin[i].Current_Thresholds   = data_buffer[data_index++] << 8;
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	82fa      	strh	r2, [r7, #22]
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	8aba      	ldrh	r2, [r7, #20]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b298      	uxth	r0, r3
 8001792:	4946      	ldr	r1, [pc, #280]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	3308      	adds	r3, #8
 80017a0:	4602      	mov	r2, r0
 80017a2:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Current_Thresholds  |= data_buffer[data_index++] & 0xFF;
 80017a4:	8afb      	ldrh	r3, [r7, #22]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	82fa      	strh	r2, [r7, #22]
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	8aba      	ldrh	r2, [r7, #20]
 80017b6:	493d      	ldr	r1, [pc, #244]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3308      	adds	r3, #8
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	b203      	sxth	r3, r0
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	8aba      	ldrh	r2, [r7, #20]
 80017d0:	b298      	uxth	r0, r3
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3308      	adds	r3, #8
 80017e0:	4602      	mov	r2, r0
 80017e2:	801a      	strh	r2, [r3, #0]

		Output_Pin[i].Timeout_Output_Fuse  = data_buffer[data_index++] << 8;
 80017e4:	8afb      	ldrh	r3, [r7, #22]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	82fa      	strh	r2, [r7, #22]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	8aba      	ldrh	r2, [r7, #20]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b298      	uxth	r0, r3
 80017fa:	492c      	ldr	r1, [pc, #176]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	330a      	adds	r3, #10
 8001808:	4602      	mov	r2, r0
 800180a:	801a      	strh	r2, [r3, #0]
		Output_Pin[i].Timeout_Output_Fuse |= data_buffer[data_index++] & 0xFF;
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	82fa      	strh	r2, [r7, #22]
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	8aba      	ldrh	r2, [r7, #20]
 800181e:	4923      	ldr	r1, [pc, #140]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	330a      	adds	r3, #10
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b21a      	sxth	r2, r3
 8001830:	b203      	sxth	r3, r0
 8001832:	4313      	orrs	r3, r2
 8001834:	b21b      	sxth	r3, r3
 8001836:	8aba      	ldrh	r2, [r7, #20]
 8001838:	b298      	uxth	r0, r3
 800183a:	491c      	ldr	r1, [pc, #112]	; (80018ac <PDM_Load_Config_Buffer+0x244>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	330a      	adds	r3, #10
 8001848:	4602      	mov	r2, r0
 800184a:	801a      	strh	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 800184c:	8abb      	ldrh	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	82bb      	strh	r3, [r7, #20]
 8001852:	8abb      	ldrh	r3, [r7, #20]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	f67f af17 	bls.w	8001688 <PDM_Load_Config_Buffer+0x20>
	}

	CAN_Baud_Rate = data_buffer[data_index++];
 800185a:	8afb      	ldrh	r3, [r7, #22]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	82fa      	strh	r2, [r7, #22]
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <PDM_Load_Config_Buffer+0x248>)
 800186a:	701a      	strb	r2, [r3, #0]

	PWM_Pin_Status = data_buffer[data_index++];
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	82fa      	strh	r2, [r7, #22]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <PDM_Load_Config_Buffer+0x24c>)
 800187c:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	823b      	strh	r3, [r7, #16]
 8001882:	e1b4      	b.n	8001bee <PDM_Load_Config_Buffer+0x586>
	{
		PWM_Pins[i].PWM_Frequency = data_buffer[data_index++];
 8001884:	8afb      	ldrh	r3, [r7, #22]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	82fa      	strh	r2, [r7, #22]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	441a      	add	r2, r3
 8001890:	8a3b      	ldrh	r3, [r7, #16]
 8001892:	7810      	ldrb	r0, [r2, #0]
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <PDM_Load_Config_Buffer+0x250>)
 8001896:	f44f 710c 	mov.w	r1, #560	; 0x230
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	4602      	mov	r2, r0
 80018a2:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e082      	b.n	80019b0 <PDM_Load_Config_Buffer+0x348>
 80018aa:	bf00      	nop
 80018ac:	20001050 	.word	0x20001050
 80018b0:	2000104c 	.word	0x2000104c
 80018b4:	20000ea4 	.word	0x20000ea4
 80018b8:	20000534 	.word	0x20000534
		{
			PWM_Pins[i].Input_DC_Preset_Enable[j]  = data_buffer[data_index++] << 8;
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	82fa      	strh	r2, [r7, #22]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b299      	uxth	r1, r3
 80018cc:	8a3a      	ldrh	r2, [r7, #16]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	0209      	lsls	r1, r1, #8
 80018d2:	b28c      	uxth	r4, r1
 80018d4:	4939      	ldr	r1, [pc, #228]	; (80019bc <PDM_Load_Config_Buffer+0x354>)
 80018d6:	f44f 708c 	mov.w	r0, #280	; 0x118
 80018da:	fb00 f202 	mul.w	r2, r0, r2
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	440b      	add	r3, r1
 80018e4:	4622      	mov	r2, r4
 80018e6:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset_Enable[j] |= data_buffer[data_index++] & 0xFF;
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	82fa      	strh	r2, [r7, #22]
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461c      	mov	r4, r3
 80018f8:	8a3a      	ldrh	r2, [r7, #16]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	492f      	ldr	r1, [pc, #188]	; (80019bc <PDM_Load_Config_Buffer+0x354>)
 80018fe:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001902:	fb00 f202 	mul.w	r2, r0, r2
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	889b      	ldrh	r3, [r3, #4]
 800190e:	b21a      	sxth	r2, r3
 8001910:	b223      	sxth	r3, r4
 8001912:	4313      	orrs	r3, r2
 8001914:	b219      	sxth	r1, r3
 8001916:	8a3a      	ldrh	r2, [r7, #16]
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	b28c      	uxth	r4, r1
 800191c:	4927      	ldr	r1, [pc, #156]	; (80019bc <PDM_Load_Config_Buffer+0x354>)
 800191e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001922:	fb00 f202 	mul.w	r2, r0, r2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	4622      	mov	r2, r4
 800192e:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Input_DC_Preset[j] 		   = data_buffer[data_index++] << 8;
 8001930:	8afb      	ldrh	r3, [r7, #22]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	82fa      	strh	r2, [r7, #22]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b299      	uxth	r1, r3
 8001940:	8a3a      	ldrh	r2, [r7, #16]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	0209      	lsls	r1, r1, #8
 8001946:	b28c      	uxth	r4, r1
 8001948:	491c      	ldr	r1, [pc, #112]	; (80019bc <PDM_Load_Config_Buffer+0x354>)
 800194a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800194e:	fb00 f202 	mul.w	r2, r0, r2
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	440b      	add	r3, r1
 800195a:	4622      	mov	r2, r4
 800195c:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Input_DC_Preset[j] 		  |= data_buffer[data_index++] & 0xFF;
 800195e:	8afb      	ldrh	r3, [r7, #22]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	82fa      	strh	r2, [r7, #22]
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461c      	mov	r4, r3
 800196e:	8a3a      	ldrh	r2, [r7, #16]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	4912      	ldr	r1, [pc, #72]	; (80019bc <PDM_Load_Config_Buffer+0x354>)
 8001974:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001978:	fb00 f202 	mul.w	r2, r0, r2
 800197c:	4413      	add	r3, r2
 800197e:	3304      	adds	r3, #4
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	440b      	add	r3, r1
 8001984:	889b      	ldrh	r3, [r3, #4]
 8001986:	b21a      	sxth	r2, r3
 8001988:	b223      	sxth	r3, r4
 800198a:	4313      	orrs	r3, r2
 800198c:	b219      	sxth	r1, r3
 800198e:	8a3a      	ldrh	r2, [r7, #16]
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	b28c      	uxth	r4, r1
 8001994:	4909      	ldr	r1, [pc, #36]	; (80019bc <PDM_Load_Config_Buffer+0x354>)
 8001996:	f44f 708c 	mov.w	r0, #280	; 0x118
 800199a:	fb00 f202 	mul.w	r2, r0, r2
 800199e:	4413      	add	r3, r2
 80019a0:	3304      	adds	r3, #4
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	440b      	add	r3, r1
 80019a6:	4622      	mov	r2, r4
 80019a8:	809a      	strh	r2, [r3, #4]
		for(uint8_t j = 0; j < 4; j++)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d982      	bls.n	80018bc <PDM_Load_Config_Buffer+0x254>
		}

		for(uint8_t j = 0; j < 2; j++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
 80019ba:	e111      	b.n	8001be0 <PDM_Load_Config_Buffer+0x578>
 80019bc:	20000534 	.word	0x20000534
		{
			PWM_Pins[i].Duty_Cycle_Preset[j]	 = data_buffer[data_index++] << 8;
 80019c0:	8afb      	ldrh	r3, [r7, #22]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	82fa      	strh	r2, [r7, #22]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b299      	uxth	r1, r3
 80019d0:	8a3a      	ldrh	r2, [r7, #16]
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	0209      	lsls	r1, r1, #8
 80019d6:	b28c      	uxth	r4, r1
 80019d8:	4993      	ldr	r1, [pc, #588]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 80019da:	f44f 708c 	mov.w	r0, #280	; 0x118
 80019de:	fb00 f202 	mul.w	r2, r0, r2
 80019e2:	4413      	add	r3, r2
 80019e4:	3308      	adds	r3, #8
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	4622      	mov	r2, r4
 80019ec:	809a      	strh	r2, [r3, #4]
			PWM_Pins[i].Duty_Cycle_Preset[j]	|= data_buffer[data_index++] & 0xFF;
 80019ee:	8afb      	ldrh	r3, [r7, #22]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	82fa      	strh	r2, [r7, #22]
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461c      	mov	r4, r3
 80019fe:	8a3a      	ldrh	r2, [r7, #16]
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	4989      	ldr	r1, [pc, #548]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001a04:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001a08:	fb00 f202 	mul.w	r2, r0, r2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3308      	adds	r3, #8
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	440b      	add	r3, r1
 8001a14:	889b      	ldrh	r3, [r3, #4]
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	b223      	sxth	r3, r4
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b219      	sxth	r1, r3
 8001a1e:	8a3a      	ldrh	r2, [r7, #16]
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	b28c      	uxth	r4, r1
 8001a24:	4980      	ldr	r1, [pc, #512]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001a26:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001a2a:	fb00 f202 	mul.w	r2, r0, r2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3308      	adds	r3, #8
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	440b      	add	r3, r1
 8001a36:	4622      	mov	r2, r4
 8001a38:	809a      	strh	r2, [r3, #4]

			PWM_Pins[i].Command_Var_Position[j]  = data_buffer[data_index++];
 8001a3a:	8afb      	ldrh	r3, [r7, #22]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	82fa      	strh	r2, [r7, #22]
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1899      	adds	r1, r3, r2
 8001a46:	8a3a      	ldrh	r2, [r7, #16]
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	780c      	ldrb	r4, [r1, #0]
 8001a4c:	4976      	ldr	r1, [pc, #472]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001a4e:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001a52:	fb00 f202 	mul.w	r2, r0, r2
 8001a56:	440a      	add	r2, r1
 8001a58:	4413      	add	r3, r2
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_CAN_ID[j]	 = data_buffer[data_index++] << 24;
 8001a60:	8afb      	ldrh	r3, [r7, #22]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	82fa      	strh	r2, [r7, #22]
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	0619      	lsls	r1, r3, #24
 8001a70:	8a3a      	ldrh	r2, [r7, #16]
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	460c      	mov	r4, r1
 8001a76:	496c      	ldr	r1, [pc, #432]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001a78:	208c      	movs	r0, #140	; 0x8c
 8001a7a:	fb00 f202 	mul.w	r2, r0, r2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3306      	adds	r3, #6
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	605c      	str	r4, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 16;
 8001a88:	8afb      	ldrh	r3, [r7, #22]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	82fa      	strh	r2, [r7, #22]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	041c      	lsls	r4, r3, #16
 8001a98:	8a3a      	ldrh	r2, [r7, #16]
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	4962      	ldr	r1, [pc, #392]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001a9e:	208c      	movs	r0, #140	; 0x8c
 8001aa0:	fb00 f202 	mul.w	r2, r0, r2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4620      	mov	r0, r4
 8001ab0:	8a39      	ldrh	r1, [r7, #16]
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	485c      	ldr	r0, [pc, #368]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001ab8:	248c      	movs	r4, #140	; 0x8c
 8001aba:	fb04 f101 	mul.w	r1, r4, r1
 8001abe:	440b      	add	r3, r1
 8001ac0:	3306      	adds	r3, #6
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4403      	add	r3, r0
 8001ac6:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] << 8;
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	82fa      	strh	r2, [r7, #22]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	021c      	lsls	r4, r3, #8
 8001ad8:	8a3a      	ldrh	r2, [r7, #16]
 8001ada:	7bbb      	ldrb	r3, [r7, #14]
 8001adc:	4952      	ldr	r1, [pc, #328]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001ade:	208c      	movs	r0, #140	; 0x8c
 8001ae0:	fb00 f202 	mul.w	r2, r0, r2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3306      	adds	r3, #6
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4620      	mov	r0, r4
 8001af0:	8a39      	ldrh	r1, [r7, #16]
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
 8001af4:	4302      	orrs	r2, r0
 8001af6:	484c      	ldr	r0, [pc, #304]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001af8:	248c      	movs	r4, #140	; 0x8c
 8001afa:	fb04 f101 	mul.w	r1, r4, r1
 8001afe:	440b      	add	r3, r1
 8001b00:	3306      	adds	r3, #6
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4403      	add	r3, r0
 8001b06:	605a      	str	r2, [r3, #4]
			PWM_Pins[i].Command_Var_CAN_ID[j]	|= data_buffer[data_index++] & 0xFF;
 8001b08:	8afb      	ldrh	r3, [r7, #22]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	82fa      	strh	r2, [r7, #22]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461c      	mov	r4, r3
 8001b18:	8a3a      	ldrh	r2, [r7, #16]
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	4942      	ldr	r1, [pc, #264]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001b1e:	208c      	movs	r0, #140	; 0x8c
 8001b20:	fb00 f202 	mul.w	r2, r0, r2
 8001b24:	4413      	add	r3, r2
 8001b26:	3306      	adds	r3, #6
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4620      	mov	r0, r4
 8001b30:	8a39      	ldrh	r1, [r7, #16]
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	4302      	orrs	r2, r0
 8001b36:	483c      	ldr	r0, [pc, #240]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001b38:	248c      	movs	r4, #140	; 0x8c
 8001b3a:	fb04 f101 	mul.w	r1, r4, r1
 8001b3e:	440b      	add	r3, r1
 8001b40:	3306      	adds	r3, #6
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	605a      	str	r2, [r3, #4]

			PWM_Pins[i].Map_Lengths[j]			 = data_buffer[data_index++] & 0xFF;
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	82fa      	strh	r2, [r7, #22]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	1899      	adds	r1, r3, r2
 8001b54:	8a3a      	ldrh	r2, [r7, #16]
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	780c      	ldrb	r4, [r1, #0]
 8001b5a:	4933      	ldr	r1, [pc, #204]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001b5c:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001b60:	fb00 f202 	mul.w	r2, r0, r2
 8001b64:	440a      	add	r2, r1
 8001b66:	4413      	add	r3, r2
 8001b68:	3324      	adds	r3, #36	; 0x24
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	701a      	strb	r2, [r3, #0]

			PWM_Pins[i].Command_Var_Lim[j][0]	 = data_buffer[data_index++] << 8;
 8001b6e:	8afb      	ldrh	r3, [r7, #22]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	82fa      	strh	r2, [r7, #22]
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	0219      	lsls	r1, r3, #8
 8001b7e:	8a3a      	ldrh	r2, [r7, #16]
 8001b80:	7bbb      	ldrb	r3, [r7, #14]
 8001b82:	b20c      	sxth	r4, r1
 8001b84:	4928      	ldr	r1, [pc, #160]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001b86:	208c      	movs	r0, #140	; 0x8c
 8001b88:	fb00 f202 	mul.w	r2, r0, r2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	330a      	adds	r3, #10
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	4622      	mov	r2, r4
 8001b96:	805a      	strh	r2, [r3, #2]
			PWM_Pins[i].Command_Var_Lim[j][1]	|= data_buffer[data_index++] & 0xFF;
 8001b98:	8afb      	ldrh	r3, [r7, #22]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	82fa      	strh	r2, [r7, #22]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461c      	mov	r4, r3
 8001ba8:	8a3a      	ldrh	r2, [r7, #16]
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	491e      	ldr	r1, [pc, #120]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001bae:	208c      	movs	r0, #140	; 0x8c
 8001bb0:	fb00 f202 	mul.w	r2, r0, r2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8001bbe:	b221      	sxth	r1, r4
 8001bc0:	8a3a      	ldrh	r2, [r7, #16]
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	4301      	orrs	r1, r0
 8001bc6:	b20c      	sxth	r4, r1
 8001bc8:	4917      	ldr	r1, [pc, #92]	; (8001c28 <PDM_Load_Config_Buffer+0x5c0>)
 8001bca:	208c      	movs	r0, #140	; 0x8c
 8001bcc:	fb00 f202 	mul.w	r2, r0, r2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	859a      	strh	r2, [r3, #44]	; 0x2c
		for(uint8_t j = 0; j < 2; j++)
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	73bb      	strb	r3, [r7, #14]
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	f67f aeec 	bls.w	80019c0 <PDM_Load_Config_Buffer+0x358>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001be8:	8a3b      	ldrh	r3, [r7, #16]
 8001bea:	3301      	adds	r3, #1
 8001bec:	823b      	strh	r3, [r7, #16]
 8001bee:	8a3b      	ldrh	r3, [r7, #16]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	f67f ae47 	bls.w	8001884 <PDM_Load_Config_Buffer+0x21c>
		}
	}

	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	81bb      	strh	r3, [r7, #12]
 8001bfa:	e00c      	b.n	8001c16 <PDM_Load_Config_Buffer+0x5ae>
	{
		Data_Freq_Buffer[i] = data_buffer[data_index++];
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	82fa      	strh	r2, [r7, #22]
 8001c02:	461a      	mov	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	441a      	add	r2, r3
 8001c08:	89bb      	ldrh	r3, [r7, #12]
 8001c0a:	7811      	ldrb	r1, [r2, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <PDM_Load_Config_Buffer+0x5c4>)
 8001c0e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 8001c10:	89bb      	ldrh	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	81bb      	strh	r3, [r7, #12]
 8001c16:	89bb      	ldrh	r3, [r7, #12]
 8001c18:	2b1d      	cmp	r3, #29
 8001c1a:	d9ef      	bls.n	8001bfc <PDM_Load_Config_Buffer+0x594>
	}

	return;
 8001c1c:	e000      	b.n	8001c20 <PDM_Load_Config_Buffer+0x5b8>
		return;
 8001c1e:	bf00      	nop
}
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc90      	pop	{r4, r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000534 	.word	0x20000534
 8001c2c:	20000f30 	.word	0x20000f30

08001c30 <PDM_Load_Map_Buffer>:

//Use to load pwm 3D map into a buffer
//uint8_t *data_buffer - buffer to receive 3D map
//uint16_t Size - size of the buffer, must match the size of the config (EEPROM_MAP_BUFFER_SIZE)
static void PDM_Load_Map_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001c30:	b4b0      	push	{r4, r5, r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
	if(Size != EEPROM_MAP_BUFFER_SIZE)
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001c42:	d169      	bne.n	8001d18 <PDM_Load_Map_Buffer+0xe8>
		return;

	uint16_t data_index = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	81fb      	strh	r3, [r7, #14]

	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	81bb      	strh	r3, [r7, #12]
 8001c4c:	e060      	b.n	8001d10 <PDM_Load_Map_Buffer+0xe0>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	72fb      	strb	r3, [r7, #11]
 8001c52:	e057      	b.n	8001d04 <PDM_Load_Map_Buffer+0xd4>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	72bb      	strb	r3, [r7, #10]
 8001c58:	e04e      	b.n	8001cf8 <PDM_Load_Map_Buffer+0xc8>
			{
				PWM_Pins[i].Duty_Cycle_Map[j][k]  = data_buffer[data_index++] << 8;
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	81fa      	strh	r2, [r7, #14]
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	89b8      	ldrh	r0, [r7, #12]
 8001c6c:	7afa      	ldrb	r2, [r7, #11]
 8001c6e:	7ab9      	ldrb	r1, [r7, #10]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b29d      	uxth	r5, r3
 8001c74:	4c2b      	ldr	r4, [pc, #172]	; (8001d24 <PDM_Load_Map_Buffer+0xf4>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c80:	fb02 f200 	mul.w	r2, r2, r0
 8001c84:	4413      	add	r3, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	3334      	adds	r3, #52	; 0x34
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4423      	add	r3, r4
 8001c8e:	462a      	mov	r2, r5
 8001c90:	80da      	strh	r2, [r3, #6]
				PWM_Pins[i].Duty_Cycle_Map[j][k] |= data_buffer[data_index++] & 0xFF;
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	81fa      	strh	r2, [r7, #14]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	89b8      	ldrh	r0, [r7, #12]
 8001ca4:	7afa      	ldrb	r2, [r7, #11]
 8001ca6:	7ab9      	ldrb	r1, [r7, #10]
 8001ca8:	4c1e      	ldr	r4, [pc, #120]	; (8001d24 <PDM_Load_Map_Buffer+0xf4>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001cb4:	fb02 f200 	mul.w	r2, r2, r0
 8001cb8:	4413      	add	r3, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	3334      	adds	r3, #52	; 0x34
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4423      	add	r3, r4
 8001cc2:	88db      	ldrh	r3, [r3, #6]
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	b22b      	sxth	r3, r5
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	89b8      	ldrh	r0, [r7, #12]
 8001cce:	7afa      	ldrb	r2, [r7, #11]
 8001cd0:	7ab9      	ldrb	r1, [r7, #10]
 8001cd2:	b29d      	uxth	r5, r3
 8001cd4:	4c13      	ldr	r4, [pc, #76]	; (8001d24 <PDM_Load_Map_Buffer+0xf4>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ce0:	fb02 f200 	mul.w	r2, r2, r0
 8001ce4:	4413      	add	r3, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3334      	adds	r3, #52	; 0x34
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4423      	add	r3, r4
 8001cee:	462a      	mov	r2, r5
 8001cf0:	80da      	strh	r2, [r3, #6]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8001cf2:	7abb      	ldrb	r3, [r7, #10]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	72bb      	strb	r3, [r7, #10]
 8001cf8:	7abb      	ldrb	r3, [r7, #10]
 8001cfa:	2b0e      	cmp	r3, #14
 8001cfc:	d9ad      	bls.n	8001c5a <PDM_Load_Map_Buffer+0x2a>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	3301      	adds	r3, #1
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	2b0e      	cmp	r3, #14
 8001d08:	d9a4      	bls.n	8001c54 <PDM_Load_Map_Buffer+0x24>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001d0a:	89bb      	ldrh	r3, [r7, #12]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	81bb      	strh	r3, [r7, #12]
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d99b      	bls.n	8001c4e <PDM_Load_Map_Buffer+0x1e>
			}
		}
	}

	return;
 8001d16:	e000      	b.n	8001d1a <PDM_Load_Map_Buffer+0xea>
		return;
 8001d18:	bf00      	nop
}
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bcb0      	pop	{r4, r5, r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000534 	.word	0x20000534

08001d28 <PDM_Write_Config_Buffer>:

//Use to write pin, current limit and basic pwm control into their respective variables
//uint8_t *data_buffer - buffer to send config
//uint16_t Size - size of the buffer, must match the size of the config (EEPROM_BUFFER_SIZE)
static void PDM_Write_Config_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8001d28:	b490      	push	{r4, r7}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
	if(Size != EEPROM_BUFFER_SIZE)
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001d3a:	f040 820b 	bne.w	8002154 <PDM_Write_Config_Buffer+0x42c>
		return;

	uint16_t data_index = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	82fb      	strh	r3, [r7, #22]

	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	82bb      	strh	r3, [r7, #20]
 8001d46:	e0a1      	b.n	8001e8c <PDM_Write_Config_Buffer+0x164>
	{
		for(uint8_t j = 0; j < 2 ; j++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	74fb      	strb	r3, [r7, #19]
 8001d4c:	e050      	b.n	8001df0 <PDM_Write_Config_Buffer+0xc8>
		{
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] >> 8;
 8001d4e:	8aba      	ldrh	r2, [r7, #20]
 8001d50:	7cf9      	ldrb	r1, [r7, #19]
 8001d52:	4891      	ldr	r0, [pc, #580]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	8afb      	ldrh	r3, [r7, #22]
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	82f9      	strh	r1, [r7, #22]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	440b      	add	r3, r1
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Enabled_Inputs[j] & 0xFF;
 8001d76:	8aba      	ldrh	r2, [r7, #20]
 8001d78:	7cf9      	ldrb	r1, [r7, #19]
 8001d7a:	4887      	ldr	r0, [pc, #540]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	440b      	add	r3, r1
 8001d86:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8001d8a:	8afb      	ldrh	r3, [r7, #22]
 8001d8c:	1c59      	adds	r1, r3, #1
 8001d8e:	82f9      	strh	r1, [r7, #22]
 8001d90:	4619      	mov	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	440b      	add	r3, r1
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] >> 8;
 8001d9a:	8aba      	ldrh	r2, [r7, #20]
 8001d9c:	7cf9      	ldrb	r1, [r7, #19]
 8001d9e:	487e      	ldr	r0, [pc, #504]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	440b      	add	r3, r1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4403      	add	r3, r0
 8001dae:	889b      	ldrh	r3, [r3, #4]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	8afb      	ldrh	r3, [r7, #22]
 8001db6:	1c59      	adds	r1, r3, #1
 8001db8:	82f9      	strh	r1, [r7, #22]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	440b      	add	r3, r1
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = Output_Pin[i].Input_Levels[j] & 0xFF;
 8001dc4:	8aba      	ldrh	r2, [r7, #20]
 8001dc6:	7cf9      	ldrb	r1, [r7, #19]
 8001dc8:	4873      	ldr	r0, [pc, #460]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	440b      	add	r3, r1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4403      	add	r3, r0
 8001dd8:	889a      	ldrh	r2, [r3, #4]
 8001dda:	8afb      	ldrh	r3, [r7, #22]
 8001ddc:	1c59      	adds	r1, r3, #1
 8001dde:	82f9      	strh	r1, [r7, #22]
 8001de0:	4619      	mov	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	440b      	add	r3, r1
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2 ; j++)
 8001dea:	7cfb      	ldrb	r3, [r7, #19]
 8001dec:	3301      	adds	r3, #1
 8001dee:	74fb      	strb	r3, [r7, #19]
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d9ab      	bls.n	8001d4e <PDM_Write_Config_Buffer+0x26>
		}
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds >> 8;
 8001df6:	8aba      	ldrh	r2, [r7, #20]
 8001df8:	4967      	ldr	r1, [pc, #412]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3308      	adds	r3, #8
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	8afb      	ldrh	r3, [r7, #22]
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	82f9      	strh	r1, [r7, #22]
 8001e12:	4619      	mov	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	440b      	add	r3, r1
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Current_Thresholds & 0xFF;
 8001e1c:	8aba      	ldrh	r2, [r7, #20]
 8001e1e:	495e      	ldr	r1, [pc, #376]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	8afb      	ldrh	r3, [r7, #22]
 8001e30:	1c59      	adds	r1, r3, #1
 8001e32:	82f9      	strh	r1, [r7, #22]
 8001e34:	4619      	mov	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	440b      	add	r3, r1
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse >> 8;
 8001e3e:	8aba      	ldrh	r2, [r7, #20]
 8001e40:	4955      	ldr	r1, [pc, #340]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	330a      	adds	r3, #10
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	82f9      	strh	r1, [r7, #22]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	440b      	add	r3, r1
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
		data_buffer[data_index++] = Output_Pin[i].Timeout_Output_Fuse & 0xFF;
 8001e64:	8aba      	ldrh	r2, [r7, #20]
 8001e66:	494c      	ldr	r1, [pc, #304]	; (8001f98 <PDM_Write_Config_Buffer+0x270>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	330a      	adds	r3, #10
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	8afb      	ldrh	r3, [r7, #22]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	82f9      	strh	r1, [r7, #22]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	440b      	add	r3, r1
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
	for(uint16_t i= 0; i < NBR_OF_OUTPUTS; i++)
 8001e86:	8abb      	ldrh	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	82bb      	strh	r3, [r7, #20]
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f af5a 	bls.w	8001d48 <PDM_Write_Config_Buffer+0x20>
	}

	data_buffer[data_index++] = CAN_Baud_Rate;
 8001e94:	8afb      	ldrh	r3, [r7, #22]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	82fa      	strh	r2, [r7, #22]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a3e      	ldr	r2, [pc, #248]	; (8001f9c <PDM_Write_Config_Buffer+0x274>)
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	701a      	strb	r2, [r3, #0]

	data_buffer[data_index++] = PWM_Pin_Status;
 8001ea6:	8afb      	ldrh	r3, [r7, #22]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	82fa      	strh	r2, [r7, #22]
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <PDM_Write_Config_Buffer+0x278>)
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	823b      	strh	r3, [r7, #16]
 8001ebc:	e145      	b.n	800214a <PDM_Write_Config_Buffer+0x422>
	{
		data_buffer[data_index++] = PWM_Pins[i].PWM_Frequency;
 8001ebe:	8a3a      	ldrh	r2, [r7, #16]
 8001ec0:	8afb      	ldrh	r3, [r7, #22]
 8001ec2:	1c59      	adds	r1, r3, #1
 8001ec4:	82f9      	strh	r1, [r7, #22]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	440b      	add	r3, r1
 8001ecc:	4935      	ldr	r1, [pc, #212]	; (8001fa4 <PDM_Write_Config_Buffer+0x27c>)
 8001ece:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001ed2:	fb00 f202 	mul.w	r2, r0, r2
 8001ed6:	440a      	add	r2, r1
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 4; j++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e054      	b.n	8001f8c <PDM_Write_Config_Buffer+0x264>
		{
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] >> 8;
 8001ee2:	8a3a      	ldrh	r2, [r7, #16]
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <PDM_Write_Config_Buffer+0x27c>)
 8001ee8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001eec:	fb00 f202 	mul.w	r2, r0, r2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	440b      	add	r3, r1
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	8afb      	ldrh	r3, [r7, #22]
 8001efe:	1c59      	adds	r1, r3, #1
 8001f00:	82f9      	strh	r1, [r7, #22]
 8001f02:	4619      	mov	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	440b      	add	r3, r1
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset_Enable[j] & 0xFF;
 8001f0c:	8a3a      	ldrh	r2, [r7, #16]
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <PDM_Write_Config_Buffer+0x27c>)
 8001f12:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001f16:	fb00 f202 	mul.w	r2, r0, r2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	889a      	ldrh	r2, [r3, #4]
 8001f22:	8afb      	ldrh	r3, [r7, #22]
 8001f24:	1c59      	adds	r1, r3, #1
 8001f26:	82f9      	strh	r1, [r7, #22]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] >> 8;
 8001f32:	8a3a      	ldrh	r2, [r7, #16]
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	491b      	ldr	r1, [pc, #108]	; (8001fa4 <PDM_Write_Config_Buffer+0x27c>)
 8001f38:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001f3c:	fb00 f202 	mul.w	r2, r0, r2
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	8afb      	ldrh	r3, [r7, #22]
 8001f50:	1c59      	adds	r1, r3, #1
 8001f52:	82f9      	strh	r1, [r7, #22]
 8001f54:	4619      	mov	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	440b      	add	r3, r1
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Input_DC_Preset[j] & 0xFF;
 8001f5e:	8a3a      	ldrh	r2, [r7, #16]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <PDM_Write_Config_Buffer+0x27c>)
 8001f64:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001f68:	fb00 f202 	mul.w	r2, r0, r2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	440b      	add	r3, r1
 8001f74:	889a      	ldrh	r2, [r3, #4]
 8001f76:	8afb      	ldrh	r3, [r7, #22]
 8001f78:	1c59      	adds	r1, r3, #1
 8001f7a:	82f9      	strh	r1, [r7, #22]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	440b      	add	r3, r1
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 4; j++)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d9a7      	bls.n	8001ee2 <PDM_Write_Config_Buffer+0x1ba>
		}

		for(uint8_t j = 0; j < 2; j++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	73bb      	strb	r3, [r7, #14]
 8001f96:	e0d1      	b.n	800213c <PDM_Write_Config_Buffer+0x414>
 8001f98:	20001050 	.word	0x20001050
 8001f9c:	2000104c 	.word	0x2000104c
 8001fa0:	20000ea4 	.word	0x20000ea4
 8001fa4:	20000534 	.word	0x20000534
		{
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] >> 8;
 8001fa8:	8a3a      	ldrh	r2, [r7, #16]
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	496c      	ldr	r1, [pc, #432]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 8001fae:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001fb2:	fb00 f202 	mul.w	r2, r0, r2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3308      	adds	r3, #8
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	440b      	add	r3, r1
 8001fbe:	889b      	ldrh	r3, [r3, #4]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	82f9      	strh	r1, [r7, #22]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	440b      	add	r3, r1
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Preset[j] & 0xFF;
 8001fd4:	8a3a      	ldrh	r2, [r7, #16]
 8001fd6:	7bbb      	ldrb	r3, [r7, #14]
 8001fd8:	4961      	ldr	r1, [pc, #388]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 8001fda:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001fde:	fb00 f202 	mul.w	r2, r0, r2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3308      	adds	r3, #8
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	440b      	add	r3, r1
 8001fea:	889a      	ldrh	r2, [r3, #4]
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	82f9      	strh	r1, [r7, #22]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Position[j];
 8001ffc:	8a39      	ldrh	r1, [r7, #16]
 8001ffe:	7bba      	ldrb	r2, [r7, #14]
 8002000:	8afb      	ldrh	r3, [r7, #22]
 8002002:	1c58      	adds	r0, r3, #1
 8002004:	82f8      	strh	r0, [r7, #22]
 8002006:	4618      	mov	r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4403      	add	r3, r0
 800200c:	4854      	ldr	r0, [pc, #336]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 800200e:	f44f 740c 	mov.w	r4, #560	; 0x230
 8002012:	fb04 f101 	mul.w	r1, r4, r1
 8002016:	4401      	add	r1, r0
 8002018:	440a      	add	r2, r1
 800201a:	3218      	adds	r2, #24
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 24;
 8002020:	8a3a      	ldrh	r2, [r7, #16]
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	494e      	ldr	r1, [pc, #312]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 8002026:	208c      	movs	r0, #140	; 0x8c
 8002028:	fb00 f202 	mul.w	r2, r0, r2
 800202c:	4413      	add	r3, r2
 800202e:	3306      	adds	r3, #6
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0e1a      	lsrs	r2, r3, #24
 8002038:	8afb      	ldrh	r3, [r7, #22]
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	82f9      	strh	r1, [r7, #22]
 800203e:	4619      	mov	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	440b      	add	r3, r1
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 16;
 8002048:	8a3a      	ldrh	r2, [r7, #16]
 800204a:	7bbb      	ldrb	r3, [r7, #14]
 800204c:	4944      	ldr	r1, [pc, #272]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 800204e:	208c      	movs	r0, #140	; 0x8c
 8002050:	fb00 f202 	mul.w	r2, r0, r2
 8002054:	4413      	add	r3, r2
 8002056:	3306      	adds	r3, #6
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	0c1a      	lsrs	r2, r3, #16
 8002060:	8afb      	ldrh	r3, [r7, #22]
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	82f9      	strh	r1, [r7, #22]
 8002066:	4619      	mov	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	440b      	add	r3, r1
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] >> 8;
 8002070:	8a3a      	ldrh	r2, [r7, #16]
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	493a      	ldr	r1, [pc, #232]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 8002076:	208c      	movs	r0, #140	; 0x8c
 8002078:	fb00 f202 	mul.w	r2, r0, r2
 800207c:	4413      	add	r3, r2
 800207e:	3306      	adds	r3, #6
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0a1a      	lsrs	r2, r3, #8
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	1c59      	adds	r1, r3, #1
 800208c:	82f9      	strh	r1, [r7, #22]
 800208e:	4619      	mov	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	440b      	add	r3, r1
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_CAN_ID[j] & 0xFF;
 8002098:	8a3a      	ldrh	r2, [r7, #16]
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	4930      	ldr	r1, [pc, #192]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 800209e:	208c      	movs	r0, #140	; 0x8c
 80020a0:	fb00 f202 	mul.w	r2, r0, r2
 80020a4:	4413      	add	r3, r2
 80020a6:	3306      	adds	r3, #6
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	1c59      	adds	r1, r3, #1
 80020b2:	82f9      	strh	r1, [r7, #22]
 80020b4:	4619      	mov	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	440b      	add	r3, r1
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Map_Lengths[j];
 80020be:	8a39      	ldrh	r1, [r7, #16]
 80020c0:	7bba      	ldrb	r2, [r7, #14]
 80020c2:	8afb      	ldrh	r3, [r7, #22]
 80020c4:	1c58      	adds	r0, r3, #1
 80020c6:	82f8      	strh	r0, [r7, #22]
 80020c8:	4618      	mov	r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4403      	add	r3, r0
 80020ce:	4824      	ldr	r0, [pc, #144]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 80020d0:	f44f 740c 	mov.w	r4, #560	; 0x230
 80020d4:	fb04 f101 	mul.w	r1, r4, r1
 80020d8:	4401      	add	r1, r0
 80020da:	440a      	add	r2, r1
 80020dc:	3224      	adds	r2, #36	; 0x24
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]

			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] >> 8;
 80020e2:	8a3a      	ldrh	r2, [r7, #16]
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	491e      	ldr	r1, [pc, #120]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 80020e8:	208c      	movs	r0, #140	; 0x8c
 80020ea:	fb00 f202 	mul.w	r2, r0, r2
 80020ee:	4413      	add	r3, r2
 80020f0:	330a      	adds	r3, #10
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020fa:	121b      	asrs	r3, r3, #8
 80020fc:	b21a      	sxth	r2, r3
 80020fe:	8afb      	ldrh	r3, [r7, #22]
 8002100:	1c59      	adds	r1, r3, #1
 8002102:	82f9      	strh	r1, [r7, #22]
 8002104:	4619      	mov	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	440b      	add	r3, r1
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]
			data_buffer[data_index++] = PWM_Pins[i].Command_Var_Lim[j][0] & 0xFF;
 800210e:	8a3a      	ldrh	r2, [r7, #16]
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	4913      	ldr	r1, [pc, #76]	; (8002160 <PDM_Write_Config_Buffer+0x438>)
 8002114:	208c      	movs	r0, #140	; 0x8c
 8002116:	fb00 f202 	mul.w	r2, r0, r2
 800211a:	4413      	add	r3, r2
 800211c:	330a      	adds	r3, #10
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002126:	8afb      	ldrh	r3, [r7, #22]
 8002128:	1c59      	adds	r1, r3, #1
 800212a:	82f9      	strh	r1, [r7, #22]
 800212c:	4619      	mov	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	440b      	add	r3, r1
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 2; j++)
 8002136:	7bbb      	ldrb	r3, [r7, #14]
 8002138:	3301      	adds	r3, #1
 800213a:	73bb      	strb	r3, [r7, #14]
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b01      	cmp	r3, #1
 8002140:	f67f af32 	bls.w	8001fa8 <PDM_Write_Config_Buffer+0x280>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002144:	8a3b      	ldrh	r3, [r7, #16]
 8002146:	3301      	adds	r3, #1
 8002148:	823b      	strh	r3, [r7, #16]
 800214a:	8a3b      	ldrh	r3, [r7, #16]
 800214c:	2b03      	cmp	r3, #3
 800214e:	f67f aeb6 	bls.w	8001ebe <PDM_Write_Config_Buffer+0x196>
		}
	}

	return;
 8002152:	e000      	b.n	8002156 <PDM_Write_Config_Buffer+0x42e>
		return;
 8002154:	bf00      	nop
}
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bc90      	pop	{r4, r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000534 	.word	0x20000534

08002164 <PDM_Write_Map_Buffer>:

//Use to load pwm 3D map into their respective variables
//uint8_t *data_buffer - buffer to send 3D map
//uint16_t Size - size of the buffer, must match the size of the config (EEPROM_MAP_BUFFER_SIZE)
static void PDM_Write_Map_Buffer(uint8_t *data_buffer, uint16_t Size)
{
 8002164:	b490      	push	{r4, r7}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
	if(Size != EEPROM_MAP_BUFFER_SIZE)
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002176:	d151      	bne.n	800221c <PDM_Write_Map_Buffer+0xb8>
		return;

	uint16_t data_index = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	81fb      	strh	r3, [r7, #14]

	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	81bb      	strh	r3, [r7, #12]
 8002180:	e048      	b.n	8002214 <PDM_Write_Map_Buffer+0xb0>
	{
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002182:	2300      	movs	r3, #0
 8002184:	72fb      	strb	r3, [r7, #11]
 8002186:	e03f      	b.n	8002208 <PDM_Write_Map_Buffer+0xa4>
		{
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 8002188:	2300      	movs	r3, #0
 800218a:	72bb      	strb	r3, [r7, #10]
 800218c:	e036      	b.n	80021fc <PDM_Write_Map_Buffer+0x98>
			{
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] >> 8;
 800218e:	89b8      	ldrh	r0, [r7, #12]
 8002190:	7afa      	ldrb	r2, [r7, #11]
 8002192:	7ab9      	ldrb	r1, [r7, #10]
 8002194:	4c24      	ldr	r4, [pc, #144]	; (8002228 <PDM_Write_Map_Buffer+0xc4>)
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80021a0:	fb02 f200 	mul.w	r2, r2, r0
 80021a4:	4413      	add	r3, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	3334      	adds	r3, #52	; 0x34
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4423      	add	r3, r4
 80021ae:	88db      	ldrh	r3, [r3, #6]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	81f9      	strh	r1, [r7, #14]
 80021ba:	4619      	mov	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	440b      	add	r3, r1
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]
				data_buffer[data_index++] = PWM_Pins[i].Duty_Cycle_Map[j][k] & 0xFF;
 80021c4:	89b8      	ldrh	r0, [r7, #12]
 80021c6:	7afa      	ldrb	r2, [r7, #11]
 80021c8:	7ab9      	ldrb	r1, [r7, #10]
 80021ca:	4c17      	ldr	r4, [pc, #92]	; (8002228 <PDM_Write_Map_Buffer+0xc4>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80021d6:	fb02 f200 	mul.w	r2, r2, r0
 80021da:	4413      	add	r3, r2
 80021dc:	440b      	add	r3, r1
 80021de:	3334      	adds	r3, #52	; 0x34
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4423      	add	r3, r4
 80021e4:	88da      	ldrh	r2, [r3, #6]
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	1c59      	adds	r1, r3, #1
 80021ea:	81f9      	strh	r1, [r7, #14]
 80021ec:	4619      	mov	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	440b      	add	r3, r1
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
			for(uint8_t k = 0; k < PWM_TABLE_MAX_SIZE; k++)
 80021f6:	7abb      	ldrb	r3, [r7, #10]
 80021f8:	3301      	adds	r3, #1
 80021fa:	72bb      	strb	r3, [r7, #10]
 80021fc:	7abb      	ldrb	r3, [r7, #10]
 80021fe:	2b0e      	cmp	r3, #14
 8002200:	d9c5      	bls.n	800218e <PDM_Write_Map_Buffer+0x2a>
		for(uint8_t j = 0; j < PWM_TABLE_MAX_SIZE; j++)
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	3301      	adds	r3, #1
 8002206:	72fb      	strb	r3, [r7, #11]
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	2b0e      	cmp	r3, #14
 800220c:	d9bc      	bls.n	8002188 <PDM_Write_Map_Buffer+0x24>
	for(uint16_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 800220e:	89bb      	ldrh	r3, [r7, #12]
 8002210:	3301      	adds	r3, #1
 8002212:	81bb      	strh	r3, [r7, #12]
 8002214:	89bb      	ldrh	r3, [r7, #12]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d9b3      	bls.n	8002182 <PDM_Write_Map_Buffer+0x1e>
			}
		}
	}

	return;
 800221a:	e000      	b.n	800221e <PDM_Write_Map_Buffer+0xba>
		return;
 800221c:	bf00      	nop
}
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bc90      	pop	{r4, r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000534 	.word	0x20000534

0800222c <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 8002232:	af00      	add	r7, sp, #0
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	6018      	str	r0, [r3, #0]
 8002238:	463b      	mov	r3, r7
 800223a:	6019      	str	r1, [r3, #0]
	uint8_t data_buffer0[EEPROM_BUFFER_SIZE];
	uint8_t data_buffer1[EEPROM_MAP_BUFFER_SIZE];

	AT24Cxx_Read(hi2c, 0x0000, data_buffer0, EEPROM_BUFFER_SIZE);
 800223c:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 8002240:	4638      	mov	r0, r7
 8002242:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002246:	2100      	movs	r1, #0
 8002248:	6800      	ldr	r0, [r0, #0]
 800224a:	f7fe f957 	bl	80004fc <AT24Cxx_Read>

	PDM_Load_Config_Buffer(data_buffer0, EEPROM_BUFFER_SIZE);
 800224e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8002252:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fa06 	bl	8001668 <PDM_Load_Config_Buffer>

	AT24Cxx_Read(hi2c, EEPROM_BUFFER_SIZE, data_buffer1, EEPROM_MAP_BUFFER_SIZE);
 800225c:	f107 0208 	add.w	r2, r7, #8
 8002260:	4638      	mov	r0, r7
 8002262:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002266:	f44f 7190 	mov.w	r1, #288	; 0x120
 800226a:	6800      	ldr	r0, [r0, #0]
 800226c:	f7fe f946 	bl	80004fc <AT24Cxx_Read>

	PDM_Load_Map_Buffer(data_buffer1, EEPROM_MAP_BUFFER_SIZE);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fcd9 	bl	8001c30 <PDM_Load_Map_Buffer>

	PDM_Hard_Code_Config();
 800227e:	f000 fa51 	bl	8002724 <PDM_Hard_Code_Config>

	__PDM_ID_BUFFER_INIT();
 8002282:	2300      	movs	r3, #0
 8002284:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
 8002288:	e00d      	b.n	80022a6 <PDM_Init+0x7a>
 800228a:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 800228e:	f8b7 24ae 	ldrh.w	r2, [r7, #1198]	; 0x4ae
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	b291      	uxth	r1, r2
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <PDM_Init+0xcc>)
 8002298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800229c:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 80022a0:	3301      	adds	r3, #1
 80022a2:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
 80022a6:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 80022aa:	2b1d      	cmp	r3, #29
 80022ac:	d9ed      	bls.n	800228a <PDM_Init+0x5e>

	for(uint8_t i = 0; i < 4; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
 80022b4:	e012      	b.n	80022dc <PDM_Init+0xb0>
	{
		PDM_PWM_Init(hcan, &PWM_Pins[i], i);
 80022b6:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 80022ba:	f44f 720c 	mov.w	r2, #560	; 0x230
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <PDM_Init+0xd0>)
 80022c4:	1899      	adds	r1, r3, r2
 80022c6:	f897 24ad 	ldrb.w	r2, [r7, #1197]	; 0x4ad
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	f001 f8c9 	bl	8003464 <PDM_PWM_Init>
	for(uint8_t i = 0; i < 4; i++)
 80022d2:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 80022d6:	3301      	adds	r3, #1
 80022d8:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
 80022dc:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d9e8      	bls.n	80022b6 <PDM_Init+0x8a>
	}

	PDM_Input_Process();
 80022e4:	f000 fab4 	bl	8002850 <PDM_Input_Process>

	PDM_Output_Process();
 80022e8:	f000 fbb2 	bl	8002a50 <PDM_Output_Process>

	return;
 80022ec:	bf00      	nop
}
 80022ee:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20001164 	.word	0x20001164
 80022fc:	20000534 	.word	0x20000534

08002300 <PDM_USB_Receive>:
//Will setup pwm 3D maps if Data[0] == 0xF0 and Data[1] == 0xF0
//uint8_t *Data - buffer received via USB port
//uint16_t Size - size of the buffer must be 6 bytes bigger than the information received (2 bytes of command and 4 bytes of CRC)
//Returns HAL_I2C_Mem_Write_DMA status
HAL_StatusTypeDef PDM_USB_Receive(uint8_t *Data, uint16_t Size)
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	466b      	mov	r3, sp
 800230e:	461d      	mov	r5, r3
	uint8_t data_buffer[Size];
 8002310:	887c      	ldrh	r4, [r7, #2]
 8002312:	4623      	mov	r3, r4
 8002314:	3b01      	subs	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	b2a0      	uxth	r0, r4
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	00cb      	lsls	r3, r1, #3
 8002328:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800232c:	00c2      	lsls	r2, r0, #3
 800232e:	b2a0      	uxth	r0, r4
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00cb      	lsls	r3, r1, #3
 800233e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002342:	00c2      	lsls	r2, r0, #3
 8002344:	4623      	mov	r3, r4
 8002346:	3307      	adds	r3, #7
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	ebad 0d03 	sub.w	sp, sp, r3
 8002350:	466b      	mov	r3, sp
 8002352:	3300      	adds	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
	uint16_t data_address = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	83fb      	strh	r3, [r7, #30]
	uint32_t crc[2];

	if((Data[0] == (USB_COMMAND_WRITE_CONFIG >> 8)) && (Data[1] == (USB_COMMAND_WRITE_CONFIG & 0xFF)))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	d114      	bne.n	800238c <PDM_USB_Receive+0x8c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3301      	adds	r3, #1
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d10f      	bne.n	800238c <PDM_USB_Receive+0x8c>
	{
		if((Size + 6) != EEPROM_BUFFER_SIZE)
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8002372:	d001      	beq.n	8002378 <PDM_USB_Receive+0x78>
			return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e08c      	b.n	8002492 <PDM_USB_Receive+0x192>

		data_address = 0x0000;
 8002378:	2300      	movs	r3, #0
 800237a:	83fb      	strh	r3, [r7, #30]

		PDM_Write_Config_Buffer(&data_buffer[2], EEPROM_BUFFER_SIZE);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3302      	adds	r3, #2
 8002380:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fccf 	bl	8001d28 <PDM_Write_Config_Buffer>
 800238a:	e02d      	b.n	80023e8 <PDM_USB_Receive+0xe8>
	}
	else if((Data[0] == (USB_COMMAND_WRITE_MAP >> 8)) && (Data[1] == (USB_COMMAND_WRITE_MAP & 0xFF)))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2bc0      	cmp	r3, #192	; 0xc0
 8002392:	d116      	bne.n	80023c2 <PDM_USB_Receive+0xc2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d111      	bne.n	80023c2 <PDM_USB_Receive+0xc2>
	{
		if((Size + 6) != EEPROM_MAP_BUFFER_SIZE)
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	f240 327e 	movw	r2, #894	; 0x37e
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d001      	beq.n	80023ac <PDM_USB_Receive+0xac>
			return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e072      	b.n	8002492 <PDM_USB_Receive+0x192>

		data_address = EEPROM_MAP_BUFFER_SIZE;
 80023ac:	f44f 7361 	mov.w	r3, #900	; 0x384
 80023b0:	83fb      	strh	r3, [r7, #30]

		PDM_Write_Map_Buffer(&data_buffer[2], EEPROM_MAP_BUFFER_SIZE);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3302      	adds	r3, #2
 80023b6:	f44f 7161 	mov.w	r1, #900	; 0x384
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fed2 	bl	8002164 <PDM_Write_Map_Buffer>
 80023c0:	e012      	b.n	80023e8 <PDM_USB_Receive+0xe8>
	}
	else if((Data[0] == (USB_COMMAND_WRITE_CONFIG >> 8)) && (Data[1] == (USB_COMMAND_WRITE_CONFIG & 0xFF)) && (Size == 2))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d10c      	bne.n	80023e4 <PDM_USB_Receive+0xe4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3301      	adds	r3, #1
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <PDM_USB_Receive+0xe4>
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d104      	bne.n	80023e4 <PDM_USB_Receive+0xe4>
	{
		USB_Connected_Flag = 1;
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <PDM_USB_Receive+0x19c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e056      	b.n	8002492 <PDM_USB_Receive+0x192>
	}
	else
		return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e054      	b.n	8002492 <PDM_USB_Receive+0x192>

	crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t*) data_buffer, (EEPROM_BUFFER_SIZE + 2) / (sizeof(uint32_t)));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2248      	movs	r2, #72	; 0x48
 80023ec:	4619      	mov	r1, r3
 80023ee:	482c      	ldr	r0, [pc, #176]	; (80024a0 <PDM_USB_Receive+0x1a0>)
 80023f0:	f003 fb3d 	bl	8005a6e <HAL_CRC_Calculate>
 80023f4:	4603      	mov	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]

	crc[1]  = Data[Size - 4] << 24;
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	3b04      	subs	r3, #4
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	613b      	str	r3, [r7, #16]
	crc[1] |= Data[Size - 3] << 16;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	887a      	ldrh	r2, [r7, #2]
 800240a:	3a03      	subs	r2, #3
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	440a      	add	r2, r1
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	0412      	lsls	r2, r2, #16
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
	crc[1] |= Data[Size - 2] << 8;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	3a02      	subs	r2, #2
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	440a      	add	r2, r1
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	0212      	lsls	r2, r2, #8
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
	crc[1] |= Data[Size - 1] & 0xFF;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	3a01      	subs	r2, #1
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	440a      	add	r2, r1
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]

	if(crc[0] != crc[1])
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <PDM_USB_Receive+0x146>
		return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e025      	b.n	8002492 <PDM_USB_Receive+0x192>

	if((Data[0] == (USB_COMMAND_WRITE_CONFIG >> 8)) && (Data[1] == (USB_COMMAND_WRITE_CONFIG & 0xFF)))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d10e      	bne.n	800246c <PDM_USB_Receive+0x16c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3301      	adds	r3, #1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d109      	bne.n	800246c <PDM_USB_Receive+0x16c>
		PDM_Load_Config_Buffer(&Data[2], Size - 4);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	3b04      	subs	r3, #4
 8002460:	b29b      	uxth	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f7ff f8ff 	bl	8001668 <PDM_Load_Config_Buffer>
 800246a:	e008      	b.n	800247e <PDM_USB_Receive+0x17e>
	else
		PDM_Load_Map_Buffer(&Data[2], Size - 4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1c9a      	adds	r2, r3, #2
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	3b04      	subs	r3, #4
 8002474:	b29b      	uxth	r3, r3
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f7ff fbd9 	bl	8001c30 <PDM_Load_Map_Buffer>

	return AT24Cxx_Write_DMA(&hi2c1, data_address, &Data[2], Size - 4);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	3b04      	subs	r3, #4
 8002486:	b29b      	uxth	r3, r3
 8002488:	8bf9      	ldrh	r1, [r7, #30]
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <PDM_USB_Receive+0x1a4>)
 800248c:	f7fe f85b 	bl	8000546 <AT24Cxx_Write_DMA>
 8002490:	4603      	mov	r3, r0
 8002492:	46ad      	mov	sp, r5
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bdb0      	pop	{r4, r5, r7, pc}
 800249c:	20000fb4 	.word	0x20000fb4
 80024a0:	20000524 	.word	0x20000524
 80024a4:	200004d0 	.word	0x200004d0

080024a8 <PDM_USB_Transmit_Config>:

//Sends pins, current limits, basic pwm controls and pwm 3D maps via USB port
//uint8_t *command - request for loaded config ()
//uint16_t Size - check if the command only has 2 bytes
void PDM_USB_Transmit_Config(uint8_t *command, uint16_t Size)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	6018      	str	r0, [r3, #0]
 80024b4:	460a      	mov	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
	if((Size != 2) && (command[0] != (USB_COMMAND_READ_CONFIG >> 8)) && (command[1] != (USB_COMMAND_READ_CONFIG & 0xFF)))
 80024ba:	1cbb      	adds	r3, r7, #2
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d00b      	beq.n	80024da <PDM_USB_Transmit_Config+0x32>
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d006      	beq.n	80024da <PDM_USB_Transmit_Config+0x32>
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	f040 80a6 	bne.w	8002626 <PDM_USB_Transmit_Config+0x17e>
		return;

	uint8_t data_buffer0[EEPROM_BUFFER_SIZE + 6];
	uint8_t data_buffer1[EEPROM_MAP_BUFFER_SIZE + 6];
	uint32_t crc = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc

	PDM_Load_Config_Buffer(&data_buffer0[2], EEPROM_BUFFER_SIZE);
 80024e0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80024e4:	3302      	adds	r3, #2
 80024e6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f8bc 	bl	8001668 <PDM_Load_Config_Buffer>

	data_buffer0[0] = USB_COMMAND_WRITE_CONFIG >> 8;
 80024f0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80024f4:	2240      	movs	r2, #64	; 0x40
 80024f6:	701a      	strb	r2, [r3, #0]
	data_buffer0[1] = USB_COMMAND_WRITE_CONFIG & 0xFF;
 80024f8:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80024fc:	2202      	movs	r2, #2
 80024fe:	705a      	strb	r2, [r3, #1]

	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) data_buffer0, (EEPROM_BUFFER_SIZE + 2) / (sizeof(uint32_t)));
 8002500:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002504:	2248      	movs	r2, #72	; 0x48
 8002506:	4619      	mov	r1, r3
 8002508:	4849      	ldr	r0, [pc, #292]	; (8002630 <PDM_USB_Transmit_Config+0x188>)
 800250a:	f003 fab0 	bl	8005a6e <HAL_CRC_Calculate>
 800250e:	f8c7 04bc 	str.w	r0, [r7, #1212]	; 0x4bc

	data_buffer0[EEPROM_BUFFER_SIZE + 2]  = crc >> 24;
 8002512:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8002516:	0e1b      	lsrs	r3, r3, #24
 8002518:	b2da      	uxtb	r2, r3
 800251a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800251e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
	data_buffer0[EEPROM_BUFFER_SIZE + 3] |= crc >> 16;
 8002522:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002526:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 800252a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b2da      	uxtb	r2, r3
 8002536:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800253a:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
	data_buffer0[EEPROM_BUFFER_SIZE + 4] |= crc >> 8;
 800253e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002542:	f893 2124 	ldrb.w	r2, [r3, #292]	; 0x124
 8002546:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
 8002552:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002556:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	data_buffer0[EEPROM_BUFFER_SIZE + 5] |= crc & 0xFF;
 800255a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800255e:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 8002562:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b2da      	uxtb	r2, r3
 800256c:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002570:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

	CDC_Transmit_FS(data_buffer0, EEPROM_BUFFER_SIZE + 6);
 8002574:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002578:	f44f 7193 	mov.w	r1, #294	; 0x126
 800257c:	4618      	mov	r0, r3
 800257e:	f00d f987 	bl	800f890 <CDC_Transmit_FS>

	PDM_Load_Map_Buffer(&data_buffer1[2], EEPROM_MAP_BUFFER_SIZE);
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	3302      	adds	r3, #2
 8002588:	f44f 7161 	mov.w	r1, #900	; 0x384
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb4f 	bl	8001c30 <PDM_Load_Map_Buffer>

	data_buffer1[0] = USB_COMMAND_WRITE_MAP >> 8;
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	22c0      	movs	r2, #192	; 0xc0
 8002598:	701a      	strb	r2, [r3, #0]
	data_buffer1[1] = USB_COMMAND_WRITE_MAP & 0xFF;
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2203      	movs	r2, #3
 80025a0:	705a      	strb	r2, [r3, #1]

	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) data_buffer1, (EEPROM_MAP_BUFFER_SIZE + 2) / (sizeof(uint32_t)));
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	22e1      	movs	r2, #225	; 0xe1
 80025a8:	4619      	mov	r1, r3
 80025aa:	4821      	ldr	r0, [pc, #132]	; (8002630 <PDM_USB_Transmit_Config+0x188>)
 80025ac:	f003 fa5f 	bl	8005a6e <HAL_CRC_Calculate>
 80025b0:	f8c7 04bc 	str.w	r0, [r7, #1212]	; 0x4bc

	data_buffer0[EEPROM_BUFFER_SIZE + 2]  = crc >> 24;
 80025b4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80025b8:	0e1b      	lsrs	r3, r3, #24
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80025c0:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
	data_buffer0[EEPROM_BUFFER_SIZE + 3] |= crc >> 16;
 80025c4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80025c8:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 80025cc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80025dc:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
	data_buffer0[EEPROM_BUFFER_SIZE + 4] |= crc >> 8;
 80025e0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80025e4:	f893 2124 	ldrb.w	r2, [r3, #292]	; 0x124
 80025e8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80025f8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	data_buffer0[EEPROM_BUFFER_SIZE + 5] |= crc & 0xFF;
 80025fc:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002600:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 8002604:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b2da      	uxtb	r2, r3
 800260e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002612:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

	CDC_Transmit_FS(data_buffer1, EEPROM_MAP_BUFFER_SIZE + 6);
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	f240 318a 	movw	r1, #906	; 0x38a
 800261e:	4618      	mov	r0, r3
 8002620:	f00d f936 	bl	800f890 <CDC_Transmit_FS>

	return;
 8002624:	e000      	b.n	8002628 <PDM_USB_Transmit_Config+0x180>
		return;
 8002626:	bf00      	nop
}
 8002628:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000524 	.word	0x20000524

08002634 <PDM_USB_Transmit_Data>:

void PDM_USB_Transmit_Data()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b094      	sub	sp, #80	; 0x50
 8002638:	af00      	add	r7, sp, #0
	uint8_t data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 6];
	uint32_t crc = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48

	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002644:	e031      	b.n	80026aa <PDM_USB_Transmit_Data+0x76>
	{
		data_buffer[(i * 2) + 2]  = Data_Buffer[i] >> 8;
 8002646:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800264a:	4a34      	ldr	r2, [pc, #208]	; (800271c <PDM_USB_Transmit_Data+0xe8>)
 800264c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	b29a      	uxth	r2, r3
 8002654:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002662:	440b      	add	r3, r1
 8002664:	f803 2c4c 	strb.w	r2, [r3, #-76]
		data_buffer[(i * 2) + 3] |= Data_Buffer[i] & 0xFF;
 8002668:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	3303      	adds	r3, #3
 8002670:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002674:	4413      	add	r3, r2
 8002676:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800267a:	b25a      	sxtb	r2, r3
 800267c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002680:	4926      	ldr	r1, [pc, #152]	; (800271c <PDM_USB_Transmit_Data+0xe8>)
 8002682:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b25a      	sxtb	r2, r3
 800268c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	3303      	adds	r3, #3
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800269a:	440b      	add	r3, r1
 800269c:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for(uint8_t i = 0; i < NBR_OF_DATA_CHANNELS; i++)
 80026a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026a4:	3301      	adds	r3, #1
 80026a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80026aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026ae:	2b1d      	cmp	r3, #29
 80026b0:	d9c9      	bls.n	8002646 <PDM_USB_Transmit_Data+0x12>
	}

	data_buffer[0] = USB_COMMAND_READ_DATA >> 8;
 80026b2:	2320      	movs	r3, #32
 80026b4:	713b      	strb	r3, [r7, #4]
	data_buffer[1] = USB_COMMAND_READ_DATA & 0xFF;
 80026b6:	2304      	movs	r3, #4
 80026b8:	717b      	strb	r3, [r7, #5]

	crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) data_buffer, (NBR_OF_DATA_CHANNELS + 2) / sizeof(uint32_t));
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2208      	movs	r2, #8
 80026be:	4619      	mov	r1, r3
 80026c0:	4817      	ldr	r0, [pc, #92]	; (8002720 <PDM_USB_Transmit_Data+0xec>)
 80026c2:	f003 f9d4 	bl	8005a6e <HAL_CRC_Calculate>
 80026c6:	64b8      	str	r0, [r7, #72]	; 0x48

	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 2]  = crc >> 24;
 80026c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ca:	0e1b      	lsrs	r3, r3, #24
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 3] |= crc >> 16;
 80026d2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80026d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4313      	orrs	r3, r2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 4] |= crc >> 8;
 80026e4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80026e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data_buffer[(NBR_OF_DATA_CHANNELS * 2) + 5] |= crc & 0xFF;
 80026f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4313      	orrs	r3, r2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	CDC_Transmit_FS(data_buffer, EEPROM_MAP_BUFFER_SIZE + 6);
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	f240 318a 	movw	r1, #906	; 0x38a
 800270c:	4618      	mov	r0, r3
 800270e:	f00d f8bf 	bl	800f890 <CDC_Transmit_FS>

	return;
 8002712:	bf00      	nop
}
 8002714:	3750      	adds	r7, #80	; 0x50
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20001230 	.word	0x20001230
 8002720:	20000524 	.word	0x20000524

08002724 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config(){}
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <PDM_Output_Set>:

//Sets output pin levels
//uint8_t output_pin - number of output
//uint8_t output_level - level of output
static void PDM_Output_Set(uint8_t output_pin, uint8_t output_level)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	460a      	mov	r2, r1
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	71bb      	strb	r3, [r7, #6]
	switch(output_pin)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	3b04      	subs	r3, #4
 8002748:	2b0b      	cmp	r3, #11
 800274a:	d878      	bhi.n	800283e <PDM_Output_Set+0x10a>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <PDM_Output_Set+0x20>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002785 	.word	0x08002785
 8002758:	08002795 	.word	0x08002795
 800275c:	080027a5 	.word	0x080027a5
 8002760:	080027b5 	.word	0x080027b5
 8002764:	080027c5 	.word	0x080027c5
 8002768:	080027d5 	.word	0x080027d5
 800276c:	080027e5 	.word	0x080027e5
 8002770:	080027f5 	.word	0x080027f5
 8002774:	08002805 	.word	0x08002805
 8002778:	08002813 	.word	0x08002813
 800277c:	08002821 	.word	0x08002821
 8002780:	0800282f 	.word	0x0800282f
	{
	case 4:
		HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_level);
 8002784:	79bb      	ldrb	r3, [r7, #6]
 8002786:	461a      	mov	r2, r3
 8002788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800278c:	482e      	ldr	r0, [pc, #184]	; (8002848 <PDM_Output_Set+0x114>)
 800278e:	f003 fef9 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 8002792:	e053      	b.n	800283c <PDM_Output_Set+0x108>

	case 5:
		HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_level);
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	461a      	mov	r2, r3
 8002798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800279c:	482a      	ldr	r0, [pc, #168]	; (8002848 <PDM_Output_Set+0x114>)
 800279e:	f003 fef1 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80027a2:	e04b      	b.n	800283c <PDM_Output_Set+0x108>

	case 6:
		HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_level);
 80027a4:	79bb      	ldrb	r3, [r7, #6]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027ac:	4826      	ldr	r0, [pc, #152]	; (8002848 <PDM_Output_Set+0x114>)
 80027ae:	f003 fee9 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80027b2:	e043      	b.n	800283c <PDM_Output_Set+0x108>

	case 7:
		HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_level);
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027bc:	4822      	ldr	r0, [pc, #136]	; (8002848 <PDM_Output_Set+0x114>)
 80027be:	f003 fee1 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80027c2:	e03b      	b.n	800283c <PDM_Output_Set+0x108>

#ifndef LQFP64
	case 8:
		HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_level);
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027cc:	481e      	ldr	r0, [pc, #120]	; (8002848 <PDM_Output_Set+0x114>)
 80027ce:	f003 fed9 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80027d2:	e033      	b.n	800283c <PDM_Output_Set+0x108>

	case 9:
		HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_level);
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027dc:	481a      	ldr	r0, [pc, #104]	; (8002848 <PDM_Output_Set+0x114>)
 80027de:	f003 fed1 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80027e2:	e02b      	b.n	800283c <PDM_Output_Set+0x108>

	case 10:
		HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_level);
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ec:	4816      	ldr	r0, [pc, #88]	; (8002848 <PDM_Output_Set+0x114>)
 80027ee:	f003 fec9 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80027f2:	e023      	b.n	800283c <PDM_Output_Set+0x108>

	case 11:
		HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_level);
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027fc:	4812      	ldr	r0, [pc, #72]	; (8002848 <PDM_Output_Set+0x114>)
 80027fe:	f003 fec1 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 8002802:	e01b      	b.n	800283c <PDM_Output_Set+0x108>

	case 12:
		HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_level);
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	461a      	mov	r2, r3
 8002808:	2108      	movs	r1, #8
 800280a:	4810      	ldr	r0, [pc, #64]	; (800284c <PDM_Output_Set+0x118>)
 800280c:	f003 feba 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 8002810:	e014      	b.n	800283c <PDM_Output_Set+0x108>

	case 13:
		HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_level);
 8002812:	79bb      	ldrb	r3, [r7, #6]
 8002814:	461a      	mov	r2, r3
 8002816:	2104      	movs	r1, #4
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <PDM_Output_Set+0x118>)
 800281a:	f003 feb3 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 800281e:	e00d      	b.n	800283c <PDM_Output_Set+0x108>

	case 14:
		HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_level);
 8002820:	79bb      	ldrb	r3, [r7, #6]
 8002822:	461a      	mov	r2, r3
 8002824:	2120      	movs	r1, #32
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <PDM_Output_Set+0x118>)
 8002828:	f003 feac 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 800282c:	e006      	b.n	800283c <PDM_Output_Set+0x108>

	case 15:
		HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_level);
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	461a      	mov	r2, r3
 8002832:	2110      	movs	r1, #16
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <PDM_Output_Set+0x118>)
 8002836:	f003 fea5 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 800283a:	bf00      	nop
#endif
	}

	return;
 800283c:	bf00      	nop
 800283e:	bf00      	nop
}
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40020c00 	.word	0x40020c00
 800284c:	40021800 	.word	0x40021800

08002850 <PDM_Input_Process>:

//Process input pin levels
void PDM_Input_Process()
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	Input_Pin_Levels = 0x0000;
 8002854:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002856:	2200      	movs	r2, #0
 8002858:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels  = HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 800285a:	2101      	movs	r1, #1
 800285c:	4879      	ldr	r0, [pc, #484]	; (8002a44 <PDM_Input_Process+0x1f4>)
 800285e:	f003 fe79 	bl	8006554 <HAL_GPIO_ReadPin>
 8002862:	4603      	mov	r3, r0
 8002864:	b29a      	uxth	r2, r3
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002868:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 800286a:	2102      	movs	r1, #2
 800286c:	4875      	ldr	r0, [pc, #468]	; (8002a44 <PDM_Input_Process+0x1f4>)
 800286e:	f003 fe71 	bl	8006554 <HAL_GPIO_ReadPin>
 8002872:	4603      	mov	r3, r0
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b21b      	sxth	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b21b      	sxth	r3, r3
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002886:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8002888:	2104      	movs	r1, #4
 800288a:	486e      	ldr	r0, [pc, #440]	; (8002a44 <PDM_Input_Process+0x1f4>)
 800288c:	f003 fe62 	bl	8006554 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	b21a      	sxth	r2, r3
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b21b      	sxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b21b      	sxth	r3, r3
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028a4:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 80028a6:	2108      	movs	r1, #8
 80028a8:	4866      	ldr	r0, [pc, #408]	; (8002a44 <PDM_Input_Process+0x1f4>)
 80028aa:	f003 fe53 	bl	8006554 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b21b      	sxth	r3, r3
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028c2:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 80028c4:	2110      	movs	r1, #16
 80028c6:	4860      	ldr	r0, [pc, #384]	; (8002a48 <PDM_Input_Process+0x1f8>)
 80028c8:	f003 fe44 	bl	8006554 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b21b      	sxth	r3, r3
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028e0:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 80028e2:	2120      	movs	r1, #32
 80028e4:	4858      	ldr	r0, [pc, #352]	; (8002a48 <PDM_Input_Process+0x1f8>)
 80028e6:	f003 fe35 	bl	8006554 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	015b      	lsls	r3, r3, #5
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80028fe:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	4852      	ldr	r0, [pc, #328]	; (8002a4c <PDM_Input_Process+0x1fc>)
 8002904:	f003 fe26 	bl	8006554 <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	019b      	lsls	r3, r3, #6
 800290c:	b21a      	sxth	r2, r3
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b21b      	sxth	r3, r3
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800291c:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	484a      	ldr	r0, [pc, #296]	; (8002a4c <PDM_Input_Process+0x1fc>)
 8002922:	f003 fe17 	bl	8006554 <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	01db      	lsls	r3, r3, #7
 800292a:	b21a      	sxth	r2, r3
 800292c:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b21b      	sxth	r3, r3
 8002932:	4313      	orrs	r3, r2
 8002934:	b21b      	sxth	r3, r3
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800293a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 800293c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002940:	4842      	ldr	r0, [pc, #264]	; (8002a4c <PDM_Input_Process+0x1fc>)
 8002942:	f003 fe07 	bl	8006554 <HAL_GPIO_ReadPin>
 8002946:	4603      	mov	r3, r0
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b21b      	sxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b21b      	sxth	r3, r3
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800295a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 800295c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002960:	483a      	ldr	r0, [pc, #232]	; (8002a4c <PDM_Input_Process+0x1fc>)
 8002962:	f003 fdf7 	bl	8006554 <HAL_GPIO_ReadPin>
 8002966:	4603      	mov	r3, r0
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	b21a      	sxth	r2, r3
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b21b      	sxth	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b21b      	sxth	r3, r3
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800297a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 800297c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002980:	4832      	ldr	r0, [pc, #200]	; (8002a4c <PDM_Input_Process+0x1fc>)
 8002982:	f003 fde7 	bl	8006554 <HAL_GPIO_ReadPin>
 8002986:	4603      	mov	r3, r0
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b21b      	sxth	r3, r3
 8002992:	4313      	orrs	r3, r2
 8002994:	b21b      	sxth	r3, r3
 8002996:	b29a      	uxth	r2, r3
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <PDM_Input_Process+0x1f0>)
 800299a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 800299c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a0:	482a      	ldr	r0, [pc, #168]	; (8002a4c <PDM_Input_Process+0x1fc>)
 80029a2:	f003 fdd7 	bl	8006554 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	02db      	lsls	r3, r3, #11
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80029ba:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 80029bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c0:	4821      	ldr	r0, [pc, #132]	; (8002a48 <PDM_Input_Process+0x1f8>)
 80029c2:	f003 fdc7 	bl	8006554 <HAL_GPIO_ReadPin>
 80029c6:	4603      	mov	r3, r0
 80029c8:	031b      	lsls	r3, r3, #12
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80029da:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 80029dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029e0:	4819      	ldr	r0, [pc, #100]	; (8002a48 <PDM_Input_Process+0x1f8>)
 80029e2:	f003 fdb7 	bl	8006554 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	035b      	lsls	r3, r3, #13
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <PDM_Input_Process+0x1f0>)
 80029fa:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 80029fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a00:	4811      	ldr	r0, [pc, #68]	; (8002a48 <PDM_Input_Process+0x1f8>)
 8002a02:	f003 fda7 	bl	8006554 <HAL_GPIO_ReadPin>
 8002a06:	4603      	mov	r3, r0
 8002a08:	039b      	lsls	r3, r3, #14
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002a1a:	801a      	strh	r2, [r3, #0]

	Input_Pin_Levels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8002a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <PDM_Input_Process+0x1f8>)
 8002a22:	f003 fd97 	bl	8006554 <HAL_GPIO_ReadPin>
 8002a26:	4603      	mov	r3, r0
 8002a28:	03db      	lsls	r3, r3, #15
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <PDM_Input_Process+0x1f0>)
 8002a3a:	801a      	strh	r2, [r3, #0]

	return;
 8002a3c:	bf00      	nop
}
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200012bc 	.word	0x200012bc
 8002a44:	40021400 	.word	0x40021400
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800

08002a50 <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
#ifndef LQFP64
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002a56:	2304      	movs	r3, #4
 8002a58:	71fb      	strb	r3, [r7, #7]
 8002a5a:	e046      	b.n	8002aea <PDM_Output_Process+0x9a>
#else
	for(uint8_t i = 4; i < (NBR_OF_OUTPUTS - 8); i++)
#endif
	{
		if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[i].Enabled_Inputs[0], Output_Pin[i].Input_Levels[0],
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	4934      	ldr	r1, [pc, #208]	; (8002b30 <PDM_Output_Process+0xe0>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <PDM_Output_Process+0xe4>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b299      	uxth	r1, r3
 8002a74:	79fa      	ldrb	r2, [r7, #7]
 8002a76:	482e      	ldr	r0, [pc, #184]	; (8002b30 <PDM_Output_Process+0xe0>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4403      	add	r3, r0
 8002a82:	3304      	adds	r3, #4
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	4299      	cmp	r1, r3
 8002a88:	d017      	beq.n	8002aba <PDM_Output_Process+0x6a>
 8002a8a:	79fa      	ldrb	r2, [r7, #7]
 8002a8c:	4928      	ldr	r1, [pc, #160]	; (8002b30 <PDM_Output_Process+0xe0>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3302      	adds	r3, #2
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <PDM_Output_Process+0xe4>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b299      	uxth	r1, r3
 8002aa4:	79fa      	ldrb	r2, [r7, #7]
 8002aa6:	4822      	ldr	r0, [pc, #136]	; (8002b30 <PDM_Output_Process+0xe0>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4403      	add	r3, r0
 8002ab2:	3306      	adds	r3, #6
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	4299      	cmp	r1, r3
 8002ab8:	d10f      	bne.n	8002ada <PDM_Output_Process+0x8a>
										 Output_Pin[i].Enabled_Inputs[1], Output_Pin[i].Input_Levels[1]))
										 && (((Driver_Safety_Flag >> i) & 0x01) == 1))
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <PDM_Output_Process+0xe8>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	fa42 f303 	asr.w	r3, r2, r3
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <PDM_Output_Process+0x8a>
		{
			PDM_Output_Set(i, GPIO_PIN_SET);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fe2e 	bl	8002734 <PDM_Output_Set>
 8002ad8:	e004      	b.n	8002ae4 <PDM_Output_Process+0x94>
		}else{
			PDM_Output_Set(i, GPIO_PIN_RESET);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe28 	bl	8002734 <PDM_Output_Set>
	for(uint8_t i = 4; i < NBR_OF_OUTPUTS; i++)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	71fb      	strb	r3, [r7, #7]
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d9b5      	bls.n	8002a5c <PDM_Output_Process+0xc>

#ifdef LQFP64
	PDM_Output_Expander_Set(&hi2c1);
#endif

	PWM_Pin_Status &= 0xF0;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <PDM_Output_Process+0xec>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	f023 030f 	bic.w	r3, r3, #15
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <PDM_Output_Process+0xec>)
 8002afc:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	71bb      	strb	r3, [r7, #6]
 8002b02:	e00e      	b.n	8002b22 <PDM_Output_Process+0xd2>
	{
		PDM_PWM_Output_Process(&PWM_Pins[i], i);
 8002b04:	79bb      	ldrb	r3, [r7, #6]
 8002b06:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <PDM_Output_Process+0xf0>)
 8002b10:	4413      	add	r3, r2
 8002b12:	79ba      	ldrb	r2, [r7, #6]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd70 	bl	80035fc <PDM_PWM_Output_Process>
	for(uint8_t i = 0; i < NBR_OF_PWM_OUTPUTS; i++)
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	71bb      	strb	r3, [r7, #6]
 8002b22:	79bb      	ldrb	r3, [r7, #6]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d9ed      	bls.n	8002b04 <PDM_Output_Process+0xb4>
	}

	return;
 8002b28:	bf00      	nop
}
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20001050 	.word	0x20001050
 8002b34:	200012bc 	.word	0x200012bc
 8002b38:	20000530 	.word	0x20000530
 8002b3c:	20000ea4 	.word	0x20000ea4
 8002b40:	20000534 	.word	0x20000534

08002b44 <PDM_Output_Fuse>:

//Checks output currents and compares with thresholds and timeouts, if over both, processes outputs
void PDM_Output_Fuse()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
	uint8_t fuse_flag = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	71bb      	strb	r3, [r7, #6]
 8002b52:	e059      	b.n	8002c08 <PDM_Output_Fuse+0xc4>
	{
		if(Data_Buffer[i] > Output_Pin[i].Current_Thresholds)
 8002b54:	79bb      	ldrb	r3, [r7, #6]
 8002b56:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <PDM_Output_Fuse+0xe8>)
 8002b58:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002b5c:	79ba      	ldrb	r2, [r7, #6]
 8002b5e:	4834      	ldr	r0, [pc, #208]	; (8002c30 <PDM_Output_Fuse+0xec>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4403      	add	r3, r0
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	d933      	bls.n	8002bda <PDM_Output_Fuse+0x96>
		{
			Accumulator_Output_Fuse[i] += Accumulator_Output_Check;
 8002b72:	79bb      	ldrb	r3, [r7, #6]
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <PDM_Output_Fuse+0xf0>)
 8002b76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <PDM_Output_Fuse+0xf4>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	79bb      	ldrb	r3, [r7, #6]
 8002b80:	440a      	add	r2, r1
 8002b82:	492c      	ldr	r1, [pc, #176]	; (8002c34 <PDM_Output_Fuse+0xf0>)
 8002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(Accumulator_Output_Fuse[i] >= (Output_Pin[i].Timeout_Output_Fuse * 10))
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <PDM_Output_Fuse+0xf0>)
 8002b8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b90:	79ba      	ldrb	r2, [r7, #6]
 8002b92:	4827      	ldr	r0, [pc, #156]	; (8002c30 <PDM_Output_Fuse+0xec>)
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4403      	add	r3, r0
 8002b9e:	330a      	adds	r3, #10
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4299      	cmp	r1, r3
 8002bae:	d328      	bcc.n	8002c02 <PDM_Output_Fuse+0xbe>
			{
				Driver_Safety_Flag |= (1 << i);
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <PDM_Output_Fuse+0xf8>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <PDM_Output_Fuse+0xf8>)
 8002bc8:	801a      	strh	r2, [r3, #0]
				Accumulator_Output_Fuse[i] = 0;
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <PDM_Output_Fuse+0xf0>)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				fuse_flag = 1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	71fb      	strb	r3, [r7, #7]
 8002bd8:	e013      	b.n	8002c02 <PDM_Output_Fuse+0xbe>
			}

		}else{
			Driver_Overcurrent_Flag &= ~(1 << i);
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <PDM_Output_Fuse+0xfc>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <PDM_Output_Fuse+0xfc>)
 8002bf6:	801a      	strh	r2, [r3, #0]
			Accumulator_Output_Fuse[i] = 0;
 8002bf8:	79bb      	ldrb	r3, [r7, #6]
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <PDM_Output_Fuse+0xf0>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002c02:	79bb      	ldrb	r3, [r7, #6]
 8002c04:	3301      	adds	r3, #1
 8002c06:	71bb      	strb	r3, [r7, #6]
 8002c08:	79bb      	ldrb	r3, [r7, #6]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	d9a2      	bls.n	8002b54 <PDM_Output_Fuse+0x10>
		}
	}

	Accumulator_Output_Check -= OUTPUT_FUSE_FREQ;
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <PDM_Output_Fuse+0xf4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b19      	subs	r3, #25
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <PDM_Output_Fuse+0xf4>)
 8002c16:	6013      	str	r3, [r2, #0]

	if(fuse_flag == 1)
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <PDM_Output_Fuse+0xe0>
		PDM_Output_Process();
 8002c1e:	f7ff ff17 	bl	8002a50 <PDM_Output_Process>

	return;
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
}
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20001230 	.word	0x20001230
 8002c30:	20001050 	.word	0x20001050
 8002c34:	20000eec 	.word	0x20000eec
 8002c38:	2000052c 	.word	0x2000052c
 8002c3c:	20000530 	.word	0x20000530
 8002c40:	20000424 	.word	0x20000424

08002c44 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "pdm.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Message, CAN_Rx_Data) == HAL_OK)
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002c50:	2100      	movs	r1, #0
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f002 fa9c 	bl	8005190 <HAL_CAN_GetRxMessage>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002c5e:	f7fe fc3b 	bl	80014d8 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002c66:	f003 fca6 	bl	80065b6 <HAL_GPIO_TogglePin>
	}

	return;
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
}
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20001110 	.word	0x20001110
 8002c78:	20000ed0 	.word	0x20000ed0
 8002c7c:	40021800 	.word	0x40021800

08002c80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 8002c8a:	f7ff fde1 	bl	8002850 <PDM_Input_Process>

	PDM_Output_Process();
 8002c8e:	f7ff fedf 	bl	8002a50 <PDM_Output_Process>

	return;
 8002c92:	bf00      	nop
}
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return;
 8002ca2:	bf00      	nop
}
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d109      	bne.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if(Accumulator_Delay > 0)
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d032      	beq.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0x80>
			Accumulator_Delay--;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002cd2:	6013      	str	r3, [r2, #0]

		if(USB_Connected_Flag == 1)
			Accumulator_USB_Data++;
	}

	return;
 8002cd4:	e02c      	b.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0x80>
	else if(htim->Instance == TIM6)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d127      	bne.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0x80>
		Accumulator_Output_Check++;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ce8:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_10Hz++;
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cf2:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_25Hz++;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cfc:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_50Hz++;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d06:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_80Hz++,
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d10:	6013      	str	r3, [r2, #0]
		Accumulator_Msg_100Hz++;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d1a:	6013      	str	r3, [r2, #0]
		if(USB_Connected_Flag == 1)
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0x80>
			Accumulator_USB_Data++;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d2c:	6013      	str	r3, [r2, #0]
	return;
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
}
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40001400 	.word	0x40001400
 8002d40:	200011a0 	.word	0x200011a0
 8002d44:	40001000 	.word	0x40001000
 8002d48:	2000052c 	.word	0x2000052c
 8002d4c:	20001118 	.word	0x20001118
 8002d50:	20000e40 	.word	0x20000e40
 8002d54:	20000f2c 	.word	0x20000f2c
 8002d58:	20001000 	.word	0x20001000
 8002d5c:	20000f50 	.word	0x20000f50
 8002d60:	20000fb4 	.word	0x20000fb4
 8002d64:	2000122c 	.word	0x2000122c

08002d68 <PDM_PWM_Duty_Cycle_Set>:
//	return __PDM_LINEAR_INTERPOLATION(y, y0, y1, z[0], z[1]);
//}

//Sets PWM output duty cycle using its command variables
static void PDM_PWM_Duty_Cycle_Set(PWM_Control_Struct* pwm_struct)
{
 8002d68:	b4b0      	push	{r4, r5, r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	dc0d      	bgt.n	8002d9c <PDM_PWM_Duty_Cycle_Set+0x34>
		&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dc05      	bgt.n	8002d9c <PDM_PWM_Duty_Cycle_Set+0x34>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][0];
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	805a      	strh	r2, [r3, #2]
		return;
 8002d9a:	e35f      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002da8:	429a      	cmp	r2, r3
 8002daa:	db12      	blt.n	8002dd2 <PDM_PWM_Duty_Cycle_Set+0x6a>
			 && (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0]))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dc0a      	bgt.n	8002dd2 <PDM_PWM_Duty_Cycle_Set+0x6a>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[0][pwm_struct->Map_Lengths[0]];
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	3334      	adds	r3, #52	; 0x34
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	88da      	ldrh	r2, [r3, #6]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	805a      	strh	r2, [r3, #2]
		return;
 8002dd0:	e344      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}
	else if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002dde:	429a      	cmp	r2, r3
 8002de0:	dc16      	bgt.n	8002e10 <PDM_PWM_Duty_Cycle_Set+0xa8>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002dee:	429a      	cmp	r2, r3
 8002df0:	db0e      	blt.n	8002e10 <PDM_PWM_Duty_Cycle_Set+0xa8>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][0];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002df8:	4619      	mov	r1, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a5b      	subs	r3, r3, r1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	336e      	adds	r3, #110	; 0x6e
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	805a      	strh	r2, [r3, #2]
		return;
 8002e0e:	e325      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}
	else if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1])
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	db1b      	blt.n	8002e58 <PDM_PWM_Duty_Cycle_Set+0xf0>
			 && (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	db13      	blt.n	8002e58 <PDM_PWM_Duty_Cycle_Set+0xf0>
	{
		pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][pwm_struct->Map_Lengths[0]];
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e36:	4619      	mov	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a5b      	subs	r3, r3, r1
 8002e48:	4403      	add	r3, r0
 8002e4a:	3334      	adds	r3, #52	; 0x34
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	88da      	ldrh	r2, [r3, #6]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	805a      	strh	r2, [r3, #2]
		return;
 8002e56:	e301      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
	}

	if((pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002e64:	429a      	cmp	r2, r3
 8002e66:	dd08      	ble.n	8002e7a <PDM_PWM_Duty_Cycle_Set+0x112>
		|| (pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Lim[0][1]))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f2c0 80cb 	blt.w	8003010 <PDM_PWM_Duty_Cycle_Set+0x2a8>
	{
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e0c0      	b.n	8003002 <PDM_PWM_Duty_Cycle_Set+0x29a>
		{
			if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	331a      	adds	r3, #26
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	440b      	add	r3, r1
 8002e90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f2c0 80b1 	blt.w	8002ffc <PDM_PWM_Duty_Cycle_Set+0x294>
				&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	331a      	adds	r3, #26
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	440b      	add	r3, r1
 8002eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f300 80a3 	bgt.w	8002ffc <PDM_PWM_Duty_Cycle_Set+0x294>
			{
				if(pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Lim[0][0])
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	dc45      	bgt.n	8002f52 <PDM_PWM_Duty_Cycle_Set+0x1ea>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	440b      	add	r3, r1
 8002ed6:	336e      	adds	r3, #110	; 0x6e
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	440b      	add	r3, r1
 8002eea:	336e      	adds	r3, #110	; 0x6e
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	331a      	adds	r3, #26
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	fb03 f301 	mul.w	r3, r3, r1
 8002f0c:	1ac2      	subs	r2, r0, r3
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	3301      	adds	r3, #1
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	331a      	adds	r3, #26
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	440b      	add	r3, r1
 8002f1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	331a      	adds	r3, #26
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	440b      	add	r3, r1
 8002f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f2e:	1ac3      	subs	r3, r0, r3
 8002f30:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f34:	b299      	uxth	r1, r3
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4403      	add	r3, r0
 8002f44:	336e      	adds	r3, #110	; 0x6e
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	440b      	add	r3, r1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	805a      	strh	r2, [r3, #2]
																  	    pwm_struct->Command_Var_Step[1][y],
																		pwm_struct->Command_Var_Step[1][y + 1],
																		pwm_struct->Duty_Cycle_Map[y][pwm_struct->Map_Lengths[0]],
																		pwm_struct->Duty_Cycle_Map[y + 1][pwm_struct->Map_Lengths[0]]);
				}
				return;
 8002f50:	e284      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[1],
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	4403      	add	r3, r0
 8002f68:	3334      	adds	r3, #52	; 0x34
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	440b      	add	r3, r1
 8002f6e:	88db      	ldrh	r3, [r3, #6]
 8002f70:	4618      	mov	r0, r3
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	4423      	add	r3, r4
 8002f86:	3334      	adds	r3, #52	; 0x34
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	440b      	add	r3, r1
 8002f8c:	88db      	ldrh	r3, [r3, #6]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002f96:	461c      	mov	r4, r3
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	331a      	adds	r3, #26
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fa6:	1ae3      	subs	r3, r4, r3
 8002fa8:	fb03 f301 	mul.w	r3, r3, r1
 8002fac:	1ac2      	subs	r2, r0, r3
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	331a      	adds	r3, #26
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	440b      	add	r3, r1
 8002fba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	331a      	adds	r3, #26
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fce:	1ac3      	subs	r3, r0, r3
 8002fd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fde:	461c      	mov	r4, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	4423      	add	r3, r4
 8002fea:	3334      	adds	r3, #52	; 0x34
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4403      	add	r3, r0
 8002ff0:	88db      	ldrh	r3, [r3, #6]
 8002ff2:	440b      	add	r3, r1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	805a      	strh	r2, [r3, #2]
				return;
 8002ffa:	e22f      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
		for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	3301      	adds	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	429a      	cmp	r2, r3
 800300c:	f4ff af38 	bcc.w	8002e80 <PDM_PWM_Duty_Cycle_Set+0x118>
			}
		}
	}

	if((pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800301c:	429a      	cmp	r2, r3
 800301e:	dd08      	ble.n	8003032 <PDM_PWM_Duty_Cycle_Set+0x2ca>
		|| (pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Lim[1][1]))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800302c:	429a      	cmp	r2, r3
 800302e:	f2c0 80c2 	blt.w	80031b6 <PDM_PWM_Duty_Cycle_Set+0x44e>
	{
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003032:	2300      	movs	r3, #0
 8003034:	73bb      	strb	r3, [r7, #14]
 8003036:	e0b7      	b.n	80031a8 <PDM_PWM_Duty_Cycle_Set+0x440>
		{
			if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800303e:	7bbb      	ldrb	r3, [r7, #14]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	3318      	adds	r3, #24
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	440b      	add	r3, r1
 8003048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800304c:	429a      	cmp	r2, r3
 800304e:	f2c0 80a8 	blt.w	80031a2 <PDM_PWM_Duty_Cycle_Set+0x43a>
				&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	3301      	adds	r3, #1
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	3318      	adds	r3, #24
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	440b      	add	r3, r1
 8003064:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003068:	429a      	cmp	r2, r3
 800306a:	f300 809a 	bgt.w	80031a2 <PDM_PWM_Duty_Cycle_Set+0x43a>
			{
				if(pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Lim[1][0])
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800307a:	429a      	cmp	r2, r3
 800307c:	dc3c      	bgt.n	80030f8 <PDM_PWM_Duty_Cycle_Set+0x390>
				{
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 800307e:	7bbb      	ldrb	r3, [r7, #14]
 8003080:	3301      	adds	r3, #1
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	3334      	adds	r3, #52	; 0x34
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	88db      	ldrh	r3, [r3, #6]
 800308c:	4619      	mov	r1, r3
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	3334      	adds	r3, #52	; 0x34
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	88db      	ldrh	r3, [r3, #6]
 800309a:	4618      	mov	r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80030a2:	461c      	mov	r4, r3
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	3318      	adds	r3, #24
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030b2:	1ae3      	subs	r3, r4, r3
 80030b4:	fb03 f300 	mul.w	r3, r3, r0
 80030b8:	1aca      	subs	r2, r1, r3
 80030ba:	7bbb      	ldrb	r3, [r7, #14]
 80030bc:	3301      	adds	r3, #1
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	3318      	adds	r3, #24
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	440b      	add	r3, r1
 80030c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030ca:	4618      	mov	r0, r3
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	3318      	adds	r3, #24
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	440b      	add	r3, r1
 80030d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030da:	1ac3      	subs	r3, r0, r3
 80030dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	7bbb      	ldrb	r3, [r7, #14]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	3334      	adds	r3, #52	; 0x34
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	440b      	add	r3, r1
 80030ec:	88db      	ldrh	r3, [r3, #6]
 80030ee:	4413      	add	r3, r2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	805a      	strh	r2, [r3, #2]
																  	    pwm_struct->Command_Var_Step[0][x],
																		pwm_struct->Command_Var_Step[0][x + 1],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x],
																		pwm_struct->Duty_Cycle_Map[pwm_struct->Map_Lengths[1]][x + 1]);
				}
				return;
 80030f6:	e1b1      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
					pwm_struct->Duty_Cycle = __PDM_LINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030fe:	4618      	mov	r0, r3
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4603      	mov	r3, r0
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a1b      	subs	r3, r3, r0
 800310c:	440b      	add	r3, r1
 800310e:	3334      	adds	r3, #52	; 0x34
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	88db      	ldrh	r3, [r3, #6]
 8003116:	461c      	mov	r4, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800311e:	4618      	mov	r0, r3
 8003120:	7bb9      	ldrb	r1, [r7, #14]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4603      	mov	r3, r0
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a1b      	subs	r3, r3, r0
 800312a:	440b      	add	r3, r1
 800312c:	3334      	adds	r3, #52	; 0x34
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	88db      	ldrh	r3, [r3, #6]
 8003134:	4619      	mov	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800313c:	4618      	mov	r0, r3
 800313e:	7bbb      	ldrb	r3, [r7, #14]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	3318      	adds	r3, #24
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800314c:	1ac3      	subs	r3, r0, r3
 800314e:	fb03 f301 	mul.w	r3, r3, r1
 8003152:	1ae2      	subs	r2, r4, r3
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	3301      	adds	r3, #1
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	3318      	adds	r3, #24
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	440b      	add	r3, r1
 8003160:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003164:	4618      	mov	r0, r3
 8003166:	7bbb      	ldrb	r3, [r7, #14]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	3318      	adds	r3, #24
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	440b      	add	r3, r1
 8003170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003174:	1ac3      	subs	r3, r0, r3
 8003176:	fb92 f3f3 	sdiv	r3, r2, r3
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003182:	461c      	mov	r4, r3
 8003184:	7bb8      	ldrb	r0, [r7, #14]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4623      	mov	r3, r4
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1b1b      	subs	r3, r3, r4
 800318e:	4403      	add	r3, r0
 8003190:	3334      	adds	r3, #52	; 0x34
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	440b      	add	r3, r1
 8003196:	88db      	ldrh	r3, [r3, #6]
 8003198:	4413      	add	r3, r2
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	805a      	strh	r2, [r3, #2]
				return;
 80031a0:	e15c      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
		for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	3301      	adds	r3, #1
 80031a6:	73bb      	strb	r3, [r7, #14]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ae:	7bba      	ldrb	r2, [r7, #14]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	f4ff af41 	bcc.w	8003038 <PDM_PWM_Duty_Cycle_Set+0x2d0>
			}
		}
	}

	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	737b      	strb	r3, [r7, #13]
 80031ba:	e147      	b.n	800344c <PDM_PWM_Duty_Cycle_Set+0x6e4>
	{
		if((pwm_struct->Command_Var[0] >= pwm_struct->Command_Var_Step[0][x])
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80031c2:	7b7b      	ldrb	r3, [r7, #13]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	3318      	adds	r3, #24
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	440b      	add	r3, r1
 80031cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f2c0 8138 	blt.w	8003446 <PDM_PWM_Duty_Cycle_Set+0x6de>
			&& (pwm_struct->Command_Var[0] <= pwm_struct->Command_Var_Step[0][x + 1]))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80031dc:	7b7b      	ldrb	r3, [r7, #13]
 80031de:	3301      	adds	r3, #1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	3318      	adds	r3, #24
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f300 812a 	bgt.w	8003446 <PDM_PWM_Duty_Cycle_Set+0x6de>
		{
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	733b      	strb	r3, [r7, #12]
 80031f6:	e11f      	b.n	8003438 <PDM_PWM_Duty_Cycle_Set+0x6d0>
			{
				if((pwm_struct->Command_Var[1] >= pwm_struct->Command_Var_Step[1][y])
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80031fe:	7b3b      	ldrb	r3, [r7, #12]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	331a      	adds	r3, #26
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	440b      	add	r3, r1
 8003208:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800320c:	429a      	cmp	r2, r3
 800320e:	f2c0 8110 	blt.w	8003432 <PDM_PWM_Duty_Cycle_Set+0x6ca>
					&& (pwm_struct->Command_Var[1] <= pwm_struct->Command_Var_Step[1][y + 1]))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003218:	7b3b      	ldrb	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	331a      	adds	r3, #26
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	440b      	add	r3, r1
 8003224:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003228:	429a      	cmp	r2, r3
 800322a:	f300 8102 	bgt.w	8003432 <PDM_PWM_Duty_Cycle_Set+0x6ca>
				{
					pwm_struct->Duty_Cycle = __PDM_BILINEAR_INTERPOLATION(pwm_struct->Command_Var[0],
 800322e:	7b3b      	ldrb	r3, [r7, #12]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	7b7b      	ldrb	r3, [r7, #13]
 8003234:	1c58      	adds	r0, r3, #1
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	4403      	add	r3, r0
 8003240:	3334      	adds	r3, #52	; 0x34
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	88db      	ldrh	r3, [r3, #6]
 8003248:	461c      	mov	r4, r3
 800324a:	7b3b      	ldrb	r3, [r7, #12]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	7b78      	ldrb	r0, [r7, #13]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	4403      	add	r3, r0
 800325a:	3334      	adds	r3, #52	; 0x34
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	440b      	add	r3, r1
 8003260:	88db      	ldrh	r3, [r3, #6]
 8003262:	4619      	mov	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800326a:	4618      	mov	r0, r3
 800326c:	7b7b      	ldrb	r3, [r7, #13]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	3318      	adds	r3, #24
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800327a:	1ac3      	subs	r3, r0, r3
 800327c:	fb03 f301 	mul.w	r3, r3, r1
 8003280:	1ae2      	subs	r2, r4, r3
 8003282:	7b7b      	ldrb	r3, [r7, #13]
 8003284:	3301      	adds	r3, #1
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	3318      	adds	r3, #24
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	440b      	add	r3, r1
 800328e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003292:	4618      	mov	r0, r3
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	3318      	adds	r3, #24
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	440b      	add	r3, r1
 800329e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032a2:	1ac3      	subs	r3, r0, r3
 80032a4:	fb92 f1f3 	sdiv	r1, r2, r3
 80032a8:	7b3b      	ldrb	r3, [r7, #12]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	7b7c      	ldrb	r4, [r7, #13]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	4423      	add	r3, r4
 80032b8:	3334      	adds	r3, #52	; 0x34
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4403      	add	r3, r0
 80032be:	88db      	ldrh	r3, [r3, #6]
 80032c0:	4419      	add	r1, r3
 80032c2:	7b3a      	ldrb	r2, [r7, #12]
 80032c4:	7b7b      	ldrb	r3, [r7, #13]
 80032c6:	1c5c      	adds	r4, r3, #1
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	4423      	add	r3, r4
 80032d2:	3334      	adds	r3, #52	; 0x34
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4403      	add	r3, r0
 80032d8:	88db      	ldrh	r3, [r3, #6]
 80032da:	461d      	mov	r5, r3
 80032dc:	7b3a      	ldrb	r2, [r7, #12]
 80032de:	7b7c      	ldrb	r4, [r7, #13]
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	4423      	add	r3, r4
 80032ea:	3334      	adds	r3, #52	; 0x34
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4403      	add	r3, r0
 80032f0:	88db      	ldrh	r3, [r3, #6]
 80032f2:	4618      	mov	r0, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80032fa:	461c      	mov	r4, r3
 80032fc:	7b7b      	ldrb	r3, [r7, #13]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	3318      	adds	r3, #24
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800330a:	1ae3      	subs	r3, r4, r3
 800330c:	fb03 f300 	mul.w	r3, r3, r0
 8003310:	1aea      	subs	r2, r5, r3
 8003312:	7b7b      	ldrb	r3, [r7, #13]
 8003314:	3301      	adds	r3, #1
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	3318      	adds	r3, #24
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4403      	add	r3, r0
 800331e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003322:	461c      	mov	r4, r3
 8003324:	7b7b      	ldrb	r3, [r7, #13]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	3318      	adds	r3, #24
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4403      	add	r3, r0
 800332e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003332:	1ae3      	subs	r3, r4, r3
 8003334:	fb92 f0f3 	sdiv	r0, r2, r3
 8003338:	7b3a      	ldrb	r2, [r7, #12]
 800333a:	7b7d      	ldrb	r5, [r7, #13]
 800333c:	687c      	ldr	r4, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	442b      	add	r3, r5
 8003346:	3334      	adds	r3, #52	; 0x34
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4423      	add	r3, r4
 800334c:	88db      	ldrh	r3, [r3, #6]
 800334e:	18c2      	adds	r2, r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003356:	461c      	mov	r4, r3
 8003358:	7b3b      	ldrb	r3, [r7, #12]
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	331a      	adds	r3, #26
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4403      	add	r3, r0
 8003362:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003366:	1ae3      	subs	r3, r4, r3
 8003368:	fb03 f302 	mul.w	r3, r3, r2
 800336c:	1aca      	subs	r2, r1, r3
 800336e:	7b3b      	ldrb	r3, [r7, #12]
 8003370:	3301      	adds	r3, #1
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	331a      	adds	r3, #26
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	440b      	add	r3, r1
 800337a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800337e:	4618      	mov	r0, r3
 8003380:	7b3b      	ldrb	r3, [r7, #12]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	331a      	adds	r3, #26
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	440b      	add	r3, r1
 800338a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800338e:	1ac3      	subs	r3, r0, r3
 8003390:	fb92 f3f3 	sdiv	r3, r2, r3
 8003394:	b299      	uxth	r1, r3
 8003396:	7b3a      	ldrb	r2, [r7, #12]
 8003398:	7b7b      	ldrb	r3, [r7, #13]
 800339a:	1c5c      	adds	r4, r3, #1
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	4423      	add	r3, r4
 80033a6:	3334      	adds	r3, #52	; 0x34
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4403      	add	r3, r0
 80033ac:	88db      	ldrh	r3, [r3, #6]
 80033ae:	461d      	mov	r5, r3
 80033b0:	7b3a      	ldrb	r2, [r7, #12]
 80033b2:	7b7c      	ldrb	r4, [r7, #13]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	4423      	add	r3, r4
 80033be:	3334      	adds	r3, #52	; 0x34
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4403      	add	r3, r0
 80033c4:	88db      	ldrh	r3, [r3, #6]
 80033c6:	4618      	mov	r0, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80033ce:	461c      	mov	r4, r3
 80033d0:	7b7b      	ldrb	r3, [r7, #13]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	3318      	adds	r3, #24
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033de:	1ae3      	subs	r3, r4, r3
 80033e0:	fb03 f300 	mul.w	r3, r3, r0
 80033e4:	1aea      	subs	r2, r5, r3
 80033e6:	7b7b      	ldrb	r3, [r7, #13]
 80033e8:	3301      	adds	r3, #1
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	3318      	adds	r3, #24
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4403      	add	r3, r0
 80033f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033f6:	461c      	mov	r4, r3
 80033f8:	7b7b      	ldrb	r3, [r7, #13]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	3318      	adds	r3, #24
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4403      	add	r3, r0
 8003402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003406:	1ae3      	subs	r3, r4, r3
 8003408:	fb92 f3f3 	sdiv	r3, r2, r3
 800340c:	b298      	uxth	r0, r3
 800340e:	7b3a      	ldrb	r2, [r7, #12]
 8003410:	7b7d      	ldrb	r5, [r7, #13]
 8003412:	687c      	ldr	r4, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	442b      	add	r3, r5
 800341c:	3334      	adds	r3, #52	; 0x34
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4423      	add	r3, r4
 8003422:	88db      	ldrh	r3, [r3, #6]
 8003424:	4403      	add	r3, r0
 8003426:	b29b      	uxth	r3, r3
 8003428:	440b      	add	r3, r1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	805a      	strh	r2, [r3, #2]
																		  pwm_struct->Command_Var_Step[1][y + 1],
																		  pwm_struct->Duty_Cycle_Map[y][x],
																		  pwm_struct->Duty_Cycle_Map[y][x + 1],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x],
																		  pwm_struct->Duty_Cycle_Map[y + 1][x + 1]);
					return;
 8003430:	e014      	b.n	800345c <PDM_PWM_Duty_Cycle_Set+0x6f4>
			for(uint8_t y = 0; y < pwm_struct->Map_Lengths[1]; y++)
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	733b      	strb	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800343e:	7b3a      	ldrb	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	f4ff aed9 	bcc.w	80031f8 <PDM_PWM_Duty_Cycle_Set+0x490>
	for(uint8_t x = 0; x < pwm_struct->Map_Lengths[0]; x++)
 8003446:	7b7b      	ldrb	r3, [r7, #13]
 8003448:	3301      	adds	r3, #1
 800344a:	737b      	strb	r3, [r7, #13]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003452:	7b7a      	ldrb	r2, [r7, #13]
 8003454:	429a      	cmp	r2, r3
 8003456:	f4ff aeb1 	bcc.w	80031bc <PDM_PWM_Duty_Cycle_Set+0x454>
				}
			}
		}
	}
	return;
 800345a:	bf00      	nop
}
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bcb0      	pop	{r4, r5, r7}
 8003462:	4770      	bx	lr

08003464 <PDM_PWM_Init>:

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	Data_ID_Buffer[26 + pwm_out_number] |= (PWM_Pin_Status >> pwm_out_number) & 0x01;
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	331a      	adds	r3, #26
 8003476:	4a5b      	ldr	r2, [pc, #364]	; (80035e4 <PDM_PWM_Init+0x180>)
 8003478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800347c:	b21a      	sxth	r2, r3
 800347e:	4b5a      	ldr	r3, [pc, #360]	; (80035e8 <PDM_PWM_Init+0x184>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	fa41 f303 	asr.w	r3, r1, r3
 800348a:	b21b      	sxth	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b21b      	sxth	r3, r3
 8003492:	4313      	orrs	r3, r2
 8003494:	b21a      	sxth	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	331a      	adds	r3, #26
 800349a:	b291      	uxth	r1, r2
 800349c:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <PDM_PWM_Init+0x180>)
 800349e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	f200 8099 	bhi.w	80035dc <PDM_PWM_Init+0x178>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <PDM_PWM_Init+0x4c>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034cb 	.word	0x080034cb
 80034b8:	080034d5 	.word	0x080034d5
 80034bc:	080034df 	.word	0x080034df
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <PDM_PWM_Init+0x188>)
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	230c      	movs	r3, #12
 80034c6:	827b      	strh	r3, [r7, #18]
 80034c8:	e00d      	b.n	80034e6 <PDM_PWM_Init+0x82>
 80034ca:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <PDM_PWM_Init+0x18c>)
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	2304      	movs	r3, #4
 80034d0:	827b      	strh	r3, [r7, #18]
 80034d2:	e008      	b.n	80034e6 <PDM_PWM_Init+0x82>
 80034d4:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <PDM_PWM_Init+0x190>)
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	2308      	movs	r3, #8
 80034da:	827b      	strh	r3, [r7, #18]
 80034dc:	e003      	b.n	80034e6 <PDM_PWM_Init+0x82>
 80034de:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <PDM_PWM_Init+0x194>)
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	230c      	movs	r3, #12
 80034e4:	827b      	strh	r3, [r7, #18]
 80034e6:	bf00      	nop

	if(((PWM_Pin_Status >> pwm_out_number) & 0x01) == OUTPUT_PWM_ENABLE)
 80034e8:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <PDM_PWM_Init+0x184>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	fa42 f303 	asr.w	r3, r2, r3
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d069      	beq.n	80035d0 <PDM_PWM_Init+0x16c>
	{
		for(uint8_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	747b      	strb	r3, [r7, #17]
 8003500:	e023      	b.n	800354a <PDM_PWM_Init+0xe6>
		{
			pwm_struct->Command_Var_Step[0][i] = (i * ((pwm_struct->Command_Var_Lim[0][1] - pwm_struct->Command_Var_Lim[0][0]) / pwm_struct->Map_Lengths[0])) + pwm_struct->Command_Var_Lim[0][0];
 8003502:	7c7b      	ldrb	r3, [r7, #17]
 8003504:	b29a      	uxth	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800350c:	4619      	mov	r1, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003514:	1acb      	subs	r3, r1, r3
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 800351c:	fb93 f3f1 	sdiv	r3, r3, r1
 8003520:	b29b      	uxth	r3, r3
 8003522:	fb12 f303 	smulbb	r3, r2, r3
 8003526:	b29a      	uxth	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	4413      	add	r3, r2
 8003532:	b29a      	uxth	r2, r3
 8003534:	7c7b      	ldrb	r3, [r7, #17]
 8003536:	b211      	sxth	r1, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	3318      	adds	r3, #24
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	460a      	mov	r2, r1
 8003542:	805a      	strh	r2, [r3, #2]
		for(uint8_t i = 0; i <= pwm_struct->Map_Lengths[0]; i++)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	3301      	adds	r3, #1
 8003548:	747b      	strb	r3, [r7, #17]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003550:	7c7a      	ldrb	r2, [r7, #17]
 8003552:	429a      	cmp	r2, r3
 8003554:	d9d5      	bls.n	8003502 <PDM_PWM_Init+0x9e>
		}

		for(uint8_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 8003556:	2300      	movs	r3, #0
 8003558:	743b      	strb	r3, [r7, #16]
 800355a:	e023      	b.n	80035a4 <PDM_PWM_Init+0x140>
		{
			pwm_struct->Command_Var_Step[1][j] = (j * ((pwm_struct->Command_Var_Lim[1][1] - pwm_struct->Command_Var_Lim[1][0]) / pwm_struct->Map_Lengths[1])) + pwm_struct->Command_Var_Lim[1][0];
 800355c:	7c3b      	ldrb	r3, [r7, #16]
 800355e:	b29a      	uxth	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003566:	4619      	mov	r1, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
 8003576:	fb93 f3f1 	sdiv	r3, r3, r1
 800357a:	b29b      	uxth	r3, r3
 800357c:	fb12 f303 	smulbb	r3, r2, r3
 8003580:	b29a      	uxth	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003588:	b29b      	uxth	r3, r3
 800358a:	4413      	add	r3, r2
 800358c:	b29a      	uxth	r2, r3
 800358e:	7c3b      	ldrb	r3, [r7, #16]
 8003590:	b211      	sxth	r1, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	331a      	adds	r3, #26
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	460a      	mov	r2, r1
 800359c:	805a      	strh	r2, [r3, #2]
		for(uint8_t j = 0; j <= pwm_struct->Map_Lengths[1]; j++)
 800359e:	7c3b      	ldrb	r3, [r7, #16]
 80035a0:	3301      	adds	r3, #1
 80035a2:	743b      	strb	r3, [r7, #16]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035aa:	7c3a      	ldrb	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d9d5      	bls.n	800355c <PDM_PWM_Init+0xf8>
		}

		__HAL_TIM_SET_AUTORELOAD(htim, pwm_struct->PWM_Frequency);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	60da      	str	r2, [r3, #12]

		PDM_PWM_CAN_Filter_Config(hcan, pwm_struct, pwm_out_number);
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7fd fe66 	bl	800129c <PDM_PWM_CAN_Filter_Config>
	}

	HAL_TIM_PWM_Start(htim, tim_channel);
 80035d0:	8a7b      	ldrh	r3, [r7, #18]
 80035d2:	4619      	mov	r1, r3
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f008 f8a9 	bl	800b72c <HAL_TIM_PWM_Start>

	return;
 80035da:	e000      	b.n	80035de <PDM_PWM_Init+0x17a>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80035dc:	bf00      	nop
}
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20001164 	.word	0x20001164
 80035e8:	20000ea4 	.word	0x20000ea4
 80035ec:	20000df4 	.word	0x20000df4
 80035f0:	200003dc 	.word	0x200003dc
 80035f4:	2000111c 	.word	0x2000111c
 80035f8:	20001004 	.word	0x20001004

080035fc <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
	TIM_HandleTypeDef* htim;
	uint16_t tim_channel;

	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	2b03      	cmp	r3, #3
 800360c:	f200 80ff 	bhi.w	800380e <PDM_PWM_Output_Process+0x212>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <PDM_PWM_Output_Process+0x1c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003633 	.word	0x08003633
 8003620:	0800363d 	.word	0x0800363d
 8003624:	08003647 	.word	0x08003647
 8003628:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <PDM_PWM_Output_Process+0x21c>)
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	230c      	movs	r3, #12
 800362e:	817b      	strh	r3, [r7, #10]
 8003630:	e00d      	b.n	800364e <PDM_PWM_Output_Process+0x52>
 8003632:	4b7a      	ldr	r3, [pc, #488]	; (800381c <PDM_PWM_Output_Process+0x220>)
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	2304      	movs	r3, #4
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	e008      	b.n	800364e <PDM_PWM_Output_Process+0x52>
 800363c:	4b78      	ldr	r3, [pc, #480]	; (8003820 <PDM_PWM_Output_Process+0x224>)
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	2308      	movs	r3, #8
 8003642:	817b      	strh	r3, [r7, #10]
 8003644:	e003      	b.n	800364e <PDM_PWM_Output_Process+0x52>
 8003646:	4b77      	ldr	r3, [pc, #476]	; (8003824 <PDM_PWM_Output_Process+0x228>)
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	230c      	movs	r3, #12
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	bf00      	nop

	if((__PDM_INPUT_CONDITION_COMPARE(Output_Pin[pwm_out_number].Enabled_Inputs[0], Output_Pin[pwm_out_number].Input_Levels[0],
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4975      	ldr	r1, [pc, #468]	; (8003828 <PDM_PWM_Output_Process+0x22c>)
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	881a      	ldrh	r2, [r3, #0]
 8003660:	4b72      	ldr	r3, [pc, #456]	; (800382c <PDM_PWM_Output_Process+0x230>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	4013      	ands	r3, r2
 8003666:	b299      	uxth	r1, r3
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	486f      	ldr	r0, [pc, #444]	; (8003828 <PDM_PWM_Output_Process+0x22c>)
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4403      	add	r3, r0
 8003676:	3304      	adds	r3, #4
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	4299      	cmp	r1, r3
 800367c:	d017      	beq.n	80036ae <PDM_PWM_Output_Process+0xb2>
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	4969      	ldr	r1, [pc, #420]	; (8003828 <PDM_PWM_Output_Process+0x22c>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3302      	adds	r3, #2
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	4b66      	ldr	r3, [pc, #408]	; (800382c <PDM_PWM_Output_Process+0x230>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	4013      	ands	r3, r2
 8003696:	b299      	uxth	r1, r3
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	4863      	ldr	r0, [pc, #396]	; (8003828 <PDM_PWM_Output_Process+0x22c>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4403      	add	r3, r0
 80036a6:	3306      	adds	r3, #6
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	4299      	cmp	r1, r3
 80036ac:	d164      	bne.n	8003778 <PDM_PWM_Output_Process+0x17c>
									 Output_Pin[pwm_out_number].Enabled_Inputs[1], Output_Pin[pwm_out_number].Input_Levels[1]))
									 && (((Driver_Safety_Flag >> pwm_out_number) & 0x01) == 1))
 80036ae:	4b60      	ldr	r3, [pc, #384]	; (8003830 <PDM_PWM_Output_Process+0x234>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	fa42 f303 	asr.w	r3, r2, r3
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d05a      	beq.n	8003778 <PDM_PWM_Output_Process+0x17c>
	{
		if(Data_ID_Buffer[26 + pwm_out_number] == OUTPUT_PWM_ENABLE)
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	331a      	adds	r3, #26
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <PDM_PWM_Output_Process+0x238>)
 80036c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d14d      	bne.n	800376c <PDM_PWM_Output_Process+0x170>
		{
			if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[0], pwm_struct->Input_DC_Preset[0],
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f44f 720c 	mov.w	r2, #560	; 0x230
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	889a      	ldrh	r2, [r3, #4]
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <PDM_PWM_Output_Process+0x230>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	899b      	ldrh	r3, [r3, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d00f      	beq.n	8003710 <PDM_PWM_Output_Process+0x114>
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f44f 720c 	mov.w	r2, #560	; 0x230
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	88da      	ldrh	r2, [r3, #6]
 8003700:	4b4a      	ldr	r3, [pc, #296]	; (800382c <PDM_PWM_Output_Process+0x230>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	4013      	ands	r3, r2
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	89db      	ldrh	r3, [r3, #14]
 800370c:	429a      	cmp	r2, r3
 800370e:	d104      	bne.n	800371a <PDM_PWM_Output_Process+0x11e>
											 pwm_struct[pwm_out_number].Input_DC_Preset_Enable[1], pwm_struct->Input_DC_Preset[1]))
			{
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[0];
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8a9a      	ldrh	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	805a      	strh	r2, [r3, #2]
 8003718:	e02d      	b.n	8003776 <PDM_PWM_Output_Process+0x17a>
			}
			else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct[pwm_out_number].Input_DC_Preset_Enable[2], pwm_struct->Input_DC_Preset[2],
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	891a      	ldrh	r2, [r3, #8]
 800372a:	4b40      	ldr	r3, [pc, #256]	; (800382c <PDM_PWM_Output_Process+0x230>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	4013      	ands	r3, r2
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8a1b      	ldrh	r3, [r3, #16]
 8003736:	429a      	cmp	r2, r3
 8003738:	d00f      	beq.n	800375a <PDM_PWM_Output_Process+0x15e>
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	895a      	ldrh	r2, [r3, #10]
 800374a:	4b38      	ldr	r3, [pc, #224]	; (800382c <PDM_PWM_Output_Process+0x230>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	4013      	ands	r3, r2
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8a5b      	ldrh	r3, [r3, #18]
 8003756:	429a      	cmp	r2, r3
 8003758:	d104      	bne.n	8003764 <PDM_PWM_Output_Process+0x168>
					 	 	 	 	 	 	 	  pwm_struct[pwm_out_number].Input_DC_Preset_Enable[3], pwm_struct->Input_DC_Preset[3]))
			{
				pwm_struct->Duty_Cycle = pwm_struct->Duty_Cycle_Preset[1];
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8ada      	ldrh	r2, [r3, #22]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	805a      	strh	r2, [r3, #2]
 8003762:	e008      	b.n	8003776 <PDM_PWM_Output_Process+0x17a>
			}else{
				PDM_PWM_Duty_Cycle_Set(pwm_struct);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff faff 	bl	8002d68 <PDM_PWM_Duty_Cycle_Set>
		if(Data_ID_Buffer[26 + pwm_out_number] == OUTPUT_PWM_ENABLE)
 800376a:	e008      	b.n	800377e <PDM_PWM_Output_Process+0x182>
			}
		}else{
			pwm_struct->Duty_Cycle = 1010;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8003772:	805a      	strh	r2, [r3, #2]
		if(Data_ID_Buffer[26 + pwm_out_number] == OUTPUT_PWM_ENABLE)
 8003774:	e003      	b.n	800377e <PDM_PWM_Output_Process+0x182>
 8003776:	e002      	b.n	800377e <PDM_PWM_Output_Process+0x182>
		}
	}else{
		pwm_struct->Duty_Cycle = 0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	805a      	strh	r2, [r3, #2]
	}

	__HAL_TIM_SET_COMPARE(htim, tim_channel, (htim->Init.Period * pwm_struct->Duty_Cycle) / 1000);
 800377e:	897b      	ldrh	r3, [r7, #10]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <PDM_PWM_Output_Process+0x1a4>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	8852      	ldrh	r2, [r2, #2]
 800378c:	fb02 f203 	mul.w	r2, r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4928      	ldr	r1, [pc, #160]	; (8003838 <PDM_PWM_Output_Process+0x23c>)
 8003796:	fba1 1202 	umull	r1, r2, r1, r2
 800379a:	0992      	lsrs	r2, r2, #6
 800379c:	635a      	str	r2, [r3, #52]	; 0x34
 800379e:	e02e      	b.n	80037fe <PDM_PWM_Output_Process+0x202>
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d10d      	bne.n	80037c2 <PDM_PWM_Output_Process+0x1c6>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	8852      	ldrh	r2, [r2, #2]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	4920      	ldr	r1, [pc, #128]	; (8003838 <PDM_PWM_Output_Process+0x23c>)
 80037b8:	fba1 1303 	umull	r1, r3, r1, r3
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	6393      	str	r3, [r2, #56]	; 0x38
 80037c0:	e01d      	b.n	80037fe <PDM_PWM_Output_Process+0x202>
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d10d      	bne.n	80037e4 <PDM_PWM_Output_Process+0x1e8>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	8852      	ldrh	r2, [r2, #2]
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	4917      	ldr	r1, [pc, #92]	; (8003838 <PDM_PWM_Output_Process+0x23c>)
 80037da:	fba1 1303 	umull	r1, r3, r1, r3
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80037e2:	e00c      	b.n	80037fe <PDM_PWM_Output_Process+0x202>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	8852      	ldrh	r2, [r2, #2]
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	4910      	ldr	r1, [pc, #64]	; (8003838 <PDM_PWM_Output_Process+0x23c>)
 80037f6:	fba1 1303 	umull	r1, r3, r1, r3
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40

	Data_Buffer[26 + pwm_out_number] = pwm_struct->Duty_Cycle;
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	331a      	adds	r3, #26
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	8851      	ldrh	r1, [r2, #2]
 8003806:	4a0d      	ldr	r2, [pc, #52]	; (800383c <PDM_PWM_Output_Process+0x240>)
 8003808:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 800380c:	e000      	b.n	8003810 <PDM_PWM_Output_Process+0x214>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800380e:	bf00      	nop
}
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000df4 	.word	0x20000df4
 800381c:	200003dc 	.word	0x200003dc
 8003820:	2000111c 	.word	0x2000111c
 8003824:	20001004 	.word	0x20001004
 8003828:	20001050 	.word	0x20001050
 800382c:	200012bc 	.word	0x200012bc
 8003830:	20000530 	.word	0x20000530
 8003834:	20001164 	.word	0x20001164
 8003838:	10624dd3 	.word	0x10624dd3
 800383c:	20001230 	.word	0x20001230

08003840 <PDM_Next_Data_Conversion>:
//uint8_t next_data - next data to be converted:	0: Output current 0
//													1: Output current 1
//													2: Driver temperature
//													3: Driver voltage
static void PDM_Next_Data_Conversion(uint8_t next_data)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
	switch(next_data)
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d84e      	bhi.n	80038ee <PDM_Next_Data_Conversion+0xae>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <PDM_Next_Data_Conversion+0x18>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800386d 	.word	0x0800386d
 800385c:	080038ef 	.word	0x080038ef
 8003860:	0800388d 	.word	0x0800388d
 8003864:	080038ad 	.word	0x080038ad
 8003868:	080038cd 	.word	0x080038cd
	{
	case Data_Read_Current0:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800386c:	2201      	movs	r2, #1
 800386e:	2120      	movs	r1, #32
 8003870:	4821      	ldr	r0, [pc, #132]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 8003872:	f002 fe87 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003876:	2200      	movs	r2, #0
 8003878:	2108      	movs	r1, #8
 800387a:	481f      	ldr	r0, [pc, #124]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 800387c:	f002 fe82 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003880:	2200      	movs	r2, #0
 8003882:	2104      	movs	r1, #4
 8003884:	481c      	ldr	r0, [pc, #112]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 8003886:	f002 fe7d 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 800388a:	e02f      	b.n	80038ec <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Current1:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800388c:	2201      	movs	r2, #1
 800388e:	2120      	movs	r1, #32
 8003890:	4819      	ldr	r0, [pc, #100]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 8003892:	f002 fe77 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003896:	2200      	movs	r2, #0
 8003898:	2108      	movs	r1, #8
 800389a:	4817      	ldr	r0, [pc, #92]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 800389c:	f002 fe72 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80038a0:	2201      	movs	r2, #1
 80038a2:	2104      	movs	r1, #4
 80038a4:	4814      	ldr	r0, [pc, #80]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038a6:	f002 fe6d 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80038aa:	e01f      	b.n	80038ec <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Temperature:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80038ac:	2201      	movs	r2, #1
 80038ae:	2120      	movs	r1, #32
 80038b0:	4811      	ldr	r0, [pc, #68]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038b2:	f002 fe67 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80038b6:	2201      	movs	r2, #1
 80038b8:	2108      	movs	r1, #8
 80038ba:	480f      	ldr	r0, [pc, #60]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038bc:	f002 fe62 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2104      	movs	r1, #4
 80038c4:	480c      	ldr	r0, [pc, #48]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038c6:	f002 fe5d 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80038ca:	e00f      	b.n	80038ec <PDM_Next_Data_Conversion+0xac>

	case Data_Read_Voltage:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80038cc:	2201      	movs	r2, #1
 80038ce:	2120      	movs	r1, #32
 80038d0:	4809      	ldr	r0, [pc, #36]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038d2:	f002 fe57 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80038d6:	2201      	movs	r2, #1
 80038d8:	2108      	movs	r1, #8
 80038da:	4807      	ldr	r0, [pc, #28]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038dc:	f002 fe52 	bl	8006584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80038e0:	2201      	movs	r2, #1
 80038e2:	2104      	movs	r1, #4
 80038e4:	4804      	ldr	r0, [pc, #16]	; (80038f8 <PDM_Next_Data_Conversion+0xb8>)
 80038e6:	f002 fe4d 	bl	8006584 <HAL_GPIO_WritePin>
		break;
 80038ea:	bf00      	nop
	}

	return;
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
}
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000

080038fc <PDM_Read_Data>:
//										1: Output current 1
//										2: Driver temperature
//										3: Driver voltage
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Read_Data(uint8_t *data_read)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim7);
 8003904:	48aa      	ldr	r0, [pc, #680]	; (8003bb0 <PDM_Read_Data+0x2b4>)
 8003906:	f007 fe93 	bl	800b630 <HAL_TIM_Base_Stop_IT>

	switch(*data_read)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	f200 8198 	bhi.w	8003c44 <PDM_Read_Data+0x348>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <PDM_Read_Data+0x20>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003931 	.word	0x08003931
 8003920:	08003c45 	.word	0x08003c45
 8003924:	080039fd 	.word	0x080039fd
 8003928:	08003ad9 	.word	0x08003ad9
 800392c:	08003b75 	.word	0x08003b75
	{
	case Data_Read_Current0:
		*data_read = Data_Read_Current0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_CURRENT1;
 8003936:	4b9f      	ldr	r3, [pc, #636]	; (8003bb4 <PDM_Read_Data+0x2b8>)
 8003938:	22a0      	movs	r2, #160	; 0xa0
 800393a:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e058      	b.n	80039f4 <PDM_Read_Data+0xf8>
		{
			Data_Buffer[i * 2] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	4a9c      	ldr	r2, [pc, #624]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	f241 62f7 	movw	r2, #5879	; 0x16f7
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 8003956:	33dc      	adds	r3, #220	; 0xdc
 8003958:	4a98      	ldr	r2, [pc, #608]	; (8003bbc <PDM_Read_Data+0x2c0>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0b5a      	lsrs	r2, r3, #13
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	b291      	uxth	r1, r2
 8003966:	4a96      	ldr	r2, [pc, #600]	; (8003bc0 <PDM_Read_Data+0x2c4>)
 8003968:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[i * 2] > Output_Pin[i * 2].Current_Thresholds)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4a93      	ldr	r2, [pc, #588]	; (8003bc0 <PDM_Read_Data+0x2c4>)
 8003972:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	005a      	lsls	r2, r3, #1
 800397a:	4892      	ldr	r0, [pc, #584]	; (8003bc4 <PDM_Read_Data+0x2c8>)
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4403      	add	r3, r0
 8003986:	3308      	adds	r3, #8
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	4299      	cmp	r1, r3
 800398c:	d90d      	bls.n	80039aa <PDM_Read_Data+0xae>
				Driver_Overcurrent_Flag |= (1 << (i * 2));
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2201      	movs	r2, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	b21a      	sxth	r2, r3
 800399a:	4b8b      	ldr	r3, [pc, #556]	; (8003bc8 <PDM_Read_Data+0x2cc>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b21b      	sxth	r3, r3
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b21b      	sxth	r3, r3
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <PDM_Read_Data+0x2cc>)
 80039a8:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	4a82      	ldr	r2, [pc, #520]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80039b6:	d20d      	bcs.n	80039d4 <PDM_Read_Data+0xd8>
				Data_ID_Buffer[i * 2] |= 1;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <PDM_Read_Data+0x2d0>)
 80039be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	b291      	uxth	r1, r2
 80039cc:	4a7f      	ldr	r2, [pc, #508]	; (8003bcc <PDM_Read_Data+0x2d0>)
 80039ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80039d2:	e00c      	b.n	80039ee <PDM_Read_Data+0xf2>
			else
				Data_ID_Buffer[i * 2] &= 0xFFFE;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <PDM_Read_Data+0x2d0>)
 80039da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	b291      	uxth	r1, r2
 80039e8:	4a78      	ldr	r2, [pc, #480]	; (8003bcc <PDM_Read_Data+0x2d0>)
 80039ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	3301      	adds	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b07      	cmp	r3, #7
 80039f8:	d9a3      	bls.n	8003942 <PDM_Read_Data+0x46>
		}
		break;
 80039fa:	e123      	b.n	8003c44 <PDM_Read_Data+0x348>

	case Data_Read_Current1:
		*data_read = Data_Read_Temperature;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_TEMPERATURE;
 8003a02:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <PDM_Read_Data+0x2b8>)
 8003a04:	22c8      	movs	r2, #200	; 0xc8
 8003a06:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73bb      	strb	r3, [r7, #14]
 8003a0c:	e060      	b.n	8003ad0 <PDM_Read_Data+0x1d4>
		{
			Data_Buffer[(i * 2) + 1] = __PDM_CONVERT_CURRENT(ADC_BUFFER[i]);
 8003a0e:	7bbb      	ldrb	r3, [r7, #14]
 8003a10:	4a69      	ldr	r2, [pc, #420]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	f241 62f7 	movw	r2, #5879	; 0x16f7
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	f503 4312 	add.w	r3, r3, #37376	; 0x9200
 8003a22:	33dc      	adds	r3, #220	; 0xdc
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <PDM_Read_Data+0x2c0>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0b5a      	lsrs	r2, r3, #13
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	3301      	adds	r3, #1
 8003a32:	b291      	uxth	r1, r2
 8003a34:	4a62      	ldr	r2, [pc, #392]	; (8003bc0 <PDM_Read_Data+0x2c4>)
 8003a36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Data_Buffer[(i * 2) + 1] > Output_Pin[(i * 2) + 1].Current_Thresholds)
 8003a3a:	7bbb      	ldrb	r3, [r7, #14]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a5f      	ldr	r2, [pc, #380]	; (8003bc0 <PDM_Read_Data+0x2c4>)
 8003a42:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003a46:	7bbb      	ldrb	r3, [r7, #14]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	485d      	ldr	r0, [pc, #372]	; (8003bc4 <PDM_Read_Data+0x2c8>)
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4403      	add	r3, r0
 8003a58:	3308      	adds	r3, #8
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	d90e      	bls.n	8003a7e <PDM_Read_Data+0x182>
				Driver_Overcurrent_Flag |= (1 << ((i * 2) + 1));
 8003a60:	7bbb      	ldrb	r3, [r7, #14]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	3301      	adds	r3, #1
 8003a66:	2201      	movs	r2, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	b21a      	sxth	r2, r3
 8003a6e:	4b56      	ldr	r3, [pc, #344]	; (8003bc8 <PDM_Read_Data+0x2cc>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <PDM_Read_Data+0x2cc>)
 8003a7c:	801a      	strh	r2, [r3, #0]

			if(ADC_BUFFER[i] < ADC_THRESHOLD_HIGH)
 8003a7e:	7bbb      	ldrb	r3, [r7, #14]
 8003a80:	4a4d      	ldr	r2, [pc, #308]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003a8a:	d20f      	bcs.n	8003aac <PDM_Read_Data+0x1b0>
				Data_ID_Buffer[(i * 2) + 1] |= 1;
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a4e      	ldr	r2, [pc, #312]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003a94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	b291      	uxth	r1, r2
 8003aa4:	4a49      	ldr	r2, [pc, #292]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003aaa:	e00e      	b.n	8003aca <PDM_Read_Data+0x1ce>
			else
				Data_ID_Buffer[(i * 2) + 1] &= 0xFFFE;
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	4a46      	ldr	r2, [pc, #280]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003ab4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	3301      	adds	r3, #1
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	b291      	uxth	r1, r2
 8003ac4:	4a41      	ldr	r2, [pc, #260]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003ac6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003aca:	7bbb      	ldrb	r3, [r7, #14]
 8003acc:	3301      	adds	r3, #1
 8003ace:	73bb      	strb	r3, [r7, #14]
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	2b07      	cmp	r3, #7
 8003ad4:	d99b      	bls.n	8003a0e <PDM_Read_Data+0x112>
		}
		break;
 8003ad6:	e0b5      	b.n	8003c44 <PDM_Read_Data+0x348>

	case Data_Read_Temperature:
		*data_read = Data_Read_Voltage;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2204      	movs	r2, #4
 8003adc:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_VOLTAGE;
 8003ade:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <PDM_Read_Data+0x2b8>)
 8003ae0:	22a0      	movs	r2, #160	; 0xa0
 8003ae2:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	737b      	strb	r3, [r7, #13]
 8003ae8:	e040      	b.n	8003b6c <PDM_Read_Data+0x270>
		{
			Data_Buffer[16 + i] = __PDM_CONVERT_TEMPERATURE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003aea:	7b7b      	ldrb	r3, [r7, #13]
 8003aec:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003aee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003af2:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	f06f 0215 	mvn.w	r2, #21
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a33      	ldr	r2, [pc, #204]	; (8003bd0 <PDM_Read_Data+0x2d4>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	7b7b      	ldrb	r3, [r7, #13]
 8003b0c:	3310      	adds	r3, #16
 8003b0e:	b291      	uxth	r1, r2
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <PDM_Read_Data+0x2c4>)
 8003b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 8003b16:	7b7b      	ldrb	r3, [r7, #13]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d906      	bls.n	8003b30 <PDM_Read_Data+0x234>
 8003b22:	7b7b      	ldrb	r3, [r7, #13]
 8003b24:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003b2e:	d90d      	bls.n	8003b4c <PDM_Read_Data+0x250>
				Data_ID_Buffer[16 + i] |= 1;
 8003b30:	7b7b      	ldrb	r3, [r7, #13]
 8003b32:	3310      	adds	r3, #16
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003b36:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003b3a:	7b7b      	ldrb	r3, [r7, #13]
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	b291      	uxth	r1, r2
 8003b44:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003b46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003b4a:	e00c      	b.n	8003b66 <PDM_Read_Data+0x26a>
			else
				Data_ID_Buffer[16 + i] &= 0xFFFE;
 8003b4c:	7b7b      	ldrb	r3, [r7, #13]
 8003b4e:	3310      	adds	r3, #16
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003b52:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003b56:	7b7b      	ldrb	r3, [r7, #13]
 8003b58:	3310      	adds	r3, #16
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	b291      	uxth	r1, r2
 8003b60:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003b66:	7b7b      	ldrb	r3, [r7, #13]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	737b      	strb	r3, [r7, #13]
 8003b6c:	7b7b      	ldrb	r3, [r7, #13]
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	d9bb      	bls.n	8003aea <PDM_Read_Data+0x1ee>
		}
		break;
 8003b72:	e067      	b.n	8003c44 <PDM_Read_Data+0x348>

	case Data_Read_Voltage:
		*data_read = Data_Read_Current0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
		Accumulator_Delay = READING_DELAY_CURRENT0;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <PDM_Read_Data+0x2b8>)
 8003b7c:	22a0      	movs	r2, #160	; 0xa0
 8003b7e:	601a      	str	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	733b      	strb	r3, [r7, #12]
 8003b84:	e042      	b.n	8003c0c <PDM_Read_Data+0x310>
		{
			if((ADC_BUFFER[i] < ADC_THRESHOLD_LOW) || (ADC_BUFFER[i] > ADC_THRESHOLD_HIGH))
 8003b86:	7b3b      	ldrb	r3, [r7, #12]
 8003b88:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8e:	2b09      	cmp	r3, #9
 8003b90:	d906      	bls.n	8003ba0 <PDM_Read_Data+0x2a4>
 8003b92:	7b3b      	ldrb	r3, [r7, #12]
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <PDM_Read_Data+0x2bc>)
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003b9e:	d919      	bls.n	8003bd4 <PDM_Read_Data+0x2d8>
				Data_ID_Buffer[24] &= 0xFFFE;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003ba2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <PDM_Read_Data+0x2d0>)
 8003bac:	861a      	strh	r2, [r3, #48]	; 0x30
 8003bae:	e02a      	b.n	8003c06 <PDM_Read_Data+0x30a>
 8003bb0:	2000126c 	.word	0x2000126c
 8003bb4:	200011a0 	.word	0x200011a0
 8003bb8:	20000ea8 	.word	0x20000ea8
 8003bbc:	d1b71759 	.word	0xd1b71759
 8003bc0:	20001230 	.word	0x20001230
 8003bc4:	20001050 	.word	0x20001050
 8003bc8:	20000424 	.word	0x20000424
 8003bcc:	20001164 	.word	0x20001164
 8003bd0:	cccccccd 	.word	0xcccccccd
			else
			{
				Data_Buffer[24] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[i], ADC_BUFFER[8]);
 8003bd4:	7b3b      	ldrb	r3, [r7, #12]
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <PDM_Read_Data+0x380>)
 8003bd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <PDM_Read_Data+0x380>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <PDM_Read_Data+0x384>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	0b5b      	lsrs	r3, r3, #13
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <PDM_Read_Data+0x388>)
 8003bf6:	861a      	strh	r2, [r3, #48]	; 0x30
				Data_ID_Buffer[24] |= 1;
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <PDM_Read_Data+0x38c>)
 8003bfa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <PDM_Read_Data+0x38c>)
 8003c04:	861a      	strh	r2, [r3, #48]	; 0x30
		for(uint8_t i = 0; i < 8; i++)
 8003c06:	7b3b      	ldrb	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	733b      	strb	r3, [r7, #12]
 8003c0c:	7b3b      	ldrb	r3, [r7, #12]
 8003c0e:	2b07      	cmp	r3, #7
 8003c10:	d9b9      	bls.n	8003b86 <PDM_Read_Data+0x28a>
			}
		}

		if((Data_ID_Buffer[24] & 0xFFFE) == 0)
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <PDM_Read_Data+0x38c>)
 8003c14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003c16:	461a      	mov	r2, r3
 8003c18:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <PDM_Read_Data+0x346>
			Data_Buffer[0] = __PDM_CONVERT_VOLTAGE(ADC_BUFFER[0], ADC_BUFFER[8]);
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <PDM_Read_Data+0x380>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <PDM_Read_Data+0x380>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 22c4 	movw	r2, #4804	; 0x12c4
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <PDM_Read_Data+0x384>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0b5b      	lsrs	r3, r3, #13
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <PDM_Read_Data+0x388>)
 8003c40:	801a      	strh	r2, [r3, #0]
		break;
 8003c42:	bf00      	nop
	}

	Data_Buffer[25] = __PDM_CONVERT_MCU_TEMPERATURE(ADC_BUFFER[9]);
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <PDM_Read_Data+0x380>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f647 52ea 	movw	r2, #32234	; 0x7dea
 8003c4c:	fb02 f203 	mul.w	r2, r2, r3
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <PDM_Read_Data+0x390>)
 8003c52:	4413      	add	r3, r2
 8003c54:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <PDM_Read_Data+0x394>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <PDM_Read_Data+0x388>)
 8003c60:	865a      	strh	r2, [r3, #50]	; 0x32

	PDM_Next_Data_Conversion(*data_read);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fdea 	bl	8003840 <PDM_Next_Data_Conversion>

	return HAL_TIM_Base_Start_IT(&htim7);
 8003c6c:	4809      	ldr	r0, [pc, #36]	; (8003c94 <PDM_Read_Data+0x398>)
 8003c6e:	f007 fc6f 	bl	800b550 <HAL_TIM_Base_Start_IT>
 8003c72:	4603      	mov	r3, r0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000ea8 	.word	0x20000ea8
 8003c80:	d1b71759 	.word	0xd1b71759
 8003c84:	20001230 	.word	0x20001230
 8003c88:	20001164 	.word	0x20001164
 8003c8c:	ffd56d90 	.word	0xffd56d90
 8003c90:	10624dd3 	.word	0x10624dd3
 8003c94:	2000126c 	.word	0x2000126c

08003c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_MspInit+0x4c>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6b      	ldr	r2, [pc, #428]	; (8003eb4 <HAL_ADC_MspInit+0x1cc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d158      	bne.n	8003dbc <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	4a69      	ldr	r2, [pc, #420]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1a:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b60      	ldr	r3, [pc, #384]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8003d42:	230f      	movs	r3, #15
 8003d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d46:	2303      	movs	r3, #3
 8003d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4e:	f107 031c 	add.w	r3, r7, #28
 8003d52:	4619      	mov	r1, r3
 8003d54:	4859      	ldr	r0, [pc, #356]	; (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003d56:	f002 fa69 	bl	800622c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003d5a:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d5c:	4a59      	ldr	r2, [pc, #356]	; (8003ec4 <HAL_ADC_MspInit+0x1dc>)
 8003d5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003d60:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d66:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6c:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d72:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d7a:	4b51      	ldr	r3, [pc, #324]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d82:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d92:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d98:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d9e:	4848      	ldr	r0, [pc, #288]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003da0:	f001 fe98 	bl	8005ad4 <HAL_DMA_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003daa:	f7fd fa71 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a43      	ldr	r2, [pc, #268]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003dba:	e077      	b.n	8003eac <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a41      	ldr	r2, [pc, #260]	; (8003ec8 <HAL_ADC_MspInit+0x1e0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d172      	bne.n	8003eac <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a33      	ldr	r2, [pc, #204]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG5_Pin|ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8003e1a:	23f0      	movs	r3, #240	; 0xf0
 8003e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e26:	f107 031c 	add.w	r3, r7, #28
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4823      	ldr	r0, [pc, #140]	; (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e2e:	f002 f9fd 	bl	800622c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8003e32:	2310      	movs	r3, #16
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e36:	2303      	movs	r3, #3
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	4619      	mov	r1, r3
 8003e44:	4821      	ldr	r0, [pc, #132]	; (8003ecc <HAL_ADC_MspInit+0x1e4>)
 8003e46:	f002 f9f1 	bl	800622c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e4c:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <HAL_ADC_MspInit+0x1ec>)
 8003e4e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003e50:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e56:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e6a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e72:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e7a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e82:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e90:	480f      	ldr	r0, [pc, #60]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003e92:	f001 fe1f 	bl	8005ad4 <HAL_DMA_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8003e9c:	f7fd f9f8 	bl	8001290 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <HAL_ADC_MspInit+0x1e8>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003eac:	bf00      	nop
 8003eae:	3730      	adds	r7, #48	; 0x30
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40012000 	.word	0x40012000
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	20000f54 	.word	0x20000f54
 8003ec4:	40026410 	.word	0x40026410
 8003ec8:	40012100 	.word	0x40012100
 8003ecc:	40020800 	.word	0x40020800
 8003ed0:	200011a4 	.word	0x200011a4
 8003ed4:	40026440 	.word	0x40026440

08003ed8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_CAN_MspInit+0x94>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d134      	bne.n	8003f64 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_CAN_MspInit+0x98>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_CAN_MspInit+0x98>)
 8003f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_CAN_MspInit+0x98>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_CAN_MspInit+0x98>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_CAN_MspInit+0x98>)
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	6313      	str	r3, [r2, #48]	; 0x30
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_CAN_MspInit+0x98>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f40:	2303      	movs	r3, #3
 8003f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f44:	2309      	movs	r3, #9
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4809      	ldr	r0, [pc, #36]	; (8003f74 <HAL_CAN_MspInit+0x9c>)
 8003f50:	f002 f96c 	bl	800622c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2100      	movs	r1, #0
 8003f58:	2014      	movs	r0, #20
 8003f5a:	f001 fd36 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f5e:	2014      	movs	r0, #20
 8003f60:	f001 fd4f 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003f64:	bf00      	nop
 8003f66:	3728      	adds	r7, #40	; 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40006400 	.word	0x40006400
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020400 	.word	0x40020400

08003f78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0b      	ldr	r2, [pc, #44]	; (8003fb4 <HAL_CRC_MspInit+0x3c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10d      	bne.n	8003fa6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_CRC_MspInit+0x40>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_CRC_MspInit+0x40>)
 8003f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_CRC_MspInit+0x40>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40023000 	.word	0x40023000
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a34      	ldr	r2, [pc, #208]	; (80040ac <HAL_I2C_MspInit+0xf0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d161      	bne.n	80040a2 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <HAL_I2C_MspInit+0xf4>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <HAL_I2C_MspInit+0xf4>)
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <HAL_I2C_MspInit+0xf4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ffa:	23c0      	movs	r3, #192	; 0xc0
 8003ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffe:	2312      	movs	r3, #18
 8004000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800400a:	2304      	movs	r3, #4
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4619      	mov	r1, r3
 8004014:	4827      	ldr	r0, [pc, #156]	; (80040b4 <HAL_I2C_MspInit+0xf8>)
 8004016:	f002 f909 	bl	800622c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_I2C_MspInit+0xf4>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <HAL_I2C_MspInit+0xf4>)
 8004024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_I2C_MspInit+0xf4>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <HAL_I2C_MspInit+0x100>)
 800403a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 800403e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004042:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004046:	2240      	movs	r2, #64	; 0x40
 8004048:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 800404c:	2200      	movs	r2, #0
 800404e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004056:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 800405a:	2200      	movs	r2, #0
 800405c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 800406c:	2200      	movs	r2, #0
 800406e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004072:	2200      	movs	r2, #0
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004076:	4810      	ldr	r0, [pc, #64]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 8004078:	f001 fd2c 	bl	8005ad4 <HAL_DMA_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8004082:	f7fd f905 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 800408a:	635a      	str	r2, [r3, #52]	; 0x34
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <HAL_I2C_MspInit+0xfc>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	201f      	movs	r0, #31
 8004098:	f001 fc97 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800409c:	201f      	movs	r0, #31
 800409e:	f001 fcb0 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040a2:	bf00      	nop
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40005400 	.word	0x40005400
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020400 	.word	0x40020400
 80040b8:	20000470 	.word	0x20000470
 80040bc:	400260a0 	.word	0x400260a0

080040c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3e      	ldr	r2, [pc, #248]	; (80041c8 <HAL_TIM_Base_MspInit+0x108>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d116      	bne.n	8004100 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4a3c      	ldr	r2, [pc, #240]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6453      	str	r3, [r2, #68]	; 0x44
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80040ee:	2200      	movs	r2, #0
 80040f0:	2100      	movs	r1, #0
 80040f2:	2019      	movs	r0, #25
 80040f4:	f001 fc69 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80040f8:	2019      	movs	r0, #25
 80040fa:	f001 fc82 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80040fe:	e05e      	b.n	80041be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	69bb      	ldr	r3, [r7, #24]
}
 8004126:	e04a      	b.n	80041be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <HAL_TIM_Base_MspInit+0x110>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	697b      	ldr	r3, [r7, #20]
}
 800414e:	e036      	b.n	80041be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM6)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <HAL_TIM_Base_MspInit+0x114>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d116      	bne.n	8004188 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004164:	f043 0310 	orr.w	r3, r3, #16
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	2036      	movs	r0, #54	; 0x36
 800417c:	f001 fc25 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004180:	2036      	movs	r0, #54	; 0x36
 8004182:	f001 fc3e 	bl	8005a02 <HAL_NVIC_EnableIRQ>
}
 8004186:	e01a      	b.n	80041be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <HAL_TIM_Base_MspInit+0x118>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d115      	bne.n	80041be <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 800419c:	f043 0320 	orr.w	r3, r3, #32
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_TIM_Base_MspInit+0x10c>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	2037      	movs	r0, #55	; 0x37
 80041b4:	f001 fc09 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041b8:	2037      	movs	r0, #55	; 0x37
 80041ba:	f001 fc22 	bl	8005a02 <HAL_NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40001000 	.word	0x40001000
 80041d8:	40001400 	.word	0x40001400

080041dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <HAL_TIM_PWM_MspInit+0x3c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_TIM_PWM_MspInit+0x40>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_TIM_PWM_MspInit+0x40>)
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	6453      	str	r3, [r2, #68]	; 0x44
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_TIM_PWM_MspInit+0x40>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010400 	.word	0x40010400
 800421c:	40023800 	.word	0x40023800

08004220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	; 0x30
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	f107 031c 	add.w	r3, r7, #28
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a49      	ldr	r2, [pc, #292]	; (8004364 <HAL_TIM_MspPostInit+0x144>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d11f      	bne.n	8004282 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	4b48      	ldr	r3, [pc, #288]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a47      	ldr	r2, [pc, #284]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 800424c:	f043 0310 	orr.w	r3, r3, #16
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b45      	ldr	r3, [pc, #276]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 800425e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004270:	2301      	movs	r3, #1
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8004274:	f107 031c 	add.w	r3, r7, #28
 8004278:	4619      	mov	r1, r3
 800427a:	483c      	ldr	r0, [pc, #240]	; (800436c <HAL_TIM_MspPostInit+0x14c>)
 800427c:	f001 ffd6 	bl	800622c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004280:	e06b      	b.n	800435a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d11f      	bne.n	80042cc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	4a34      	ldr	r2, [pc, #208]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004296:	f043 0302 	orr.w	r3, r3, #2
 800429a:	6313      	str	r3, [r2, #48]	; 0x30
 800429c:	4b32      	ldr	r3, [pc, #200]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 80042a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042ba:	2301      	movs	r3, #1
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	482a      	ldr	r0, [pc, #168]	; (8004370 <HAL_TIM_MspPostInit+0x150>)
 80042c6:	f001 ffb1 	bl	800622c <HAL_GPIO_Init>
}
 80042ca:	e046      	b.n	800435a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a28      	ldr	r2, [pc, #160]	; (8004374 <HAL_TIM_MspPostInit+0x154>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d11e      	bne.n	8004314 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80042f2:	2302      	movs	r3, #2
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	2300      	movs	r3, #0
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004302:	2302      	movs	r3, #2
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8004306:	f107 031c 	add.w	r3, r7, #28
 800430a:	4619      	mov	r1, r3
 800430c:	4818      	ldr	r0, [pc, #96]	; (8004370 <HAL_TIM_MspPostInit+0x150>)
 800430e:	f001 ff8d 	bl	800622c <HAL_GPIO_Init>
}
 8004312:	e022      	b.n	800435a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <HAL_TIM_MspPostInit+0x158>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d11d      	bne.n	800435a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_TIM_MspPostInit+0x148>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 800433a:	2301      	movs	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433e:	2302      	movs	r3, #2
 8004340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004346:	2300      	movs	r3, #0
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800434a:	2303      	movs	r3, #3
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 800434e:	f107 031c 	add.w	r3, r7, #28
 8004352:	4619      	mov	r1, r3
 8004354:	4806      	ldr	r0, [pc, #24]	; (8004370 <HAL_TIM_MspPostInit+0x150>)
 8004356:	f001 ff69 	bl	800622c <HAL_GPIO_Init>
}
 800435a:	bf00      	nop
 800435c:	3730      	adds	r7, #48	; 0x30
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40023800 	.word	0x40023800
 800436c:	40021000 	.word	0x40021000
 8004370:	40020400 	.word	0x40020400
 8004374:	40000400 	.word	0x40000400
 8004378:	40010400 	.word	0x40010400

0800437c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004380:	e7fe      	b.n	8004380 <NMI_Handler+0x4>

08004382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004386:	e7fe      	b.n	8004386 <HardFault_Handler+0x4>

08004388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800438c:	e7fe      	b.n	800438c <MemManage_Handler+0x4>

0800438e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004392:	e7fe      	b.n	8004392 <BusFault_Handler+0x4>

08004394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004398:	e7fe      	b.n	8004398 <UsageFault_Handler+0x4>

0800439a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043c8:	f000 f940 	bl	800464c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80043d4:	2001      	movs	r0, #1
 80043d6:	f002 f909 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}

080043de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80043e2:	2002      	movs	r0, #2
 80043e4:	f002 f902 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}

080043ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80043f0:	2004      	movs	r0, #4
 80043f2:	f002 f8fb 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}

080043fa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80043fe:	2008      	movs	r0, #8
 8004400:	f002 f8f4 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}

08004408 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800440c:	2010      	movs	r0, #16
 800440e:	f002 f8ed 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800441c:	4802      	ldr	r0, [pc, #8]	; (8004428 <DMA1_Stream6_IRQHandler+0x10>)
 800441e:	f001 fc81 	bl	8005d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000470 	.word	0x20000470

0800442c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004430:	4802      	ldr	r0, [pc, #8]	; (800443c <CAN1_RX0_IRQHandler+0x10>)
 8004432:	f000 ffbf 	bl	80053b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20001204 	.word	0x20001204

08004440 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004444:	2020      	movs	r0, #32
 8004446:	f002 f8d1 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800444a:	2040      	movs	r0, #64	; 0x40
 800444c:	f002 f8ce 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004450:	2080      	movs	r0, #128	; 0x80
 8004452:	f002 f8cb 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004456:	f44f 7080 	mov.w	r0, #256	; 0x100
 800445a:	f002 f8c7 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800445e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004462:	f002 f8c3 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004472:	f007 fa23 	bl	800b8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20001004 	.word	0x20001004

08004480 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <I2C1_EV_IRQHandler+0x10>)
 8004486:	f002 fd95 	bl	8006fb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200004d0 	.word	0x200004d0

08004494 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004498:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800449c:	f002 f8a6 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80044a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044a4:	f002 f8a2 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80044a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80044ac:	f002 f89e 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80044b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044b4:	f002 f89a 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80044b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044bc:	f002 f896 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80044c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044c4:	f002 f892 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}

080044cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <TIM6_DAC_IRQHandler+0x10>)
 80044d2:	f007 f9f3 	bl	800b8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000fb8 	.word	0x20000fb8

080044e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044e4:	4802      	ldr	r0, [pc, #8]	; (80044f0 <TIM7_IRQHandler+0x10>)
 80044e6:	f007 f9e9 	bl	800b8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000126c 	.word	0x2000126c

080044f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <DMA2_Stream0_IRQHandler+0x10>)
 80044fa:	f001 fc13 	bl	8005d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000f54 	.word	0x20000f54

08004508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <DMA2_Stream2_IRQHandler+0x10>)
 800450e:	f001 fc09 	bl	8005d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200011a4 	.word	0x200011a4

0800451c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <OTG_FS_IRQHandler+0x10>)
 8004522:	f004 fe7c 	bl	800921e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20002794 	.word	0x20002794

08004530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <SystemInit+0x20>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	4a05      	ldr	r2, [pc, #20]	; (8004550 <SystemInit+0x20>)
 800453c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800458c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004558:	480d      	ldr	r0, [pc, #52]	; (8004590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800455a:	490e      	ldr	r1, [pc, #56]	; (8004594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800455c:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0b      	ldr	r2, [pc, #44]	; (800459c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004570:	4c0b      	ldr	r4, [pc, #44]	; (80045a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800457e:	f7ff ffd7 	bl	8004530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004582:	f00b fe6f 	bl	8010264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004586:	f7fc f801 	bl	800058c <main>
  bx  lr    
 800458a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800458c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004594:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8004598:	0801034c 	.word	0x0801034c
  ldr r2, =_sbss
 800459c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80045a0:	20002b9c 	.word	0x20002b9c

080045a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a4:	e7fe      	b.n	80045a4 <ADC_IRQHandler>
	...

080045a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_Init+0x40>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <HAL_Init+0x40>)
 80045b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_Init+0x40>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <HAL_Init+0x40>)
 80045be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_Init+0x40>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <HAL_Init+0x40>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d0:	2003      	movs	r0, #3
 80045d2:	f001 f9ef 	bl	80059b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045d6:	200f      	movs	r0, #15
 80045d8:	f000 f808 	bl	80045ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045dc:	f7ff fb5c 	bl	8003c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00

080045ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_InitTick+0x54>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_InitTick+0x58>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004602:	fbb3 f3f1 	udiv	r3, r3, r1
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fa07 	bl	8005a1e <HAL_SYSTICK_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e00e      	b.n	8004638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0f      	cmp	r3, #15
 800461e:	d80a      	bhi.n	8004636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004620:	2200      	movs	r2, #0
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f001 f9cf 	bl	80059ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800462c:	4a06      	ldr	r2, [pc, #24]	; (8004648 <HAL_InitTick+0x5c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000000 	.word	0x20000000
 8004644:	20000008 	.word	0x20000008
 8004648:	20000004 	.word	0x20000004

0800464c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_IncTick+0x20>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_IncTick+0x24>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4413      	add	r3, r2
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <HAL_IncTick+0x24>)
 800465e:	6013      	str	r3, [r2, #0]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000008 	.word	0x20000008
 8004670:	200012c0 	.word	0x200012c0

08004674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return uwTick;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_GetTick+0x14>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	200012c0 	.word	0x200012c0

0800468c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff ffee 	bl	8004674 <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d005      	beq.n	80046b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <HAL_Delay+0x44>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046b2:	bf00      	nop
 80046b4:	f7ff ffde 	bl	8004674 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d8f7      	bhi.n	80046b4 <HAL_Delay+0x28>
  {
  }
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000008 	.word	0x20000008

080046d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e033      	b.n	8004752 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff faf8 	bl	8003ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800471a:	f023 0302 	bic.w	r3, r3, #2
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f94a 	bl	80049c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
 8004742:	e001      	b.n	8004748 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x1c>
 8004774:	2302      	movs	r3, #2
 8004776:	e113      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x244>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b09      	cmp	r3, #9
 8004786:	d925      	bls.n	80047d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68d9      	ldr	r1, [r3, #12]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	3b1e      	subs	r3, #30
 800479e:	2207      	movs	r2, #7
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43da      	mvns	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	400a      	ands	r2, r1
 80047ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68d9      	ldr	r1, [r3, #12]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	4618      	mov	r0, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4403      	add	r3, r0
 80047c6:	3b1e      	subs	r3, #30
 80047c8:	409a      	lsls	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	e022      	b.n	800481a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6919      	ldr	r1, [r3, #16]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	2207      	movs	r2, #7
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	400a      	ands	r2, r1
 80047f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6919      	ldr	r1, [r3, #16]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	4618      	mov	r0, r3
 800480a:	4603      	mov	r3, r0
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4403      	add	r3, r0
 8004810:	409a      	lsls	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d824      	bhi.n	800486c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	3b05      	subs	r3, #5
 8004834:	221f      	movs	r2, #31
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43da      	mvns	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	400a      	ands	r2, r1
 8004842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	4618      	mov	r0, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	3b05      	subs	r3, #5
 800485e:	fa00 f203 	lsl.w	r2, r0, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	635a      	str	r2, [r3, #52]	; 0x34
 800486a:	e04c      	b.n	8004906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d824      	bhi.n	80048be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	3b23      	subs	r3, #35	; 0x23
 8004886:	221f      	movs	r2, #31
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43da      	mvns	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	400a      	ands	r2, r1
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4618      	mov	r0, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	3b23      	subs	r3, #35	; 0x23
 80048b0:	fa00 f203 	lsl.w	r2, r0, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
 80048bc:	e023      	b.n	8004906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	3b41      	subs	r3, #65	; 0x41
 80048d0:	221f      	movs	r2, #31
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43da      	mvns	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	400a      	ands	r2, r1
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4618      	mov	r0, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	3b41      	subs	r3, #65	; 0x41
 80048fa:	fa00 f203 	lsl.w	r2, r0, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_ADC_ConfigChannel+0x250>)
 8004908:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <HAL_ADC_ConfigChannel+0x254>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10f      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x1d8>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b12      	cmp	r3, #18
 800491a:	d10b      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_ADC_ConfigChannel+0x254>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d12b      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x23a>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_ADC_ConfigChannel+0x258>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <HAL_ADC_ConfigChannel+0x1f4>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b11      	cmp	r3, #17
 800494e:	d122      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <HAL_ADC_ConfigChannel+0x258>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <HAL_ADC_ConfigChannel+0x25c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <HAL_ADC_ConfigChannel+0x260>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	0c9a      	lsrs	r2, r3, #18
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004988:	e002      	b.n	8004990 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3b01      	subs	r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f9      	bne.n	800498a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012300 	.word	0x40012300
 80049b0:	40012000 	.word	0x40012000
 80049b4:	10000012 	.word	0x10000012
 80049b8:	20000000 	.word	0x20000000
 80049bc:	431bde83 	.word	0x431bde83

080049c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049c8:	4b79      	ldr	r3, [pc, #484]	; (8004bb0 <ADC_Init+0x1f0>)
 80049ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	021a      	lsls	r2, r3, #8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	4a58      	ldr	r2, [pc, #352]	; (8004bb4 <ADC_Init+0x1f4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6899      	ldr	r1, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e00f      	b.n	8004abe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0202 	bic.w	r2, r2, #2
 8004acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6899      	ldr	r1, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7e1b      	ldrb	r3, [r3, #24]
 8004ad8:	005a      	lsls	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	3b01      	subs	r3, #1
 8004b18:	035a      	lsls	r2, r3, #13
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	e007      	b.n	8004b34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	051a      	lsls	r2, r3, #20
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b76:	025a      	lsls	r2, r3, #9
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	029a      	lsls	r2, r3, #10
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40012300 	.word	0x40012300
 8004bb4:	0f000001 	.word	0x0f000001

08004bb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0ed      	b.n	8004da6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff f97e 	bl	8003ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bec:	f7ff fd42 	bl	8004674 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bf2:	e012      	b.n	8004c1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bf4:	f7ff fd3e 	bl	8004674 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b0a      	cmp	r3, #10
 8004c00:	d90b      	bls.n	8004c1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2205      	movs	r2, #5
 8004c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0c5      	b.n	8004da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0e5      	beq.n	8004bf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0202 	bic.w	r2, r2, #2
 8004c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c38:	f7ff fd1c 	bl	8004674 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c3e:	e012      	b.n	8004c66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c40:	f7ff fd18 	bl	8004674 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b0a      	cmp	r3, #10
 8004c4c:	d90b      	bls.n	8004c66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2205      	movs	r2, #5
 8004c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e09f      	b.n	8004da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7e1b      	ldrb	r3, [r3, #24]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d108      	bne.n	8004c8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e007      	b.n	8004c9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7e5b      	ldrb	r3, [r3, #25]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e007      	b.n	8004cc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7e9b      	ldrb	r3, [r3, #26]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d108      	bne.n	8004ce2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0220 	orr.w	r2, r2, #32
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e007      	b.n	8004cf2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0220 	bic.w	r2, r2, #32
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7edb      	ldrb	r3, [r3, #27]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d108      	bne.n	8004d0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0210 	bic.w	r2, r2, #16
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e007      	b.n	8004d1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0210 	orr.w	r2, r2, #16
 8004d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7f1b      	ldrb	r3, [r3, #28]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d108      	bne.n	8004d36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0208 	orr.w	r2, r2, #8
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e007      	b.n	8004d46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0208 	bic.w	r2, r2, #8
 8004d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7f5b      	ldrb	r3, [r3, #29]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d108      	bne.n	8004d60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0204 	orr.w	r2, r2, #4
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e007      	b.n	8004d70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0204 	bic.w	r2, r2, #4
 8004d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	ea42 0103 	orr.w	r1, r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d003      	beq.n	8004dd6 <HAL_CAN_ConfigFilter+0x26>
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f040 80be 	bne.w	8004f52 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004dd6:	4b65      	ldr	r3, [pc, #404]	; (8004f6c <HAL_CAN_ConfigFilter+0x1bc>)
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004df0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	431a      	orrs	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2201      	movs	r2, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	401a      	ands	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d123      	bne.n	8004e80 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	401a      	ands	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3248      	adds	r2, #72	; 0x48
 8004e60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e76:	6979      	ldr	r1, [r7, #20]
 8004e78:	3348      	adds	r3, #72	; 0x48
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d122      	bne.n	8004ece <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ea8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3248      	adds	r2, #72	; 0x48
 8004eae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ec4:	6979      	ldr	r1, [r7, #20]
 8004ec6:	3348      	adds	r3, #72	; 0x48
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	440b      	add	r3, r1
 8004ecc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ee8:	e007      	b.n	8004efa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004f14:	e007      	b.n	8004f26 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f44:	f023 0201 	bic.w	r2, r3, #1
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e006      	b.n	8004f60 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40006400 	.word	0x40006400

08004f70 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d003      	beq.n	8004f9c <HAL_CAN_AddTxMessage+0x2c>
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	f040 80b8 	bne.w	800510c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80a0 	beq.w	80050fc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	0e1b      	lsrs	r3, r3, #24
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d907      	bls.n	8004fdc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e09e      	b.n	800511a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004fdc:	2201      	movs	r2, #1
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	6809      	ldr	r1, [r1, #0]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	3318      	adds	r3, #24
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	440b      	add	r3, r1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e00f      	b.n	800502a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005014:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800501e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3318      	adds	r3, #24
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	440b      	add	r3, r1
 8005028:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3318      	adds	r3, #24
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	440b      	add	r3, r1
 800503a:	3304      	adds	r3, #4
 800503c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	7d1b      	ldrb	r3, [r3, #20]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d111      	bne.n	800506a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3318      	adds	r3, #24
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6811      	ldr	r1, [r2, #0]
 800505a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	3318      	adds	r3, #24
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	440b      	add	r3, r1
 8005066:	3304      	adds	r3, #4
 8005068:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3307      	adds	r3, #7
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	061a      	lsls	r2, r3, #24
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3306      	adds	r3, #6
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3305      	adds	r3, #5
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	4313      	orrs	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	3204      	adds	r2, #4
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	4610      	mov	r0, r2
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	6811      	ldr	r1, [r2, #0]
 8005092:	ea43 0200 	orr.w	r2, r3, r0
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	440b      	add	r3, r1
 800509c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80050a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3303      	adds	r3, #3
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	061a      	lsls	r2, r3, #24
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3302      	adds	r3, #2
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	4313      	orrs	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	4610      	mov	r0, r2
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	6811      	ldr	r1, [r2, #0]
 80050c8:	ea43 0200 	orr.w	r2, r3, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	440b      	add	r3, r1
 80050d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3318      	adds	r3, #24
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	4413      	add	r3, r2
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3318      	adds	r3, #24
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	440b      	add	r3, r1
 80050f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e00e      	b.n	800511a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e006      	b.n	800511a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	3724      	adds	r7, #36	; 0x24
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005138:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800513a:	7afb      	ldrb	r3, [r7, #11]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d002      	beq.n	8005146 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d11d      	bne.n	8005182 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005182:	68fb      	ldr	r3, [r7, #12]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d003      	beq.n	80051b4 <HAL_CAN_GetRxMessage+0x24>
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	f040 80f3 	bne.w	800539a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10e      	bne.n	80051d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d116      	bne.n	80051f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0e7      	b.n	80053a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0d8      	b.n	80053a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	331b      	adds	r3, #27
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	4413      	add	r3, r2
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0204 	and.w	r2, r3, #4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	331b      	adds	r3, #27
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	4413      	add	r3, r2
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	0d5b      	lsrs	r3, r3, #21
 8005224:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e00b      	b.n	8005246 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	331b      	adds	r3, #27
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4413      	add	r3, r2
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	331b      	adds	r3, #27
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	4413      	add	r3, r2
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0202 	and.w	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	331b      	adds	r3, #27
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 020f 	and.w	r2, r3, #15
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	331b      	adds	r3, #27
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	4413      	add	r3, r2
 8005280:	3304      	adds	r3, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	b2da      	uxtb	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	331b      	adds	r3, #27
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	4413      	add	r3, r2
 8005298:	3304      	adds	r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	b29a      	uxth	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	0a1a      	lsrs	r2, r3, #8
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	4413      	add	r3, r2
 80052de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	0c1a      	lsrs	r2, r3, #16
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	3302      	adds	r3, #2
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	0e1a      	lsrs	r2, r3, #24
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	3303      	adds	r3, #3
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	4413      	add	r3, r2
 8005312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	3304      	adds	r3, #4
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	4413      	add	r3, r2
 800532a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0a1a      	lsrs	r2, r3, #8
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	3305      	adds	r3, #5
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	4413      	add	r3, r2
 8005344:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	0c1a      	lsrs	r2, r3, #16
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	3306      	adds	r3, #6
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	4413      	add	r3, r2
 800535e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	0e1a      	lsrs	r2, r3, #24
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	3307      	adds	r3, #7
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d108      	bne.n	8005386 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0220 	orr.w	r2, r2, #32
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e007      	b.n	8005396 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0220 	orr.w	r2, r2, #32
 8005394:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e006      	b.n	80053a8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d07c      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d023      	beq.n	800544c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f983 	bl	8005722 <HAL_CAN_TxMailbox0CompleteCallback>
 800541c:	e016      	b.n	800544c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
 8005430:	e00c      	b.n	800544c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
 8005444:	e002      	b.n	800544c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f989 	bl	800575e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d024      	beq.n	80054a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800545e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f963 	bl	8005736 <HAL_CAN_TxMailbox1CompleteCallback>
 8005470:	e016      	b.n	80054a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
 8005484:	e00c      	b.n	80054a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
 8005498:	e002      	b.n	80054a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f969 	bl	8005772 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d024      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f943 	bl	800574a <HAL_CAN_TxMailbox2CompleteCallback>
 80054c4:	e016      	b.n	80054f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	e00c      	b.n	80054f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
 80054ec:	e002      	b.n	80054f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f949 	bl	8005786 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800550e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2210      	movs	r2, #16
 8005516:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2208      	movs	r2, #8
 8005532:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f930 	bl	800579a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d009      	beq.n	8005558 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fd fb76 	bl	8002c44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2210      	movs	r2, #16
 800557a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2208      	movs	r2, #8
 8005596:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f912 	bl	80057c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8f9 	bl	80057ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2210      	movs	r2, #16
 80055d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f8fc 	bl	80057d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d006      	beq.n	8005600 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2208      	movs	r2, #8
 80055f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8f5 	bl	80057ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d07b      	beq.n	8005702 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d072      	beq.n	80056fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566e:	2b00      	cmp	r3, #0
 8005670:	d043      	beq.n	80056fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005678:	2b00      	cmp	r3, #0
 800567a:	d03e      	beq.n	80056fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005682:	2b60      	cmp	r3, #96	; 0x60
 8005684:	d02b      	beq.n	80056de <HAL_CAN_IRQHandler+0x32a>
 8005686:	2b60      	cmp	r3, #96	; 0x60
 8005688:	d82e      	bhi.n	80056e8 <HAL_CAN_IRQHandler+0x334>
 800568a:	2b50      	cmp	r3, #80	; 0x50
 800568c:	d022      	beq.n	80056d4 <HAL_CAN_IRQHandler+0x320>
 800568e:	2b50      	cmp	r3, #80	; 0x50
 8005690:	d82a      	bhi.n	80056e8 <HAL_CAN_IRQHandler+0x334>
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d019      	beq.n	80056ca <HAL_CAN_IRQHandler+0x316>
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d826      	bhi.n	80056e8 <HAL_CAN_IRQHandler+0x334>
 800569a:	2b30      	cmp	r3, #48	; 0x30
 800569c:	d010      	beq.n	80056c0 <HAL_CAN_IRQHandler+0x30c>
 800569e:	2b30      	cmp	r3, #48	; 0x30
 80056a0:	d822      	bhi.n	80056e8 <HAL_CAN_IRQHandler+0x334>
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d002      	beq.n	80056ac <HAL_CAN_IRQHandler+0x2f8>
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d005      	beq.n	80056b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056aa:	e01d      	b.n	80056e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056b4:	e019      	b.n	80056ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	f043 0310 	orr.w	r3, r3, #16
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056be:	e014      	b.n	80056ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	f043 0320 	orr.w	r3, r3, #32
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056c8:	e00f      	b.n	80056ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056d2:	e00a      	b.n	80056ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056dc:	e005      	b.n	80056ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056e6:	e000      	b.n	80056ea <HAL_CAN_IRQHandler+0x336>
            break;
 80056e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2204      	movs	r2, #4
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f872 	bl	80057fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800571a:	bf00      	nop
 800571c:	3728      	adds	r7, #40	; 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <__NVIC_SetPriorityGrouping+0x44>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005830:	4013      	ands	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800583c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005846:	4a04      	ldr	r2, [pc, #16]	; (8005858 <__NVIC_SetPriorityGrouping+0x44>)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	60d3      	str	r3, [r2, #12]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <__NVIC_GetPriorityGrouping+0x18>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	f003 0307 	and.w	r3, r3, #7
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	db0b      	blt.n	80058a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	f003 021f 	and.w	r2, r3, #31
 8005890:	4907      	ldr	r1, [pc, #28]	; (80058b0 <__NVIC_EnableIRQ+0x38>)
 8005892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2001      	movs	r0, #1
 800589a:	fa00 f202 	lsl.w	r2, r0, r2
 800589e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	e000e100 	.word	0xe000e100

080058b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	6039      	str	r1, [r7, #0]
 80058be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	db0a      	blt.n	80058de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	490c      	ldr	r1, [pc, #48]	; (8005900 <__NVIC_SetPriority+0x4c>)
 80058ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	440b      	add	r3, r1
 80058d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058dc:	e00a      	b.n	80058f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	4908      	ldr	r1, [pc, #32]	; (8005904 <__NVIC_SetPriority+0x50>)
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	3b04      	subs	r3, #4
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	440b      	add	r3, r1
 80058f2:	761a      	strb	r2, [r3, #24]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	e000e100 	.word	0xe000e100
 8005904:	e000ed00 	.word	0xe000ed00

08005908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f1c3 0307 	rsb	r3, r3, #7
 8005922:	2b04      	cmp	r3, #4
 8005924:	bf28      	it	cs
 8005926:	2304      	movcs	r3, #4
 8005928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3304      	adds	r3, #4
 800592e:	2b06      	cmp	r3, #6
 8005930:	d902      	bls.n	8005938 <NVIC_EncodePriority+0x30>
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3b03      	subs	r3, #3
 8005936:	e000      	b.n	800593a <NVIC_EncodePriority+0x32>
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43da      	mvns	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	401a      	ands	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005950:	f04f 31ff 	mov.w	r1, #4294967295
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	43d9      	mvns	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005960:	4313      	orrs	r3, r2
         );
}
 8005962:	4618      	mov	r0, r3
 8005964:	3724      	adds	r7, #36	; 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3b01      	subs	r3, #1
 800597c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005980:	d301      	bcc.n	8005986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005982:	2301      	movs	r3, #1
 8005984:	e00f      	b.n	80059a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005986:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <SysTick_Config+0x40>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3b01      	subs	r3, #1
 800598c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800598e:	210f      	movs	r1, #15
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	f7ff ff8e 	bl	80058b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <SysTick_Config+0x40>)
 800599a:	2200      	movs	r2, #0
 800599c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800599e:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <SysTick_Config+0x40>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	e000e010 	.word	0xe000e010

080059b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ff29 	bl	8005814 <__NVIC_SetPriorityGrouping>
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4603      	mov	r3, r0
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
 80059d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059dc:	f7ff ff3e 	bl	800585c <__NVIC_GetPriorityGrouping>
 80059e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	6978      	ldr	r0, [r7, #20]
 80059e8:	f7ff ff8e 	bl	8005908 <NVIC_EncodePriority>
 80059ec:	4602      	mov	r2, r0
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ff5d 	bl	80058b4 <__NVIC_SetPriority>
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff31 	bl	8005878 <__NVIC_EnableIRQ>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ffa2 	bl	8005970 <SysTick_Config>
 8005a2c:	4603      	mov	r3, r0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e00e      	b.n	8005a66 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	795b      	ldrb	r3, [r3, #5]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d105      	bne.n	8005a5e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fe fa8d 	bl	8003f78 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2202      	movs	r2, #2
 8005a82:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e00a      	b.n	8005ab0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3301      	adds	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d3f0      	bcc.n	8005a9a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8005ac6:	693b      	ldr	r3, [r7, #16]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ae0:	f7fe fdc8 	bl	8004674 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e099      	b.n	8005c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b10:	e00f      	b.n	8005b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b12:	f7fe fdaf 	bl	8004674 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d908      	bls.n	8005b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2203      	movs	r2, #3
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e078      	b.n	8005c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e8      	bne.n	8005b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4b38      	ldr	r3, [pc, #224]	; (8005c2c <HAL_DMA_Init+0x158>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d107      	bne.n	8005b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	4313      	orrs	r3, r2
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d117      	bne.n	8005bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 faab 	bl	8006134 <DMA_CheckFifoParam>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e016      	b.n	8005c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa62 	bl	80060c8 <DMA_CalcBaseAndBitshift>
 8005c04:	4603      	mov	r3, r0
 8005c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0c:	223f      	movs	r2, #63	; 0x3f
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	f010803f 	.word	0xf010803f

08005c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_DMA_Start_IT+0x26>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e040      	b.n	8005cd8 <HAL_DMA_Start_IT+0xa8>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d12f      	bne.n	8005cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f9f4 	bl	800606c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	223f      	movs	r2, #63	; 0x3f
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0216 	orr.w	r2, r2, #22
 8005c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0208 	orr.w	r2, r2, #8
 8005cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	e005      	b.n	8005cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d004      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e00c      	b.n	8005d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2205      	movs	r2, #5
 8005d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d30:	4b92      	ldr	r3, [pc, #584]	; (8005f7c <HAL_DMA_IRQHandler+0x258>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a92      	ldr	r2, [pc, #584]	; (8005f80 <HAL_DMA_IRQHandler+0x25c>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	0a9b      	lsrs	r3, r3, #10
 8005d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4e:	2208      	movs	r2, #8
 8005d50:	409a      	lsls	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01a      	beq.n	8005d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0204 	bic.w	r2, r2, #4
 8005d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d88:	f043 0201 	orr.w	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	2201      	movs	r2, #1
 8005d96:	409a      	lsls	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d012      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db2:	2201      	movs	r2, #1
 8005db4:	409a      	lsls	r2, r3
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f043 0202 	orr.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	2204      	movs	r2, #4
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d012      	beq.n	8005dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	2204      	movs	r2, #4
 8005dea:	409a      	lsls	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df4:	f043 0204 	orr.w	r2, r3, #4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	2210      	movs	r2, #16
 8005e02:	409a      	lsls	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d043      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d03c      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	2210      	movs	r2, #16
 8005e20:	409a      	lsls	r2, r3
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d018      	beq.n	8005e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d108      	bne.n	8005e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d024      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
 8005e52:	e01f      	b.n	8005e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01b      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
 8005e64:	e016      	b.n	8005e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d107      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0208 	bic.w	r2, r2, #8
 8005e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e98:	2220      	movs	r2, #32
 8005e9a:	409a      	lsls	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 808e 	beq.w	8005fc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8086 	beq.w	8005fc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eba:	2220      	movs	r2, #32
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d136      	bne.n	8005f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0216 	bic.w	r2, r2, #22
 8005edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695a      	ldr	r2, [r3, #20]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <HAL_DMA_IRQHandler+0x1da>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0208 	bic.w	r2, r2, #8
 8005f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	223f      	movs	r2, #63	; 0x3f
 8005f14:	409a      	lsls	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d07d      	beq.n	800602e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
        }
        return;
 8005f3a:	e078      	b.n	800602e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01c      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d030      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
 8005f68:	e02b      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d027      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
 8005f7a:	e022      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x29e>
 8005f7c:	20000000 	.word	0x20000000
 8005f80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10f      	bne.n	8005fb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0210 	bic.w	r2, r2, #16
 8005fa0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d032      	beq.n	8006030 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d022      	beq.n	800601c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2205      	movs	r2, #5
 8005fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d307      	bcc.n	800600a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f2      	bne.n	8005fee <HAL_DMA_IRQHandler+0x2ca>
 8006008:	e000      	b.n	800600c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800600a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
 800602c:	e000      	b.n	8006030 <HAL_DMA_IRQHandler+0x30c>
        return;
 800602e:	bf00      	nop
    }
  }
}
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop

08006038 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006046:	b2db      	uxtb	r3, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d108      	bne.n	80060ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060aa:	e007      	b.n	80060bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	3b10      	subs	r3, #16
 80060d8:	4a14      	ldr	r2, [pc, #80]	; (800612c <DMA_CalcBaseAndBitshift+0x64>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060e2:	4a13      	ldr	r2, [pc, #76]	; (8006130 <DMA_CalcBaseAndBitshift+0x68>)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d909      	bls.n	800610a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	659a      	str	r2, [r3, #88]	; 0x58
 8006108:	e007      	b.n	800611a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	aaaaaaab 	.word	0xaaaaaaab
 8006130:	08010334 	.word	0x08010334

08006134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d11f      	bne.n	800618e <DMA_CheckFifoParam+0x5a>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b03      	cmp	r3, #3
 8006152:	d856      	bhi.n	8006202 <DMA_CheckFifoParam+0xce>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <DMA_CheckFifoParam+0x28>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	0800616d 	.word	0x0800616d
 8006160:	0800617f 	.word	0x0800617f
 8006164:	0800616d 	.word	0x0800616d
 8006168:	08006203 	.word	0x08006203
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d046      	beq.n	8006206 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800617c:	e043      	b.n	8006206 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006186:	d140      	bne.n	800620a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800618c:	e03d      	b.n	800620a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006196:	d121      	bne.n	80061dc <DMA_CheckFifoParam+0xa8>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d837      	bhi.n	800620e <DMA_CheckFifoParam+0xda>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <DMA_CheckFifoParam+0x70>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061bb 	.word	0x080061bb
 80061ac:	080061b5 	.word	0x080061b5
 80061b0:	080061cd 	.word	0x080061cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
      break;
 80061b8:	e030      	b.n	800621c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d025      	beq.n	8006212 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ca:	e022      	b.n	8006212 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061d4:	d11f      	bne.n	8006216 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061da:	e01c      	b.n	8006216 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d903      	bls.n	80061ea <DMA_CheckFifoParam+0xb6>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d003      	beq.n	80061f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061e8:	e018      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	e015      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e00b      	b.n	800621a <DMA_CheckFifoParam+0xe6>
      break;
 8006202:	bf00      	nop
 8006204:	e00a      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      break;
 8006206:	bf00      	nop
 8006208:	e008      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      break;
 800620a:	bf00      	nop
 800620c:	e006      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      break;
 800620e:	bf00      	nop
 8006210:	e004      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      break;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      break;   
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <DMA_CheckFifoParam+0xe8>
      break;
 800621a:	bf00      	nop
    }
  } 
  
  return status; 
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	e165      	b.n	8006514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006248:	2201      	movs	r2, #1
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4013      	ands	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	429a      	cmp	r2, r3
 8006262:	f040 8154 	bne.w	800650e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	2b01      	cmp	r3, #1
 8006270:	d005      	beq.n	800627e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800627a:	2b02      	cmp	r3, #2
 800627c:	d130      	bne.n	80062e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	2203      	movs	r2, #3
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	43db      	mvns	r3, r3
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	4013      	ands	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062b4:	2201      	movs	r2, #1
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	43db      	mvns	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 0201 	and.w	r2, r3, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d017      	beq.n	800631c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	2203      	movs	r2, #3
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4013      	ands	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4313      	orrs	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d123      	bne.n	8006370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	08da      	lsrs	r2, r3, #3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3208      	adds	r2, #8
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	220f      	movs	r2, #15
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	43db      	mvns	r3, r3
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4013      	ands	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	08da      	lsrs	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3208      	adds	r2, #8
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	2203      	movs	r2, #3
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4013      	ands	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 0203 	and.w	r2, r3, #3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4313      	orrs	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80ae 	beq.w	800650e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	4b5d      	ldr	r3, [pc, #372]	; (800652c <HAL_GPIO_Init+0x300>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	4a5c      	ldr	r2, [pc, #368]	; (800652c <HAL_GPIO_Init+0x300>)
 80063bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c0:	6453      	str	r3, [r2, #68]	; 0x44
 80063c2:	4b5a      	ldr	r3, [pc, #360]	; (800652c <HAL_GPIO_Init+0x300>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063ce:	4a58      	ldr	r2, [pc, #352]	; (8006530 <HAL_GPIO_Init+0x304>)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	089b      	lsrs	r3, r3, #2
 80063d4:	3302      	adds	r3, #2
 80063d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	220f      	movs	r2, #15
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a4f      	ldr	r2, [pc, #316]	; (8006534 <HAL_GPIO_Init+0x308>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d025      	beq.n	8006446 <HAL_GPIO_Init+0x21a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a4e      	ldr	r2, [pc, #312]	; (8006538 <HAL_GPIO_Init+0x30c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01f      	beq.n	8006442 <HAL_GPIO_Init+0x216>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a4d      	ldr	r2, [pc, #308]	; (800653c <HAL_GPIO_Init+0x310>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d019      	beq.n	800643e <HAL_GPIO_Init+0x212>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a4c      	ldr	r2, [pc, #304]	; (8006540 <HAL_GPIO_Init+0x314>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_GPIO_Init+0x20e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a4b      	ldr	r2, [pc, #300]	; (8006544 <HAL_GPIO_Init+0x318>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00d      	beq.n	8006436 <HAL_GPIO_Init+0x20a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a4a      	ldr	r2, [pc, #296]	; (8006548 <HAL_GPIO_Init+0x31c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <HAL_GPIO_Init+0x206>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a49      	ldr	r2, [pc, #292]	; (800654c <HAL_GPIO_Init+0x320>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <HAL_GPIO_Init+0x202>
 800642a:	2306      	movs	r3, #6
 800642c:	e00c      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 800642e:	2307      	movs	r3, #7
 8006430:	e00a      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 8006432:	2305      	movs	r3, #5
 8006434:	e008      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 8006436:	2304      	movs	r3, #4
 8006438:	e006      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 800643a:	2303      	movs	r3, #3
 800643c:	e004      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 800643e:	2302      	movs	r3, #2
 8006440:	e002      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <HAL_GPIO_Init+0x21c>
 8006446:	2300      	movs	r3, #0
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	f002 0203 	and.w	r2, r2, #3
 800644e:	0092      	lsls	r2, r2, #2
 8006450:	4093      	lsls	r3, r2
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4313      	orrs	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006458:	4935      	ldr	r1, [pc, #212]	; (8006530 <HAL_GPIO_Init+0x304>)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	089b      	lsrs	r3, r3, #2
 800645e:	3302      	adds	r3, #2
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006466:	4b3a      	ldr	r3, [pc, #232]	; (8006550 <HAL_GPIO_Init+0x324>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800648a:	4a31      	ldr	r2, [pc, #196]	; (8006550 <HAL_GPIO_Init+0x324>)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006490:	4b2f      	ldr	r3, [pc, #188]	; (8006550 <HAL_GPIO_Init+0x324>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	43db      	mvns	r3, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4013      	ands	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064b4:	4a26      	ldr	r2, [pc, #152]	; (8006550 <HAL_GPIO_Init+0x324>)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ba:	4b25      	ldr	r3, [pc, #148]	; (8006550 <HAL_GPIO_Init+0x324>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_GPIO_Init+0x324>)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <HAL_GPIO_Init+0x324>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006508:	4a11      	ldr	r2, [pc, #68]	; (8006550 <HAL_GPIO_Init+0x324>)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3301      	adds	r3, #1
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	f67f ae96 	bls.w	8006248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	3724      	adds	r7, #36	; 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800
 8006530:	40013800 	.word	0x40013800
 8006534:	40020000 	.word	0x40020000
 8006538:	40020400 	.word	0x40020400
 800653c:	40020800 	.word	0x40020800
 8006540:	40020c00 	.word	0x40020c00
 8006544:	40021000 	.word	0x40021000
 8006548:	40021400 	.word	0x40021400
 800654c:	40021800 	.word	0x40021800
 8006550:	40013c00 	.word	0x40013c00

08006554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	887b      	ldrh	r3, [r7, #2]
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
 8006570:	e001      	b.n	8006576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	807b      	strh	r3, [r7, #2]
 8006590:	4613      	mov	r3, r2
 8006592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006594:	787b      	ldrb	r3, [r7, #1]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800659a:	887a      	ldrh	r2, [r7, #2]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065a0:	e003      	b.n	80065aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065a2:	887b      	ldrh	r3, [r7, #2]
 80065a4:	041a      	lsls	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	619a      	str	r2, [r3, #24]
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065c8:	887a      	ldrh	r2, [r7, #2]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4013      	ands	r3, r2
 80065ce:	041a      	lsls	r2, r3, #16
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	43d9      	mvns	r1, r3
 80065d4:	887b      	ldrh	r3, [r7, #2]
 80065d6:	400b      	ands	r3, r1
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	619a      	str	r2, [r3, #24]
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d006      	beq.n	8006610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006602:	4a05      	ldr	r2, [pc, #20]	; (8006618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fc fb38 	bl	8002c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40013c00 	.word	0x40013c00

0800661c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e12b      	b.n	8006886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fd fcba 	bl	8003fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006680:	f003 ff88 	bl	800a594 <HAL_RCC_GetPCLK1Freq>
 8006684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	4a81      	ldr	r2, [pc, #516]	; (8006890 <HAL_I2C_Init+0x274>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d807      	bhi.n	80066a0 <HAL_I2C_Init+0x84>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a80      	ldr	r2, [pc, #512]	; (8006894 <HAL_I2C_Init+0x278>)
 8006694:	4293      	cmp	r3, r2
 8006696:	bf94      	ite	ls
 8006698:	2301      	movls	r3, #1
 800669a:	2300      	movhi	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e006      	b.n	80066ae <HAL_I2C_Init+0x92>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a7d      	ldr	r2, [pc, #500]	; (8006898 <HAL_I2C_Init+0x27c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bf94      	ite	ls
 80066a8:	2301      	movls	r3, #1
 80066aa:	2300      	movhi	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e0e7      	b.n	8006886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a78      	ldr	r2, [pc, #480]	; (800689c <HAL_I2C_Init+0x280>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	0c9b      	lsrs	r3, r3, #18
 80066c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4a6a      	ldr	r2, [pc, #424]	; (8006890 <HAL_I2C_Init+0x274>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d802      	bhi.n	80066f0 <HAL_I2C_Init+0xd4>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	3301      	adds	r3, #1
 80066ee:	e009      	b.n	8006704 <HAL_I2C_Init+0xe8>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	4a69      	ldr	r2, [pc, #420]	; (80068a0 <HAL_I2C_Init+0x284>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	3301      	adds	r3, #1
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	430b      	orrs	r3, r1
 800670a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	495c      	ldr	r1, [pc, #368]	; (8006890 <HAL_I2C_Init+0x274>)
 8006720:	428b      	cmp	r3, r1
 8006722:	d819      	bhi.n	8006758 <HAL_I2C_Init+0x13c>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1e59      	subs	r1, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006738:	400b      	ands	r3, r1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_I2C_Init+0x138>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1e59      	subs	r1, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	fbb1 f3f3 	udiv	r3, r1, r3
 800674c:	3301      	adds	r3, #1
 800674e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006752:	e051      	b.n	80067f8 <HAL_I2C_Init+0x1dc>
 8006754:	2304      	movs	r3, #4
 8006756:	e04f      	b.n	80067f8 <HAL_I2C_Init+0x1dc>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d111      	bne.n	8006784 <HAL_I2C_Init+0x168>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	1e58      	subs	r0, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6859      	ldr	r1, [r3, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	440b      	add	r3, r1
 800676e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006772:	3301      	adds	r3, #1
 8006774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e012      	b.n	80067aa <HAL_I2C_Init+0x18e>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1e58      	subs	r0, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6859      	ldr	r1, [r3, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	0099      	lsls	r1, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	fbb0 f3f3 	udiv	r3, r0, r3
 800679a:	3301      	adds	r3, #1
 800679c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_I2C_Init+0x196>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e022      	b.n	80067f8 <HAL_I2C_Init+0x1dc>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10e      	bne.n	80067d8 <HAL_I2C_Init+0x1bc>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1e58      	subs	r0, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	440b      	add	r3, r1
 80067c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067cc:	3301      	adds	r3, #1
 80067ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	e00f      	b.n	80067f8 <HAL_I2C_Init+0x1dc>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e58      	subs	r0, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	0099      	lsls	r1, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ee:	3301      	adds	r3, #1
 80067f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	6809      	ldr	r1, [r1, #0]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69da      	ldr	r2, [r3, #28]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6911      	ldr	r1, [r2, #16]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68d2      	ldr	r2, [r2, #12]
 8006832:	4311      	orrs	r1, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	430b      	orrs	r3, r1
 800683a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	000186a0 	.word	0x000186a0
 8006894:	001e847f 	.word	0x001e847f
 8006898:	003d08ff 	.word	0x003d08ff
 800689c:	431bde83 	.word	0x431bde83
 80068a0:	10624dd3 	.word	0x10624dd3

080068a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08c      	sub	sp, #48	; 0x30
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	461a      	mov	r2, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	817b      	strh	r3, [r7, #10]
 80068b6:	460b      	mov	r3, r1
 80068b8:	813b      	strh	r3, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068be:	f7fd fed9 	bl	8004674 <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	f040 8208 	bne.w	8006ce2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2319      	movs	r3, #25
 80068d8:	2201      	movs	r2, #1
 80068da:	497b      	ldr	r1, [pc, #492]	; (8006ac8 <HAL_I2C_Mem_Read+0x224>)
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f002 f95d 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
 80068ea:	e1fb      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_I2C_Mem_Read+0x56>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e1f4      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d007      	beq.n	8006920 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800692e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2222      	movs	r2, #34	; 0x22
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2240      	movs	r2, #64	; 0x40
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a5b      	ldr	r2, [pc, #364]	; (8006acc <HAL_I2C_Mem_Read+0x228>)
 8006960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006962:	88f8      	ldrh	r0, [r7, #6]
 8006964:	893a      	ldrh	r2, [r7, #8]
 8006966:	8979      	ldrh	r1, [r7, #10]
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4603      	mov	r3, r0
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f001 fe70 	bl	8008658 <I2C_RequestMemoryRead>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e1b0      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	d113      	bne.n	80069b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	623b      	str	r3, [r7, #32]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	623b      	str	r3, [r7, #32]
 800699e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e184      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d11b      	bne.n	80069f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e164      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d11b      	bne.n	8006a32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	e144      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a48:	e138      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	f200 80f1 	bhi.w	8006c36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d123      	bne.n	8006aa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f002 f9e5 	bl	8008e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e139      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aa2:	e10b      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d14e      	bne.n	8006b4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4906      	ldr	r1, [pc, #24]	; (8006ad0 <HAL_I2C_Mem_Read+0x22c>)
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f002 f870 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d008      	beq.n	8006ad4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e10e      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
 8006ac6:	bf00      	nop
 8006ac8:	00100002 	.word	0x00100002
 8006acc:	ffff0000 	.word	0xffff0000
 8006ad0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b48:	e0b8      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	2200      	movs	r2, #0
 8006b52:	4966      	ldr	r1, [pc, #408]	; (8006cec <HAL_I2C_Mem_Read+0x448>)
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f002 f821 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0bf      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	2200      	movs	r2, #0
 8006bae:	494f      	ldr	r1, [pc, #316]	; (8006cec <HAL_I2C_Mem_Read+0x448>)
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f001 fff3 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e091      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c34:	e042      	b.n	8006cbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f002 f8f8 	bl	8008e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e04c      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d118      	bne.n	8006cbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f47f aec2 	bne.w	8006a4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e000      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006ce2:	2302      	movs	r3, #2
  }
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3728      	adds	r7, #40	; 0x28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	00010004 	.word	0x00010004

08006cf0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	; 0x28
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	817b      	strh	r3, [r7, #10]
 8006d02:	460b      	mov	r3, r1
 8006d04:	813b      	strh	r3, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d0e:	f7fd fcb1 	bl	8004674 <HAL_GetTick>
 8006d12:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	f040 813a 	bne.w	8006f96 <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d22:	4b9f      	ldr	r3, [pc, #636]	; (8006fa0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	4a9e      	ldr	r2, [pc, #632]	; (8006fa4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8006d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2e:	0a1a      	lsrs	r2, r3, #8
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009a      	lsls	r2, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d116      	bne.n	8006d76 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e110      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d0db      	beq.n	8006d3c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_I2C_Mem_Write_DMA+0xa2>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e102      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d007      	beq.n	8006db8 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2221      	movs	r2, #33	; 0x21
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a6c      	ldr	r2, [pc, #432]	; (8006fa8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8006df8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006dfa:	897a      	ldrh	r2, [r7, #10]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006e00:	893a      	ldrh	r2, [r7, #8]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80a9 	beq.w	8006f6e <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02a      	beq.n	8006e7a <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e28:	4a60      	ldr	r2, [pc, #384]	; (8006fac <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8006e2a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e30:	4a5f      	ldr	r2, [pc, #380]	; (8006fb0 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8006e32:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e38:	2200      	movs	r2, #0
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	2200      	movs	r2, #0
 8006e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	2200      	movs	r2, #0
 8006e4a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	2200      	movs	r2, #0
 8006e52:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3310      	adds	r3, #16
 8006e64:	461a      	mov	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6a:	f7fe fee1 	bl	8005c30 <HAL_DMA_Start_IT>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006e72:	7efb      	ldrb	r3, [r7, #27]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d166      	bne.n	8006f46 <HAL_I2C_Mem_Write_DMA+0x256>
 8006e78:	e013      	b.n	8006ea2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e07a      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006ea2:	88f8      	ldrh	r0, [r7, #6]
 8006ea4:	893a      	ldrh	r2, [r7, #8]
 8006ea6:	8979      	ldrh	r1, [r7, #10]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	2323      	movs	r3, #35	; 0x23
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f001 fb3a 	bl	800852c <I2C_RequestMemoryWrite>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d022      	beq.n	8006f04 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe ff0c 	bl	8005ce0 <HAL_DMA_Abort_IT>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e049      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f30:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f40:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e028      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f043 0210 	orr.w	r2, r3, #16
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e014      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8006f96:	2302      	movs	r3, #2
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3720      	adds	r7, #32
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000000 	.word	0x20000000
 8006fa4:	14f8b589 	.word	0x14f8b589
 8006fa8:	ffff0000 	.word	0xffff0000
 8006fac:	08008829 	.word	0x08008829
 8006fb0:	080089d3 	.word	0x080089d3

08006fb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d003      	beq.n	8006fec <HAL_I2C_EV_IRQHandler+0x38>
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	f040 80c1 	bne.w	800716e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <HAL_I2C_EV_IRQHandler+0x6e>
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800700c:	d003      	beq.n	8007016 <HAL_I2C_EV_IRQHandler+0x62>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007014:	d101      	bne.n	800701a <HAL_I2C_EV_IRQHandler+0x66>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x68>
 800701a:	2300      	movs	r3, #0
 800701c:	2b01      	cmp	r3, #1
 800701e:	f000 8132 	beq.w	8007286 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <HAL_I2C_EV_IRQHandler+0x92>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	0a5b      	lsrs	r3, r3, #9
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d006      	beq.n	8007046 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 ff7e 	bl	8008f3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fcc8 	bl	80079d4 <I2C_Master_SB>
 8007044:	e092      	b.n	800716c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	08db      	lsrs	r3, r3, #3
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <HAL_I2C_EV_IRQHandler+0xb2>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	0a5b      	lsrs	r3, r3, #9
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fd3e 	bl	8007ae0 <I2C_Master_ADD10>
 8007064:	e082      	b.n	800716c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <HAL_I2C_EV_IRQHandler+0xd2>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	0a5b      	lsrs	r3, r3, #9
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fd58 	bl	8007b34 <I2C_Master_ADDR>
 8007084:	e072      	b.n	800716c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	089b      	lsrs	r3, r3, #2
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d03b      	beq.n	800710a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a0:	f000 80f3 	beq.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	09db      	lsrs	r3, r3, #7
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	0a9b      	lsrs	r3, r3, #10
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	089b      	lsrs	r3, r3, #2
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f942 	bl	8007352 <I2C_MasterTransmit_TXE>
 80070ce:	e04d      	b.n	800716c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	089b      	lsrs	r3, r3, #2
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80d6 	beq.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	0a5b      	lsrs	r3, r3, #9
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80cf 	beq.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b21      	cmp	r3, #33	; 0x21
 80070f0:	d103      	bne.n	80070fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9c9 	bl	800748a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070f8:	e0c7      	b.n	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b40      	cmp	r3, #64	; 0x40
 80070fe:	f040 80c4 	bne.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa37 	bl	8007576 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007108:	e0bf      	b.n	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007118:	f000 80b7 	beq.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	099b      	lsrs	r3, r3, #6
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00f      	beq.n	8007148 <HAL_I2C_EV_IRQHandler+0x194>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	0a9b      	lsrs	r3, r3, #10
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <HAL_I2C_EV_IRQHandler+0x194>
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d103      	bne.n	8007148 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 faac 	bl	800769e <I2C_MasterReceive_RXNE>
 8007146:	e011      	b.n	800716c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	089b      	lsrs	r3, r3, #2
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 809a 	beq.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	0a5b      	lsrs	r3, r3, #9
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8093 	beq.w	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fb4b 	bl	8007800 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800716a:	e08e      	b.n	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
 800716c:	e08d      	b.n	800728a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	e007      	b.n	8007190 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	0a5b      	lsrs	r3, r3, #9
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80071b8:	69b9      	ldr	r1, [r7, #24]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 ff09 	bl	8007fd2 <I2C_Slave_ADDR>
 80071c0:	e066      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	091b      	lsrs	r3, r3, #4
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	0a5b      	lsrs	r3, r3, #9
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 ff44 	bl	8008068 <I2C_Slave_STOPF>
 80071e0:	e056      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b21      	cmp	r3, #33	; 0x21
 80071e6:	d002      	beq.n	80071ee <HAL_I2C_EV_IRQHandler+0x23a>
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b29      	cmp	r3, #41	; 0x29
 80071ec:	d125      	bne.n	800723a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	09db      	lsrs	r3, r3, #7
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00f      	beq.n	800721a <HAL_I2C_EV_IRQHandler+0x266>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	0a9b      	lsrs	r3, r3, #10
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <HAL_I2C_EV_IRQHandler+0x266>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	089b      	lsrs	r3, r3, #2
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fe1f 	bl	8007e56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007218:	e039      	b.n	800728e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	089b      	lsrs	r3, r3, #2
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d033      	beq.n	800728e <HAL_I2C_EV_IRQHandler+0x2da>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	0a5b      	lsrs	r3, r3, #9
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d02d      	beq.n	800728e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fe4c 	bl	8007ed0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007238:	e029      	b.n	800728e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	099b      	lsrs	r3, r3, #6
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	0a9b      	lsrs	r3, r3, #10
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	089b      	lsrs	r3, r3, #2
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fe57 	bl	8007f12 <I2C_SlaveReceive_RXNE>
 8007264:	e014      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	089b      	lsrs	r3, r3, #2
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00e      	beq.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	0a5b      	lsrs	r3, r3, #9
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fe85 	bl	8007f8e <I2C_SlaveReceive_BTF>
 8007284:	e004      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800728e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
 80072f2:	4613      	mov	r3, r2
 80072f4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007360:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007368:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007374:	2b00      	cmp	r3, #0
 8007376:	d150      	bne.n	800741a <I2C_MasterTransmit_TXE+0xc8>
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b21      	cmp	r3, #33	; 0x21
 800737c:	d14d      	bne.n	800741a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d01d      	beq.n	80073c0 <I2C_MasterTransmit_TXE+0x6e>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b20      	cmp	r3, #32
 8007388:	d01a      	beq.n	80073c0 <I2C_MasterTransmit_TXE+0x6e>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007390:	d016      	beq.n	80073c0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073a0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2211      	movs	r2, #17
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff6c 	bl	8007296 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073be:	e060      	b.n	8007482 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073ce:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073de:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d107      	bne.n	800740a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fb fc49 	bl	8002c9a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007408:	e03b      	b.n	8007482 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff ff3f 	bl	8007296 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007418:	e033      	b.n	8007482 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b21      	cmp	r3, #33	; 0x21
 800741e:	d005      	beq.n	800742c <I2C_MasterTransmit_TXE+0xda>
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d12d      	bne.n	8007482 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b22      	cmp	r3, #34	; 0x22
 800742a:	d12a      	bne.n	8007482 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007446:	e01c      	b.n	8007482 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d103      	bne.n	800745c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f88e 	bl	8007576 <I2C_MemoryTransmit_TXE_BTF>
}
 800745a:	e012      	b.n	8007482 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	781a      	ldrb	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007480:	e7ff      	b.n	8007482 <I2C_MasterTransmit_TXE+0x130>
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b21      	cmp	r3, #33	; 0x21
 80074a2:	d164      	bne.n	800756e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d012      	beq.n	80074d4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80074d2:	e04c      	b.n	800756e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d01d      	beq.n	8007516 <I2C_MasterTransmit_BTF+0x8c>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d01a      	beq.n	8007516 <I2C_MasterTransmit_BTF+0x8c>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074e6:	d016      	beq.n	8007516 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074f6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2211      	movs	r2, #17
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fec1 	bl	8007296 <HAL_I2C_MasterTxCpltCallback>
}
 8007514:	e02b      	b.n	800756e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007524:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007534:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d107      	bne.n	8007560 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fb fb9e 	bl	8002c9a <HAL_I2C_MemTxCpltCallback>
}
 800755e:	e006      	b.n	800756e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fe94 	bl	8007296 <HAL_I2C_MasterTxCpltCallback>
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758a:	2b00      	cmp	r3, #0
 800758c:	d11d      	bne.n	80075ca <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d10b      	bne.n	80075ae <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759a:	b2da      	uxtb	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a6:	1c9a      	adds	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80075ac:	e073      	b.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	121b      	asrs	r3, r3, #8
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075c8:	e065      	b.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d10b      	bne.n	80075ea <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075e8:	e055      	b.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d151      	bne.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	2b22      	cmp	r3, #34	; 0x22
 80075f6:	d10d      	bne.n	8007614 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007606:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007612:	e040      	b.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d015      	beq.n	800764a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b21      	cmp	r3, #33	; 0x21
 8007622:	d112      	bne.n	800764a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007648:	e025      	b.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d120      	bne.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b21      	cmp	r3, #33	; 0x21
 8007658:	d11d      	bne.n	8007696 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007668:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007678:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fb fb02 	bl	8002c9a <HAL_I2C_MemTxCpltCallback>
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b22      	cmp	r3, #34	; 0x22
 80076b0:	f040 80a2 	bne.w	80077f8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d921      	bls.n	8007706 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	f040 8082 	bne.w	80077f8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007702:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007704:	e078      	b.n	80077f8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	2b02      	cmp	r3, #2
 800770c:	d074      	beq.n	80077f8 <I2C_MasterReceive_RXNE+0x15a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d002      	beq.n	800771a <I2C_MasterReceive_RXNE+0x7c>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d16e      	bne.n	80077f8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 fb56 	bl	8008dcc <I2C_WaitOnSTOPRequestThroughIT>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d142      	bne.n	80077ac <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007734:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007744:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d10a      	bne.n	8007796 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fdc1 	bl	8007316 <HAL_I2C_MemRxCpltCallback>
}
 8007794:	e030      	b.n	80077f8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2212      	movs	r2, #18
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff fd80 	bl	80072aa <HAL_I2C_MasterRxCpltCallback>
}
 80077aa:	e025      	b.n	80077f8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fd99 	bl	800732a <HAL_I2C_ErrorCallback>
}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11b      	bne.n	8007850 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007826:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800784e:	e0bd      	b.n	80079cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d129      	bne.n	80078ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007868:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d00a      	beq.n	8007886 <I2C_MasterReceive_BTF+0x86>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d007      	beq.n	8007886 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007884:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078ac:	e08e      	b.n	80079cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d176      	bne.n	80079a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d002      	beq.n	80078c4 <I2C_MasterReceive_BTF+0xc4>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d108      	bne.n	80078d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e019      	b.n	800790a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d002      	beq.n	80078e2 <I2C_MasterReceive_BTF+0xe2>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d108      	bne.n	80078f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e00a      	b.n	800790a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d007      	beq.n	800790a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007908:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007964:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d10a      	bne.n	8007990 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fcc4 	bl	8007316 <HAL_I2C_MemRxCpltCallback>
}
 800798e:	e01d      	b.n	80079cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2212      	movs	r2, #18
 800799c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fc83 	bl	80072aa <HAL_I2C_MasterRxCpltCallback>
}
 80079a4:	e012      	b.n	80079cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d117      	bne.n	8007a18 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a00:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007a02:	e067      	b.n	8007ad4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	611a      	str	r2, [r3, #16]
}
 8007a16:	e05d      	b.n	8007ad4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a20:	d133      	bne.n	8007a8a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b21      	cmp	r3, #33	; 0x21
 8007a2c:	d109      	bne.n	8007a42 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a3e:	611a      	str	r2, [r3, #16]
 8007a40:	e008      	b.n	8007a54 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	f043 0301 	orr.w	r3, r3, #1
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <I2C_Master_SB+0x92>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d108      	bne.n	8007a78 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d032      	beq.n	8007ad4 <I2C_Master_SB+0x100>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d02d      	beq.n	8007ad4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a86:	605a      	str	r2, [r3, #4]
}
 8007a88:	e024      	b.n	8007ad4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10e      	bne.n	8007ab0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	11db      	asrs	r3, r3, #7
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f003 0306 	and.w	r3, r3, #6
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f063 030f 	orn	r3, r3, #15
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	611a      	str	r2, [r3, #16]
}
 8007aae:	e011      	b.n	8007ad4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d10d      	bne.n	8007ad4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	11db      	asrs	r3, r3, #7
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	f003 0306 	and.w	r3, r3, #6
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f063 030e 	orn	r3, r3, #14
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	611a      	str	r2, [r3, #16]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <I2C_Master_ADD10+0x26>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <I2C_Master_ADD10+0x48>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b26:	605a      	str	r2, [r3, #4]
  }
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b091      	sub	sp, #68	; 0x44
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b22      	cmp	r3, #34	; 0x22
 8007b5c:	f040 8169 	bne.w	8007e32 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10f      	bne.n	8007b88 <I2C_Master_ADDR+0x54>
 8007b68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d10b      	bne.n	8007b88 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b70:	2300      	movs	r3, #0
 8007b72:	633b      	str	r3, [r7, #48]	; 0x30
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	e160      	b.n	8007e4a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11d      	bne.n	8007bcc <I2C_Master_ADDR+0x98>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b98:	d118      	bne.n	8007bcc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bbe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	651a      	str	r2, [r3, #80]	; 0x50
 8007bca:	e13e      	b.n	8007e4a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d113      	bne.n	8007bfe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e115      	b.n	8007e2a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	f040 808a 	bne.w	8007d1e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c10:	d137      	bne.n	8007c82 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c20:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c30:	d113      	bne.n	8007c5a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c40:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c42:	2300      	movs	r3, #0
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	e0e7      	b.n	8007e2a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	623b      	str	r3, [r7, #32]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	623b      	str	r3, [r7, #32]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e0d3      	b.n	8007e2a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d02e      	beq.n	8007ce6 <I2C_Master_ADDR+0x1b2>
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d02b      	beq.n	8007ce6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	2b12      	cmp	r3, #18
 8007c92:	d102      	bne.n	8007c9a <I2C_Master_ADDR+0x166>
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d125      	bne.n	8007ce6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d00e      	beq.n	8007cbe <I2C_Master_ADDR+0x18a>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d00b      	beq.n	8007cbe <I2C_Master_ADDR+0x18a>
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d008      	beq.n	8007cbe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e007      	b.n	8007cce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ccc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	e0a1      	b.n	8007e2a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e085      	b.n	8007e2a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d14d      	bne.n	8007dc4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d016      	beq.n	8007d5c <I2C_Master_ADDR+0x228>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d013      	beq.n	8007d5c <I2C_Master_ADDR+0x228>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d010      	beq.n	8007d5c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d48:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e007      	b.n	8007d6c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d6a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d7a:	d117      	bne.n	8007dac <I2C_Master_ADDR+0x278>
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d82:	d00b      	beq.n	8007d9c <I2C_Master_ADDR+0x268>
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d008      	beq.n	8007d9c <I2C_Master_ADDR+0x268>
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d005      	beq.n	8007d9c <I2C_Master_ADDR+0x268>
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d002      	beq.n	8007d9c <I2C_Master_ADDR+0x268>
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d107      	bne.n	8007dac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007daa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	e032      	b.n	8007e2a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d117      	bne.n	8007e14 <I2C_Master_ADDR+0x2e0>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dea:	d00b      	beq.n	8007e04 <I2C_Master_ADDR+0x2d0>
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d008      	beq.n	8007e04 <I2C_Master_ADDR+0x2d0>
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d005      	beq.n	8007e04 <I2C_Master_ADDR+0x2d0>
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	2b10      	cmp	r3, #16
 8007dfc:	d002      	beq.n	8007e04 <I2C_Master_ADDR+0x2d0>
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d107      	bne.n	8007e14 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e14:	2300      	movs	r3, #0
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007e30:	e00b      	b.n	8007e4a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
}
 8007e48:	e7ff      	b.n	8007e4a <I2C_Master_ADDR+0x316>
 8007e4a:	bf00      	nop
 8007e4c:	3744      	adds	r7, #68	; 0x44
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02b      	beq.n	8007ec8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <I2C_SlaveTransmit_TXE+0x72>
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b29      	cmp	r3, #41	; 0x29
 8007ea2:	d111      	bne.n	8007ec8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2221      	movs	r2, #33	; 0x21
 8007eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2228      	movs	r2, #40	; 0x28
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f9fb 	bl	80072be <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d011      	beq.n	8007f06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	781a      	ldrb	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d02c      	beq.n	8007f86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d114      	bne.n	8007f86 <I2C_SlaveReceive_RXNE+0x74>
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f60:	d111      	bne.n	8007f86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2222      	movs	r2, #34	; 0x22
 8007f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2228      	movs	r2, #40	; 0x28
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff f9a6 	bl	80072d2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d012      	beq.n	8007fc6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fec:	2b28      	cmp	r3, #40	; 0x28
 8007fee:	d127      	bne.n	8008040 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ffe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	089b      	lsrs	r3, r3, #2
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	09db      	lsrs	r3, r3, #7
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	81bb      	strh	r3, [r7, #12]
 8008022:	e002      	b.n	800802a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008032:	89ba      	ldrh	r2, [r7, #12]
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff f954 	bl	80072e6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800803e:	e00e      	b.n	800805e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008040:	2300      	movs	r3, #0
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	60bb      	str	r3, [r7, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008076:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008086:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008088:	2300      	movs	r3, #0
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	60bb      	str	r3, [r7, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c4:	d172      	bne.n	80081ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b22      	cmp	r3, #34	; 0x22
 80080ca:	d002      	beq.n	80080d2 <I2C_Slave_STOPF+0x6a>
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b2a      	cmp	r3, #42	; 0x2a
 80080d0:	d135      	bne.n	800813e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f043 0204 	orr.w	r2, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008104:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	4618      	mov	r0, r3
 800810c:	f7fd ff94 	bl	8006038 <HAL_DMA_GetState>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d049      	beq.n	80081aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	4a69      	ldr	r2, [pc, #420]	; (80082c0 <I2C_Slave_STOPF+0x258>)
 800811c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	4618      	mov	r0, r3
 8008124:	f7fd fddc 	bl	8005ce0 <HAL_DMA_Abort_IT>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d03d      	beq.n	80081aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800813c:	e035      	b.n	80081aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f043 0204 	orr.w	r2, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008170:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd ff5e 	bl	8006038 <HAL_DMA_GetState>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d014      	beq.n	80081ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	4a4e      	ldr	r2, [pc, #312]	; (80082c0 <I2C_Slave_STOPF+0x258>)
 8008188:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd fda6 	bl	8005ce0 <HAL_DMA_Abort_IT>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d008      	beq.n	80081ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	e000      	b.n	80081ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80081aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d03e      	beq.n	8008234 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d112      	bne.n	80081ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d112      	bne.n	800821e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f043 0204 	orr.w	r2, r3, #4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f843 	bl	80082c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008242:	e039      	b.n	80082b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b2a      	cmp	r3, #42	; 0x2a
 8008248:	d109      	bne.n	800825e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2228      	movs	r2, #40	; 0x28
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff f83a 	bl	80072d2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b28      	cmp	r3, #40	; 0x28
 8008268:	d111      	bne.n	800828e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <I2C_Slave_STOPF+0x25c>)
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff f83b 	bl	8007302 <HAL_I2C_ListenCpltCallback>
}
 800828c:	e014      	b.n	80082b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	2b22      	cmp	r3, #34	; 0x22
 8008294:	d002      	beq.n	800829c <I2C_Slave_STOPF+0x234>
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b22      	cmp	r3, #34	; 0x22
 800829a:	d10d      	bne.n	80082b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff f80d 	bl	80072d2 <HAL_I2C_SlaveRxCpltCallback>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	08008a4d 	.word	0x08008a4d
 80082c4:	ffff0000 	.word	0xffff0000

080082c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b10      	cmp	r3, #16
 80082e4:	d002      	beq.n	80082ec <I2C_ITError+0x24>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b40      	cmp	r3, #64	; 0x40
 80082ea:	d10a      	bne.n	8008302 <I2C_ITError+0x3a>
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b22      	cmp	r3, #34	; 0x22
 80082f0:	d107      	bne.n	8008302 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008300:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008308:	2b28      	cmp	r3, #40	; 0x28
 800830a:	d107      	bne.n	800831c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2228      	movs	r2, #40	; 0x28
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800831a:	e015      	b.n	8008348 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d00a      	beq.n	8008342 <I2C_ITError+0x7a>
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b60      	cmp	r3, #96	; 0x60
 8008330:	d007      	beq.n	8008342 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008356:	d162      	bne.n	800841e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008366:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b01      	cmp	r3, #1
 8008374:	d020      	beq.n	80083b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837a:	4a6a      	ldr	r2, [pc, #424]	; (8008524 <I2C_ITError+0x25c>)
 800837c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd fcac 	bl	8005ce0 <HAL_DMA_Abort_IT>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8089 	beq.w	80084a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	e074      	b.n	80084a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	4a59      	ldr	r2, [pc, #356]	; (8008524 <I2C_ITError+0x25c>)
 80083be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fd fc8b 	bl	8005ce0 <HAL_DMA_Abort_IT>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d068      	beq.n	80084a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d10b      	bne.n	80083f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	b2d2      	uxtb	r2, r2
 80083ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0201 	bic.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	e041      	b.n	80084a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b60      	cmp	r3, #96	; 0x60
 8008428:	d125      	bne.n	8008476 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d10b      	bne.n	800845e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fe ff65 	bl	800733e <HAL_I2C_AbortCpltCallback>
 8008474:	e015      	b.n	80084a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d10b      	bne.n	800849c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fe ff44 	bl	800732a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10e      	bne.n	80084d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d113      	bne.n	800851c <I2C_ITError+0x254>
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b28      	cmp	r3, #40	; 0x28
 80084f8:	d110      	bne.n	800851c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <I2C_ITError+0x260>)
 80084fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7fe fef3 	bl	8007302 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	08008a4d 	.word	0x08008a4d
 8008528:	ffff0000 	.word	0xffff0000

0800852c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	4603      	mov	r3, r0
 800853c:	817b      	strh	r3, [r7, #10]
 800853e:	460b      	mov	r3, r1
 8008540:	813b      	strh	r3, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	2200      	movs	r2, #0
 800855e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 fb1a 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857c:	d103      	bne.n	8008586 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e05f      	b.n	800864a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800858a:	897b      	ldrh	r3, [r7, #10]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	461a      	mov	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	6a3a      	ldr	r2, [r7, #32]
 800859e:	492d      	ldr	r1, [pc, #180]	; (8008654 <I2C_RequestMemoryWrite+0x128>)
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 fb52 	bl	8008c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e04c      	b.n	800864a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c8:	6a39      	ldr	r1, [r7, #32]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fbbc 	bl	8008d48 <I2C_WaitOnTXEFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d107      	bne.n	80085ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e02b      	b.n	800864a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d105      	bne.n	8008604 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085f8:	893b      	ldrh	r3, [r7, #8]
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	611a      	str	r2, [r3, #16]
 8008602:	e021      	b.n	8008648 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008604:	893b      	ldrh	r3, [r7, #8]
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	b29b      	uxth	r3, r3
 800860a:	b2da      	uxtb	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008614:	6a39      	ldr	r1, [r7, #32]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fb96 	bl	8008d48 <I2C_WaitOnTXEFlagUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00d      	beq.n	800863e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	2b04      	cmp	r3, #4
 8008628:	d107      	bne.n	800863a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e005      	b.n	800864a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800863e:	893b      	ldrh	r3, [r7, #8]
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	00010002 	.word	0x00010002

08008658 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af02      	add	r7, sp, #8
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	461a      	mov	r2, r3
 8008666:	4603      	mov	r3, r0
 8008668:	817b      	strh	r3, [r7, #10]
 800866a:	460b      	mov	r3, r1
 800866c:	813b      	strh	r3, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008680:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	2200      	movs	r2, #0
 800869a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fa7c 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00d      	beq.n	80086c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b8:	d103      	bne.n	80086c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e0aa      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086c6:	897b      	ldrh	r3, [r7, #10]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	4952      	ldr	r1, [pc, #328]	; (8008824 <I2C_RequestMemoryRead+0x1cc>)
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 fab4 	bl	8008c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e097      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008704:	6a39      	ldr	r1, [r7, #32]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fb1e 	bl	8008d48 <I2C_WaitOnTXEFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00d      	beq.n	800872e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	2b04      	cmp	r3, #4
 8008718:	d107      	bne.n	800872a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e076      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d105      	bne.n	8008740 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008734:	893b      	ldrh	r3, [r7, #8]
 8008736:	b2da      	uxtb	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	611a      	str	r2, [r3, #16]
 800873e:	e021      	b.n	8008784 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	b29b      	uxth	r3, r3
 8008746:	b2da      	uxtb	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800874e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008750:	6a39      	ldr	r1, [r7, #32]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 faf8 	bl	8008d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	2b04      	cmp	r3, #4
 8008764:	d107      	bne.n	8008776 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e050      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800877a:	893b      	ldrh	r3, [r7, #8]
 800877c:	b2da      	uxtb	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	6a39      	ldr	r1, [r7, #32]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fadd 	bl	8008d48 <I2C_WaitOnTXEFlagUntilTimeout>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00d      	beq.n	80087b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	2b04      	cmp	r3, #4
 800879a:	d107      	bne.n	80087ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e035      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f9e5 	bl	8008b9c <I2C_WaitOnFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00d      	beq.n	80087f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e6:	d103      	bne.n	80087f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e013      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087f4:	897b      	ldrh	r3, [r7, #10]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	6a3a      	ldr	r2, [r7, #32]
 8008808:	4906      	ldr	r1, [pc, #24]	; (8008824 <I2C_RequestMemoryRead+0x1cc>)
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fa1d 	bl	8008c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	00010002 	.word	0x00010002

08008828 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008844:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800885a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008868:	2200      	movs	r2, #0
 800886a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	2200      	movs	r2, #0
 800887a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800887c:	7cfb      	ldrb	r3, [r7, #19]
 800887e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008882:	2b21      	cmp	r3, #33	; 0x21
 8008884:	d007      	beq.n	8008896 <I2C_DMAXferCplt+0x6e>
 8008886:	7cfb      	ldrb	r3, [r7, #19]
 8008888:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800888c:	2b22      	cmp	r3, #34	; 0x22
 800888e:	d131      	bne.n	80088f4 <I2C_DMAXferCplt+0xcc>
 8008890:	7cbb      	ldrb	r3, [r7, #18]
 8008892:	2b20      	cmp	r3, #32
 8008894:	d12e      	bne.n	80088f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2200      	movs	r2, #0
 80088aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80088ac:	7cfb      	ldrb	r3, [r7, #19]
 80088ae:	2b29      	cmp	r3, #41	; 0x29
 80088b0:	d10a      	bne.n	80088c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2221      	movs	r2, #33	; 0x21
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2228      	movs	r2, #40	; 0x28
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088c0:	6978      	ldr	r0, [r7, #20]
 80088c2:	f7fe fcfc 	bl	80072be <HAL_I2C_SlaveTxCpltCallback>
 80088c6:	e00c      	b.n	80088e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088c8:	7cfb      	ldrb	r3, [r7, #19]
 80088ca:	2b2a      	cmp	r3, #42	; 0x2a
 80088cc:	d109      	bne.n	80088e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2222      	movs	r2, #34	; 0x22
 80088d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2228      	movs	r2, #40	; 0x28
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088dc:	6978      	ldr	r0, [r7, #20]
 80088de:	f7fe fcf8 	bl	80072d2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80088f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80088f2:	e06a      	b.n	80089ca <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d064      	beq.n	80089ca <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d107      	bne.n	800891a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008918:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008928:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008930:	d009      	beq.n	8008946 <I2C_DMAXferCplt+0x11e>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b08      	cmp	r3, #8
 8008936:	d006      	beq.n	8008946 <I2C_DMAXferCplt+0x11e>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800893e:	d002      	beq.n	8008946 <I2C_DMAXferCplt+0x11e>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b20      	cmp	r3, #32
 8008944:	d107      	bne.n	8008956 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008954:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008964:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008974:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2200      	movs	r2, #0
 800897a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008984:	6978      	ldr	r0, [r7, #20]
 8008986:	f7fe fcd0 	bl	800732a <HAL_I2C_ErrorCallback>
}
 800898a:	e01e      	b.n	80089ca <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d10a      	bne.n	80089b6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2200      	movs	r2, #0
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80089ae:	6978      	ldr	r0, [r7, #20]
 80089b0:	f7fe fcb1 	bl	8007316 <HAL_I2C_MemRxCpltCallback>
}
 80089b4:	e009      	b.n	80089ca <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2212      	movs	r2, #18
 80089c2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80089c4:	6978      	ldr	r0, [r7, #20]
 80089c6:	f7fe fc70 	bl	80072aa <HAL_I2C_MasterRxCpltCallback>
}
 80089ca:	bf00      	nop
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	2200      	movs	r2, #0
 80089ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	2200      	movs	r2, #0
 80089fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7fd fb27 	bl	8006054 <HAL_DMA_GetError>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d01b      	beq.n	8008a44 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a1a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f043 0210 	orr.w	r2, r3, #16
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7fe fc73 	bl	800732a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a66:	4b4b      	ldr	r3, [pc, #300]	; (8008b94 <I2C_DMAAbort+0x148>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	08db      	lsrs	r3, r3, #3
 8008a6c:	4a4a      	ldr	r2, [pc, #296]	; (8008b98 <I2C_DMAAbort+0x14c>)
 8008a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a72:	0a1a      	lsrs	r2, r3, #8
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	00da      	lsls	r2, r3, #3
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f043 0220 	orr.w	r2, r3, #32
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008a92:	e00a      	b.n	8008aaa <I2C_DMAAbort+0x5e>
    }
    count--;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa8:	d0ea      	beq.n	8008a80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ad8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	2200      	movs	r2, #0
 8008aee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	2200      	movs	r2, #0
 8008afe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b60      	cmp	r3, #96	; 0x60
 8008b1a:	d10e      	bne.n	8008b3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b32:	6978      	ldr	r0, [r7, #20]
 8008b34:	f7fe fc03 	bl	800733e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b38:	e027      	b.n	8008b8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b3a:	7cfb      	ldrb	r3, [r7, #19]
 8008b3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b40:	2b28      	cmp	r3, #40	; 0x28
 8008b42:	d117      	bne.n	8008b74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 0201 	orr.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2200      	movs	r2, #0
 8008b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2228      	movs	r2, #40	; 0x28
 8008b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b72:	e007      	b.n	8008b84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008b84:	6978      	ldr	r0, [r7, #20]
 8008b86:	f7fe fbd0 	bl	800732a <HAL_I2C_ErrorCallback>
}
 8008b8a:	bf00      	nop
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000000 	.word	0x20000000
 8008b98:	14f8b589 	.word	0x14f8b589

08008b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bac:	e025      	b.n	8008bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb4:	d021      	beq.n	8008bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb6:	f7fb fd5d 	bl	8004674 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d302      	bcc.n	8008bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d116      	bne.n	8008bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e023      	b.n	8008c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	0c1b      	lsrs	r3, r3, #16
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d10d      	bne.n	8008c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	43da      	mvns	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bf0c      	ite	eq
 8008c16:	2301      	moveq	r3, #1
 8008c18:	2300      	movne	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	e00c      	b.n	8008c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	43da      	mvns	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bf0c      	ite	eq
 8008c32:	2301      	moveq	r3, #1
 8008c34:	2300      	movne	r3, #0
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d0b6      	beq.n	8008bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	60f8      	str	r0, [r7, #12]
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
 8008c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c58:	e051      	b.n	8008cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c68:	d123      	bne.n	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f043 0204 	orr.w	r2, r3, #4
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e046      	b.n	8008d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb8:	d021      	beq.n	8008cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cba:	f7fb fcdb 	bl	8004674 <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d302      	bcc.n	8008cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d116      	bne.n	8008cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	f043 0220 	orr.w	r2, r3, #32
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e020      	b.n	8008d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	0c1b      	lsrs	r3, r3, #16
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10c      	bne.n	8008d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	43da      	mvns	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	4013      	ands	r3, r2
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bf14      	ite	ne
 8008d1a:	2301      	movne	r3, #1
 8008d1c:	2300      	moveq	r3, #0
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	e00b      	b.n	8008d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	43da      	mvns	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d18d      	bne.n	8008c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d54:	e02d      	b.n	8008db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 f8c0 	bl	8008edc <I2C_IsAcknowledgeFailed>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e02d      	b.n	8008dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d021      	beq.n	8008db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6e:	f7fb fc81 	bl	8004674 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d302      	bcc.n	8008d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d116      	bne.n	8008db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e007      	b.n	8008dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbc:	2b80      	cmp	r3, #128	; 0x80
 8008dbe:	d1ca      	bne.n	8008d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008dd8:	4b13      	ldr	r3, [pc, #76]	; (8008e28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	08db      	lsrs	r3, r3, #3
 8008dde:	4a13      	ldr	r2, [pc, #76]	; (8008e2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008de0:	fba2 2303 	umull	r2, r3, r2, r3
 8008de4:	0a1a      	lsrs	r2, r3, #8
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d107      	bne.n	8008e0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	f043 0220 	orr.w	r2, r3, #32
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e008      	b.n	8008e1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e18:	d0e9      	beq.n	8008dee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	20000000 	.word	0x20000000
 8008e2c:	14f8b589 	.word	0x14f8b589

08008e30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e3c:	e042      	b.n	8008ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b10      	cmp	r3, #16
 8008e4a:	d119      	bne.n	8008e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f06f 0210 	mvn.w	r2, #16
 8008e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e029      	b.n	8008ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e80:	f7fb fbf8 	bl	8004674 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d302      	bcc.n	8008e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d116      	bne.n	8008ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb0:	f043 0220 	orr.w	r2, r3, #32
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e007      	b.n	8008ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ece:	2b40      	cmp	r3, #64	; 0x40
 8008ed0:	d1b5      	bne.n	8008e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef2:	d11b      	bne.n	8008f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	f043 0204 	orr.w	r2, r3, #4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008f4a:	d103      	bne.n	8008f54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f52:	e007      	b.n	8008f64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008f5c:	d102      	bne.n	8008f64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2208      	movs	r2, #8
 8008f62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f72:	b08f      	sub	sp, #60	; 0x3c
 8008f74:	af0a      	add	r7, sp, #40	; 0x28
 8008f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e116      	b.n	80091b0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d106      	bne.n	8008fa2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f006 fdd1 	bl	800fb44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d102      	bne.n	8008fbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f003 fc3c 	bl	800c83e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	687e      	ldr	r6, [r7, #4]
 8008fce:	466d      	mov	r5, sp
 8008fd0:	f106 0410 	add.w	r4, r6, #16
 8008fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008fe0:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fe4:	1d33      	adds	r3, r6, #4
 8008fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fe8:	6838      	ldr	r0, [r7, #0]
 8008fea:	f003 fb13 	bl	800c614 <USB_CoreInit>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e0d7      	b.n	80091b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f003 fc2a 	bl	800c860 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	e04a      	b.n	80090a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009012:	7bfa      	ldrb	r2, [r7, #15]
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	4613      	mov	r3, r2
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	440b      	add	r3, r1
 8009020:	333d      	adds	r3, #61	; 0x3d
 8009022:	2201      	movs	r2, #1
 8009024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009026:	7bfa      	ldrb	r2, [r7, #15]
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	1a9b      	subs	r3, r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	333c      	adds	r3, #60	; 0x3c
 8009036:	7bfa      	ldrb	r2, [r7, #15]
 8009038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800903a:	7bfa      	ldrb	r2, [r7, #15]
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	b298      	uxth	r0, r3
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4613      	mov	r3, r2
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	3342      	adds	r3, #66	; 0x42
 800904e:	4602      	mov	r2, r0
 8009050:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009052:	7bfa      	ldrb	r2, [r7, #15]
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	1a9b      	subs	r3, r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	333f      	adds	r3, #63	; 0x3f
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009066:	7bfa      	ldrb	r2, [r7, #15]
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	3344      	adds	r3, #68	; 0x44
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800907a:	7bfa      	ldrb	r2, [r7, #15]
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	4613      	mov	r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	3348      	adds	r3, #72	; 0x48
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800908e:	7bfa      	ldrb	r2, [r7, #15]
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	3350      	adds	r3, #80	; 0x50
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	3301      	adds	r3, #1
 80090a6:	73fb      	strb	r3, [r7, #15]
 80090a8:	7bfa      	ldrb	r2, [r7, #15]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d3af      	bcc.n	8009012 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
 80090b6:	e044      	b.n	8009142 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80090b8:	7bfa      	ldrb	r2, [r7, #15]
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	4613      	mov	r3, r2
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80090ce:	7bfa      	ldrb	r2, [r7, #15]
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	00db      	lsls	r3, r3, #3
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80090e0:	7bfa      	ldrb	r2, [r7, #15]
 80090e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80090e4:	7bfa      	ldrb	r2, [r7, #15]
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80090fa:	7bfa      	ldrb	r2, [r7, #15]
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009110:	7bfa      	ldrb	r2, [r7, #15]
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	4613      	mov	r3, r2
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	1a9b      	subs	r3, r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009126:	7bfa      	ldrb	r2, [r7, #15]
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	3301      	adds	r3, #1
 8009140:	73fb      	strb	r3, [r7, #15]
 8009142:	7bfa      	ldrb	r2, [r7, #15]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d3b5      	bcc.n	80090b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	687e      	ldr	r6, [r7, #4]
 8009154:	466d      	mov	r5, sp
 8009156:	f106 0410 	add.w	r4, r6, #16
 800915a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800915c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800915e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009166:	e885 0003 	stmia.w	r5, {r0, r1}
 800916a:	1d33      	adds	r3, r6, #4
 800916c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800916e:	6838      	ldr	r0, [r7, #0]
 8009170:	f003 fbc2 	bl	800c8f8 <USB_DevInit>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d005      	beq.n	8009186 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2202      	movs	r2, #2
 800917e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e014      	b.n	80091b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 f892 	bl	800a2c8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f004 fc31 	bl	800da10 <USB_DevDisconnect>

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_PCD_Start+0x1c>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e020      	b.n	8009216 <HAL_PCD_Start+0x5e>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d109      	bne.n	80091f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d005      	beq.n	80091f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f003 fb0d 	bl	800c81c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f004 fbe1 	bl	800d9ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800921e:	b590      	push	{r4, r7, lr}
 8009220:	b08d      	sub	sp, #52	; 0x34
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4618      	mov	r0, r3
 8009236:	f004 fc9f 	bl	800db78 <USB_GetMode>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	f040 83ca 	bne.w	80099d6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f004 fc03 	bl	800da52 <USB_ReadInterrupts>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 83c0 	beq.w	80099d4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f004 fbfa 	bl	800da52 <USB_ReadInterrupts>
 800925e:	4603      	mov	r3, r0
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b02      	cmp	r3, #2
 8009266:	d107      	bne.n	8009278 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	695a      	ldr	r2, [r3, #20]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f002 0202 	and.w	r2, r2, #2
 8009276:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4618      	mov	r0, r3
 800927e:	f004 fbe8 	bl	800da52 <USB_ReadInterrupts>
 8009282:	4603      	mov	r3, r0
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b10      	cmp	r3, #16
 800928a:	d161      	bne.n	8009350 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699a      	ldr	r2, [r3, #24]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0210 	bic.w	r2, r2, #16
 800929a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f003 020f 	and.w	r2, r3, #15
 80092a8:	4613      	mov	r3, r2
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	1a9b      	subs	r3, r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	4413      	add	r3, r2
 80092b8:	3304      	adds	r3, #4
 80092ba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	0c5b      	lsrs	r3, r3, #17
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d124      	bne.n	8009312 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d035      	beq.n	8009340 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80092de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	6a38      	ldr	r0, [r7, #32]
 80092e8:	f004 fa1f 	bl	800d72a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	091b      	lsrs	r3, r3, #4
 80092f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092f8:	441a      	add	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	091b      	lsrs	r3, r3, #4
 8009306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800930a:	441a      	add	r2, r3
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	619a      	str	r2, [r3, #24]
 8009310:	e016      	b.n	8009340 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	0c5b      	lsrs	r3, r3, #17
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	2b06      	cmp	r3, #6
 800931c:	d110      	bne.n	8009340 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009324:	2208      	movs	r2, #8
 8009326:	4619      	mov	r1, r3
 8009328:	6a38      	ldr	r0, [r7, #32]
 800932a:	f004 f9fe 	bl	800d72a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	091b      	lsrs	r3, r3, #4
 8009336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800933a:	441a      	add	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0210 	orr.w	r2, r2, #16
 800934e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4618      	mov	r0, r3
 8009356:	f004 fb7c 	bl	800da52 <USB_ReadInterrupts>
 800935a:	4603      	mov	r3, r0
 800935c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009360:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009364:	d16e      	bne.n	8009444 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f004 fb82 	bl	800da78 <USB_ReadDevAllOutEpInterrupt>
 8009374:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009376:	e062      	b.n	800943e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d057      	beq.n	8009432 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009388:	b2d2      	uxtb	r2, r2
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f004 fba7 	bl	800dae0 <USB_ReadDevOutEPInterrupt>
 8009392:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00c      	beq.n	80093b8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	461a      	mov	r2, r3
 80093ac:	2301      	movs	r3, #1
 80093ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80093b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fdde 	bl	8009f74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00c      	beq.n	80093dc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ce:	461a      	mov	r2, r3
 80093d0:	2308      	movs	r3, #8
 80093d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80093d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fed8 	bl	800a18c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d008      	beq.n	80093f8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f2:	461a      	mov	r2, r3
 80093f4:	2310      	movs	r3, #16
 80093f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d008      	beq.n	8009414 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	461a      	mov	r2, r3
 8009410:	2320      	movs	r3, #32
 8009412:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942a:	461a      	mov	r2, r3
 800942c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009430:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	3301      	adds	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	2b00      	cmp	r3, #0
 8009442:	d199      	bne.n	8009378 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f004 fb02 	bl	800da52 <USB_ReadInterrupts>
 800944e:	4603      	mov	r3, r0
 8009450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009454:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009458:	f040 80c0 	bne.w	80095dc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f004 fb23 	bl	800daac <USB_ReadDevAllInEpInterrupt>
 8009466:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800946c:	e0b2      	b.n	80095d4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80a7 	beq.w	80095c8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	4611      	mov	r1, r2
 8009484:	4618      	mov	r0, r3
 8009486:	f004 fb49 	bl	800db1c <USB_ReadDevInEPInterrupt>
 800948a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d057      	beq.n	8009546 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	f003 030f 	and.w	r3, r3, #15
 800949c:	2201      	movs	r2, #1
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	43db      	mvns	r3, r3
 80094b0:	69f9      	ldr	r1, [r7, #28]
 80094b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094b6:	4013      	ands	r3, r2
 80094b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	461a      	mov	r2, r3
 80094c8:	2301      	movs	r3, #1
 80094ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d132      	bne.n	800953a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d8:	4613      	mov	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	3348      	adds	r3, #72	; 0x48
 80094e4:	6819      	ldr	r1, [r3, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ea:	4613      	mov	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4403      	add	r3, r0
 80094f4:	3344      	adds	r3, #68	; 0x44
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4419      	add	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fe:	4613      	mov	r3, r2
 8009500:	00db      	lsls	r3, r3, #3
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4403      	add	r3, r0
 8009508:	3348      	adds	r3, #72	; 0x48
 800950a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	2b00      	cmp	r3, #0
 8009510:	d113      	bne.n	800953a <HAL_PCD_IRQHandler+0x31c>
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009516:	4613      	mov	r3, r2
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	1a9b      	subs	r3, r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	440b      	add	r3, r1
 8009520:	3350      	adds	r3, #80	; 0x50
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d108      	bne.n	800953a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009532:	461a      	mov	r2, r3
 8009534:	2101      	movs	r1, #1
 8009536:	f004 fb51 	bl	800dbdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	b2db      	uxtb	r3, r3
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f006 fbae 	bl	800fca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	461a      	mov	r2, r3
 800955e:	2308      	movs	r3, #8
 8009560:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f003 0310 	and.w	r3, r3, #16
 8009568:	2b00      	cmp	r3, #0
 800956a:	d008      	beq.n	800957e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009578:	461a      	mov	r2, r3
 800957a:	2310      	movs	r3, #16
 800957c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009584:	2b00      	cmp	r3, #0
 8009586:	d008      	beq.n	800959a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	461a      	mov	r2, r3
 8009596:	2340      	movs	r3, #64	; 0x40
 8009598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d008      	beq.n	80095b6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b0:	461a      	mov	r2, r3
 80095b2:	2302      	movs	r3, #2
 80095b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80095c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fc48 	bl	8009e58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	3301      	adds	r3, #1
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	085b      	lsrs	r3, r3, #1
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f47f af49 	bne.w	800946e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f004 fa36 	bl	800da52 <USB_ReadInterrupts>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f0:	d122      	bne.n	8009638 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800960c:	2b01      	cmp	r3, #1
 800960e:	d108      	bne.n	8009622 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f006 fd90 	bl	8010140 <HAL_PCDEx_LPM_Callback>
 8009620:	e002      	b.n	8009628 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f006 fbb4 	bl	800fd90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695a      	ldr	r2, [r3, #20]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f004 fa08 	bl	800da52 <USB_ReadInterrupts>
 8009642:	4603      	mov	r3, r0
 8009644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800964c:	d112      	bne.n	8009674 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b01      	cmp	r3, #1
 800965c:	d102      	bne.n	8009664 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f006 fb70 	bl	800fd44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	695a      	ldr	r2, [r3, #20]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009672:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f004 f9ea 	bl	800da52 <USB_ReadInterrupts>
 800967e:	4603      	mov	r3, r0
 8009680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009688:	d121      	bne.n	80096ce <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009698:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d111      	bne.n	80096c8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b2:	089b      	lsrs	r3, r3, #2
 80096b4:	f003 020f 	and.w	r2, r3, #15
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80096be:	2101      	movs	r1, #1
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f006 fd3d 	bl	8010140 <HAL_PCDEx_LPM_Callback>
 80096c6:	e002      	b.n	80096ce <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f006 fb3b 	bl	800fd44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f004 f9bd 	bl	800da52 <USB_ReadInterrupts>
 80096d8:	4603      	mov	r3, r0
 80096da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e2:	f040 80c7 	bne.w	8009874 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096f4:	f023 0301 	bic.w	r3, r3, #1
 80096f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2110      	movs	r1, #16
 8009700:	4618      	mov	r0, r3
 8009702:	f003 fa57 	bl	800cbb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009706:	2300      	movs	r3, #0
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800970a:	e056      	b.n	80097ba <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	461a      	mov	r2, r3
 800971a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800971e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009730:	0151      	lsls	r1, r2, #5
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	440a      	add	r2, r1
 8009736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800973a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800973e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009750:	0151      	lsls	r1, r2, #5
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	440a      	add	r2, r1
 8009756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800975a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800975e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976c:	461a      	mov	r2, r3
 800976e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009772:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	69fa      	ldr	r2, [r7, #28]
 8009788:	440a      	add	r2, r1
 800978a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800978e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009792:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	3301      	adds	r3, #1
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d3a3      	bcc.n	800970c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80097d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d016      	beq.n	800980e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097f0:	f043 030b 	orr.w	r3, r3, #11
 80097f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009806:	f043 030b 	orr.w	r3, r3, #11
 800980a:	6453      	str	r3, [r2, #68]	; 0x44
 800980c:	e015      	b.n	800983a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800981c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009820:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009824:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009834:	f043 030b 	orr.w	r3, r3, #11
 8009838:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009848:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800984c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800985e:	461a      	mov	r2, r3
 8009860:	f004 f9bc 	bl	800dbdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	695a      	ldr	r2, [r3, #20]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f004 f8ea 	bl	800da52 <USB_ReadInterrupts>
 800987e:	4603      	mov	r3, r0
 8009880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009888:	d124      	bne.n	80098d4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f004 f980 	bl	800db94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	f003 f9e8 	bl	800cc6e <USB_GetDevSpeed>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681c      	ldr	r4, [r3, #0]
 80098aa:	f000 fe67 	bl	800a57c <HAL_RCC_GetHCLKFreq>
 80098ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	461a      	mov	r2, r3
 80098b8:	4620      	mov	r0, r4
 80098ba:	f002 ff0d 	bl	800c6d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f006 fa17 	bl	800fcf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80098d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f004 f8ba 	bl	800da52 <USB_ReadInterrupts>
 80098de:	4603      	mov	r3, r0
 80098e0:	f003 0308 	and.w	r3, r3, #8
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d10a      	bne.n	80098fe <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f006 f9f4 	bl	800fcd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	695a      	ldr	r2, [r3, #20]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f002 0208 	and.w	r2, r2, #8
 80098fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	f004 f8a5 	bl	800da52 <USB_ReadInterrupts>
 8009908:	4603      	mov	r3, r0
 800990a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800990e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009912:	d10f      	bne.n	8009934 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	b2db      	uxtb	r3, r3
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f006 fa56 	bl	800fdd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f004 f88a 	bl	800da52 <USB_ReadInterrupts>
 800993e:	4603      	mov	r3, r0
 8009940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009948:	d10f      	bne.n	800996a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f006 fa29 	bl	800fdac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f004 f86f 	bl	800da52 <USB_ReadInterrupts>
 8009974:	4603      	mov	r3, r0
 8009976:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997e:	d10a      	bne.n	8009996 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f006 fa37 	bl	800fdf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	695a      	ldr	r2, [r3, #20]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f004 f859 	bl	800da52 <USB_ReadInterrupts>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f003 0304 	and.w	r3, r3, #4
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	d115      	bne.n	80099d6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f006 fa27 	bl	800fe10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6859      	ldr	r1, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	605a      	str	r2, [r3, #4]
 80099d2:	e000      	b.n	80099d6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80099d4:	bf00      	nop
    }
  }
}
 80099d6:	3734      	adds	r7, #52	; 0x34
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd90      	pop	{r4, r7, pc}

080099dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <HAL_PCD_SetAddress+0x1a>
 80099f2:	2302      	movs	r3, #2
 80099f4:	e013      	b.n	8009a1e <HAL_PCD_SetAddress+0x42>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	78fa      	ldrb	r2, [r7, #3]
 8009a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	78fa      	ldrb	r2, [r7, #3]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f003 ffb7 	bl	800d982 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	4608      	mov	r0, r1
 8009a30:	4611      	mov	r1, r2
 8009a32:	461a      	mov	r2, r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	70fb      	strb	r3, [r7, #3]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	803b      	strh	r3, [r7, #0]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	da0f      	bge.n	8009a6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	f003 020f 	and.w	r2, r3, #15
 8009a52:	4613      	mov	r3, r2
 8009a54:	00db      	lsls	r3, r3, #3
 8009a56:	1a9b      	subs	r3, r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	3338      	adds	r3, #56	; 0x38
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	4413      	add	r3, r2
 8009a60:	3304      	adds	r3, #4
 8009a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2201      	movs	r2, #1
 8009a68:	705a      	strb	r2, [r3, #1]
 8009a6a:	e00f      	b.n	8009a8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	f003 020f 	and.w	r2, r3, #15
 8009a72:	4613      	mov	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4413      	add	r3, r2
 8009a82:	3304      	adds	r3, #4
 8009a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	f003 030f 	and.w	r3, r3, #15
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009a98:	883a      	ldrh	r2, [r7, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	78ba      	ldrb	r2, [r7, #2]
 8009aa2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009ab6:	78bb      	ldrb	r3, [r7, #2]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d102      	bne.n	8009ac2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_PCD_EP_Open+0xaa>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e00e      	b.n	8009aee <HAL_PCD_EP_Open+0xc8>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68f9      	ldr	r1, [r7, #12]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f003 f8ea 	bl	800ccb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	da0f      	bge.n	8009b2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	f003 020f 	and.w	r2, r3, #15
 8009b10:	4613      	mov	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	3338      	adds	r3, #56	; 0x38
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3304      	adds	r3, #4
 8009b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	705a      	strb	r2, [r3, #1]
 8009b28:	e00f      	b.n	8009b4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	f003 020f 	and.w	r2, r3, #15
 8009b30:	4613      	mov	r3, r2
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	4413      	add	r3, r2
 8009b40:	3304      	adds	r3, #4
 8009b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_PCD_EP_Close+0x6e>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e00e      	b.n	8009b82 <HAL_PCD_EP_Close+0x8c>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68f9      	ldr	r1, [r7, #12]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f003 f928 	bl	800cdc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b086      	sub	sp, #24
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
 8009b96:	460b      	mov	r3, r1
 8009b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	f003 020f 	and.w	r2, r3, #15
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bcc:	7afb      	ldrb	r3, [r7, #11]
 8009bce:	f003 030f 	and.w	r3, r3, #15
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d102      	bne.n	8009be6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	f003 030f 	and.w	r3, r3, #15
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d109      	bne.n	8009c04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	6979      	ldr	r1, [r7, #20]
 8009bfe:	f003 fc03 	bl	800d408 <USB_EP0StartXfer>
 8009c02:	e008      	b.n	8009c16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	6979      	ldr	r1, [r7, #20]
 8009c12:	f003 f9b5 	bl	800cf80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	f003 020f 	and.w	r2, r3, #15
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4613      	mov	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009c42:	681b      	ldr	r3, [r3, #0]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	607a      	str	r2, [r7, #4]
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	f003 020f 	and.w	r2, r3, #15
 8009c66:	4613      	mov	r3, r2
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	3338      	adds	r3, #56	; 0x38
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	3304      	adds	r3, #4
 8009c76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2200      	movs	r2, #0
 8009c88:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	f003 030f 	and.w	r3, r3, #15
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d102      	bne.n	8009caa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6979      	ldr	r1, [r7, #20]
 8009cc2:	f003 fba1 	bl	800d408 <USB_EP0StartXfer>
 8009cc6:	e008      	b.n	8009cda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6979      	ldr	r1, [r7, #20]
 8009cd6:	f003 f953 	bl	800cf80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	f003 020f 	and.w	r2, r3, #15
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d901      	bls.n	8009d02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e050      	b.n	8009da4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da0f      	bge.n	8009d2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	f003 020f 	and.w	r2, r3, #15
 8009d10:	4613      	mov	r3, r2
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	3338      	adds	r3, #56	; 0x38
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	3304      	adds	r3, #4
 8009d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	705a      	strb	r2, [r3, #1]
 8009d28:	e00d      	b.n	8009d46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	1a9b      	subs	r3, r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_PCD_EP_SetStall+0x82>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e01e      	b.n	8009da4 <HAL_PCD_EP_SetStall+0xc0>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f003 fd30 	bl	800d7da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6818      	ldr	r0, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	b2d9      	uxtb	r1, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d94:	461a      	mov	r2, r3
 8009d96:	f003 ff21 	bl	800dbdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	f003 020f 	and.w	r2, r3, #15
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d901      	bls.n	8009dca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e042      	b.n	8009e50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	da0f      	bge.n	8009df2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	f003 020f 	and.w	r2, r3, #15
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	3338      	adds	r3, #56	; 0x38
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	3304      	adds	r3, #4
 8009de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	705a      	strb	r2, [r3, #1]
 8009df0:	e00f      	b.n	8009e12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	4613      	mov	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	4413      	add	r3, r2
 8009e08:	3304      	adds	r3, #4
 8009e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	f003 030f 	and.w	r3, r3, #15
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <HAL_PCD_EP_ClrStall+0x86>
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e00e      	b.n	8009e50 <HAL_PCD_EP_ClrStall+0xa4>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f003 fd38 	bl	800d8b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08a      	sub	sp, #40	; 0x28
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	3338      	adds	r3, #56	; 0x38
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	699a      	ldr	r2, [r3, #24]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d901      	bls.n	8009e90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e06c      	b.n	8009f6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	695a      	ldr	r2, [r3, #20]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d902      	bls.n	8009eac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	3303      	adds	r3, #3
 8009eb0:	089b      	lsrs	r3, r3, #2
 8009eb2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009eb4:	e02b      	b.n	8009f0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	695a      	ldr	r2, [r3, #20]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d902      	bls.n	8009ed2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	3303      	adds	r3, #3
 8009ed6:	089b      	lsrs	r3, r3, #2
 8009ed8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	68d9      	ldr	r1, [r3, #12]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4603      	mov	r3, r0
 8009ef0:	6978      	ldr	r0, [r7, #20]
 8009ef2:	f003 fbdc 	bl	800d6ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	441a      	add	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d809      	bhi.n	8009f38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d203      	bcs.n	8009f38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1be      	bne.n	8009eb6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	695a      	ldr	r2, [r3, #20]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d811      	bhi.n	8009f68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	f003 030f 	and.w	r3, r3, #15
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	43db      	mvns	r3, r3
 8009f5e:	6939      	ldr	r1, [r7, #16]
 8009f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f64:	4013      	ands	r3, r2
 8009f66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3720      	adds	r7, #32
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	333c      	adds	r3, #60	; 0x3c
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	f040 80a0 	bne.w	800a0ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 0308 	and.w	r3, r3, #8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d015      	beq.n	8009fe2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4a72      	ldr	r2, [pc, #456]	; (800a184 <PCD_EP_OutXfrComplete_int+0x210>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	f240 80dd 	bls.w	800a17a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80d7 	beq.w	800a17a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fde:	6093      	str	r3, [r2, #8]
 8009fe0:	e0cb      	b.n	800a17a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f003 0320 	and.w	r3, r3, #32
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d009      	beq.n	800a000 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	2320      	movs	r3, #32
 8009ffc:	6093      	str	r3, [r2, #8]
 8009ffe:	e0bc      	b.n	800a17a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	f040 80b7 	bne.w	800a17a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a5d      	ldr	r2, [pc, #372]	; (800a184 <PCD_EP_OutXfrComplete_int+0x210>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d90f      	bls.n	800a034 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a02a:	461a      	mov	r2, r3
 800a02c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a030:	6093      	str	r3, [r2, #8]
 800a032:	e0a2      	b.n	800a17a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4613      	mov	r3, r2
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	1a9b      	subs	r3, r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a046:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	0159      	lsls	r1, r3, #5
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	440b      	add	r3, r1
 800a050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a05a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	4613      	mov	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4403      	add	r3, r0
 800a06a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a06e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a082:	6819      	ldr	r1, [r3, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4613      	mov	r3, r2
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4403      	add	r3, r0
 800a092:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4419      	add	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	1a9b      	subs	r3, r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4403      	add	r3, r0
 800a0a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a0ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d114      	bne.n	800a0de <PCD_EP_OutXfrComplete_int+0x16a>
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d108      	bne.n	800a0de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	2101      	movs	r1, #1
 800a0da:	f003 fd7f 	bl	800dbdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f005 fdc1 	bl	800fc6c <HAL_PCD_DataOutStageCallback>
 800a0ea:	e046      	b.n	800a17a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	4a26      	ldr	r2, [pc, #152]	; (800a188 <PCD_EP_OutXfrComplete_int+0x214>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d124      	bne.n	800a13e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a10a:	461a      	mov	r2, r3
 800a10c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a110:	6093      	str	r3, [r2, #8]
 800a112:	e032      	b.n	800a17a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 0320 	and.w	r3, r3, #32
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12a:	461a      	mov	r2, r3
 800a12c:	2320      	movs	r3, #32
 800a12e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f005 fd98 	bl	800fc6c <HAL_PCD_DataOutStageCallback>
 800a13c:	e01d      	b.n	800a17a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d114      	bne.n	800a16e <PCD_EP_OutXfrComplete_int+0x1fa>
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4613      	mov	r3, r2
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	1a9b      	subs	r3, r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d108      	bne.n	800a16e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a166:	461a      	mov	r2, r3
 800a168:	2100      	movs	r1, #0
 800a16a:	f003 fd37 	bl	800dbdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	b2db      	uxtb	r3, r3
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f005 fd79 	bl	800fc6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	4f54300a 	.word	0x4f54300a
 800a188:	4f54310a 	.word	0x4f54310a

0800a18c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	333c      	adds	r3, #60	; 0x3c
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4a15      	ldr	r2, [pc, #84]	; (800a214 <PCD_EP_OutSetupPacket_int+0x88>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d90e      	bls.n	800a1e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f005 fd31 	bl	800fc48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <PCD_EP_OutSetupPacket_int+0x88>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d90c      	bls.n	800a208 <PCD_EP_OutSetupPacket_int+0x7c>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d108      	bne.n	800a208 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a200:	461a      	mov	r2, r3
 800a202:	2101      	movs	r1, #1
 800a204:	f003 fcea 	bl	800dbdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	4f54300a 	.word	0x4f54300a

0800a218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
 800a224:	4613      	mov	r3, r2
 800a226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d107      	bne.n	800a246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a236:	883b      	ldrh	r3, [r7, #0]
 800a238:	0419      	lsls	r1, r3, #16
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	430a      	orrs	r2, r1
 800a242:	629a      	str	r2, [r3, #40]	; 0x28
 800a244:	e028      	b.n	800a298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24c:	0c1b      	lsrs	r3, r3, #16
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4413      	add	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
 800a258:	e00d      	b.n	800a276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	3340      	adds	r3, #64	; 0x40
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4413      	add	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	3301      	adds	r3, #1
 800a274:	73fb      	strb	r3, [r7, #15]
 800a276:	7bfa      	ldrb	r2, [r7, #15]
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d3ec      	bcc.n	800a25a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a280:	883b      	ldrh	r3, [r7, #0]
 800a282:	0418      	lsls	r0, r3, #16
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6819      	ldr	r1, [r3, #0]
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	4302      	orrs	r2, r0
 800a290:	3340      	adds	r3, #64	; 0x40
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	440b      	add	r3, r1
 800a296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	887a      	ldrh	r2, [r7, #2]
 800a2b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2fa:	f043 0303 	orr.w	r3, r3, #3
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a31a:	2300      	movs	r3, #0
 800a31c:	603b      	str	r3, [r7, #0]
 800a31e:	4b20      	ldr	r3, [pc, #128]	; (800a3a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800a324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a328:	6413      	str	r3, [r2, #64]	; 0x40
 800a32a:	4b1d      	ldr	r3, [pc, #116]	; (800a3a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a336:	4b1b      	ldr	r3, [pc, #108]	; (800a3a4 <HAL_PWREx_EnableOverDrive+0x94>)
 800a338:	2201      	movs	r2, #1
 800a33a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a33c:	f7fa f99a 	bl	8004674 <HAL_GetTick>
 800a340:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a342:	e009      	b.n	800a358 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a344:	f7fa f996 	bl	8004674 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a352:	d901      	bls.n	800a358 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e01f      	b.n	800a398 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a358:	4b13      	ldr	r3, [pc, #76]	; (800a3a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a364:	d1ee      	bne.n	800a344 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a366:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a368:	2201      	movs	r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a36c:	f7fa f982 	bl	8004674 <HAL_GetTick>
 800a370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a372:	e009      	b.n	800a388 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a374:	f7fa f97e 	bl	8004674 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a382:	d901      	bls.n	800a388 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e007      	b.n	800a398 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a388:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a394:	d1ee      	bne.n	800a374 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	40023800 	.word	0x40023800
 800a3a4:	420e0040 	.word	0x420e0040
 800a3a8:	40007000 	.word	0x40007000
 800a3ac:	420e0044 	.word	0x420e0044

0800a3b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e0cc      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3c4:	4b68      	ldr	r3, [pc, #416]	; (800a568 <HAL_RCC_ClockConfig+0x1b8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d90c      	bls.n	800a3ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3d2:	4b65      	ldr	r3, [pc, #404]	; (800a568 <HAL_RCC_ClockConfig+0x1b8>)
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	b2d2      	uxtb	r2, r2
 800a3d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3da:	4b63      	ldr	r3, [pc, #396]	; (800a568 <HAL_RCC_ClockConfig+0x1b8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e0b8      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d020      	beq.n	800a43a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a404:	4b59      	ldr	r3, [pc, #356]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	4a58      	ldr	r2, [pc, #352]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a40a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a40e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0308 	and.w	r3, r3, #8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a41c:	4b53      	ldr	r3, [pc, #332]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	4a52      	ldr	r2, [pc, #328]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a428:	4b50      	ldr	r3, [pc, #320]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	494d      	ldr	r1, [pc, #308]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a436:	4313      	orrs	r3, r2
 800a438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d044      	beq.n	800a4d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d107      	bne.n	800a45e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a44e:	4b47      	ldr	r3, [pc, #284]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d119      	bne.n	800a48e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e07f      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d003      	beq.n	800a46e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d107      	bne.n	800a47e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a46e:	4b3f      	ldr	r3, [pc, #252]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d109      	bne.n	800a48e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e06f      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a47e:	4b3b      	ldr	r3, [pc, #236]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e067      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a48e:	4b37      	ldr	r3, [pc, #220]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f023 0203 	bic.w	r2, r3, #3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	4934      	ldr	r1, [pc, #208]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4a0:	f7fa f8e8 	bl	8004674 <HAL_GetTick>
 800a4a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4a6:	e00a      	b.n	800a4be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4a8:	f7fa f8e4 	bl	8004674 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e04f      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4be:	4b2b      	ldr	r3, [pc, #172]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f003 020c 	and.w	r2, r3, #12
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d1eb      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <HAL_RCC_ClockConfig+0x1b8>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d20c      	bcs.n	800a4f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4de:	4b22      	ldr	r3, [pc, #136]	; (800a568 <HAL_RCC_ClockConfig+0x1b8>)
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	b2d2      	uxtb	r2, r2
 800a4e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4e6:	4b20      	ldr	r3, [pc, #128]	; (800a568 <HAL_RCC_ClockConfig+0x1b8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d001      	beq.n	800a4f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e032      	b.n	800a55e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d008      	beq.n	800a516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a504:	4b19      	ldr	r3, [pc, #100]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	4916      	ldr	r1, [pc, #88]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a512:	4313      	orrs	r3, r2
 800a514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a522:	4b12      	ldr	r3, [pc, #72]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	490e      	ldr	r1, [pc, #56]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a532:	4313      	orrs	r3, r2
 800a534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a536:	f000 fb6b 	bl	800ac10 <HAL_RCC_GetSysClockFreq>
 800a53a:	4602      	mov	r2, r0
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <HAL_RCC_ClockConfig+0x1bc>)
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	490a      	ldr	r1, [pc, #40]	; (800a570 <HAL_RCC_ClockConfig+0x1c0>)
 800a548:	5ccb      	ldrb	r3, [r1, r3]
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	4a09      	ldr	r2, [pc, #36]	; (800a574 <HAL_RCC_ClockConfig+0x1c4>)
 800a550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a552:	4b09      	ldr	r3, [pc, #36]	; (800a578 <HAL_RCC_ClockConfig+0x1c8>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f7fa f848 	bl	80045ec <HAL_InitTick>

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	40023c00 	.word	0x40023c00
 800a56c:	40023800 	.word	0x40023800
 800a570:	0801031c 	.word	0x0801031c
 800a574:	20000000 	.word	0x20000000
 800a578:	20000004 	.word	0x20000004

0800a57c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a580:	4b03      	ldr	r3, [pc, #12]	; (800a590 <HAL_RCC_GetHCLKFreq+0x14>)
 800a582:	681b      	ldr	r3, [r3, #0]
}
 800a584:	4618      	mov	r0, r3
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000000 	.word	0x20000000

0800a594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a598:	f7ff fff0 	bl	800a57c <HAL_RCC_GetHCLKFreq>
 800a59c:	4602      	mov	r2, r0
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	0a9b      	lsrs	r3, r3, #10
 800a5a4:	f003 0307 	and.w	r3, r3, #7
 800a5a8:	4903      	ldr	r1, [pc, #12]	; (800a5b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5aa:	5ccb      	ldrb	r3, [r1, r3]
 800a5ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	40023800 	.word	0x40023800
 800a5b8:	0801032c 	.word	0x0801032c

0800a5bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08c      	sub	sp, #48	; 0x30
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d010      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800a5f4:	4b6f      	ldr	r3, [pc, #444]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5fa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	496c      	ldr	r1, [pc, #432]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800a612:	2301      	movs	r3, #1
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d010      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800a622:	4b64      	ldr	r3, [pc, #400]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a628:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a630:	4960      	ldr	r1, [pc, #384]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a632:	4313      	orrs	r3, r2
 800a634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800a640:	2301      	movs	r3, #1
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d017      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a650:	4b58      	ldr	r3, [pc, #352]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	4955      	ldr	r1, [pc, #340]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a660:	4313      	orrs	r3, r2
 800a662:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a66e:	d101      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800a670:	2301      	movs	r3, #1
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800a67c:	2301      	movs	r3, #1
 800a67e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d017      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a68c:	4b49      	ldr	r3, [pc, #292]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69a:	4946      	ldr	r1, [pc, #280]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6aa:	d101      	bne.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0320 	and.w	r3, r3, #32
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 808a 	beq.w	800a7de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	4b39      	ldr	r3, [pc, #228]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	4a38      	ldr	r2, [pc, #224]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a6da:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6e2:	60bb      	str	r3, [r7, #8]
 800a6e4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a6e6:	4b34      	ldr	r3, [pc, #208]	; (800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a33      	ldr	r2, [pc, #204]	; (800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a6ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6f2:	f7f9 ffbf 	bl	8004674 <HAL_GetTick>
 800a6f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a6f8:	e008      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a6fa:	f7f9 ffbb 	bl	8004674 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	2b02      	cmp	r3, #2
 800a706:	d901      	bls.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e278      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a70c:	4b2a      	ldr	r3, [pc, #168]	; (800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0f0      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a718:	4b26      	ldr	r3, [pc, #152]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a720:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d02f      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a730:	6a3a      	ldr	r2, [r7, #32]
 800a732:	429a      	cmp	r2, r3
 800a734:	d028      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a736:	4b1f      	ldr	r3, [pc, #124]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a73e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a740:	4b1e      	ldr	r3, [pc, #120]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a742:	2201      	movs	r2, #1
 800a744:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a746:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a748:	2200      	movs	r2, #0
 800a74a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a74c:	4a19      	ldr	r2, [pc, #100]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a752:	4b18      	ldr	r3, [pc, #96]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d114      	bne.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a75e:	f7f9 ff89 	bl	8004674 <HAL_GetTick>
 800a762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a764:	e00a      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a766:	f7f9 ff85 	bl	8004674 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	f241 3288 	movw	r2, #5000	; 0x1388
 800a774:	4293      	cmp	r3, r2
 800a776:	d901      	bls.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e240      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a77c:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0ee      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a794:	d114      	bne.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a796:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7aa:	4902      	ldr	r1, [pc, #8]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	608b      	str	r3, [r1, #8]
 800a7b0:	e00c      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x210>
 800a7b2:	bf00      	nop
 800a7b4:	40023800 	.word	0x40023800
 800a7b8:	40007000 	.word	0x40007000
 800a7bc:	42470e40 	.word	0x42470e40
 800a7c0:	4b4a      	ldr	r3, [pc, #296]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	4a49      	ldr	r2, [pc, #292]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a7c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a7ca:	6093      	str	r3, [r2, #8]
 800a7cc:	4b47      	ldr	r3, [pc, #284]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a7ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7d8:	4944      	ldr	r1, [pc, #272]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a7f0:	4b3f      	ldr	r3, [pc, #252]	; (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800a7f2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a800:	4b3a      	ldr	r3, [pc, #232]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a80e:	4937      	ldr	r1, [pc, #220]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a810:	4313      	orrs	r3, r2
 800a812:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a822:	4b32      	ldr	r3, [pc, #200]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a828:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a830:	492e      	ldr	r1, [pc, #184]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a832:	4313      	orrs	r3, r2
 800a834:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a840:	2b00      	cmp	r3, #0
 800a842:	d011      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a844:	4b29      	ldr	r3, [pc, #164]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a84a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a852:	4926      	ldr	r1, [pc, #152]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a854:	4313      	orrs	r3, r2
 800a856:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a862:	d101      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800a864:	2301      	movs	r3, #1
 800a866:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00a      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a874:	4b1d      	ldr	r3, [pc, #116]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a87a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a882:	491a      	ldr	r1, [pc, #104]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a884:	4313      	orrs	r3, r2
 800a886:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a892:	2b00      	cmp	r3, #0
 800a894:	d011      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800a896:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a89c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a4:	4911      	ldr	r1, [pc, #68]	; (800a8ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b4:	d101      	bne.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d005      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8c8:	f040 80ff 	bne.w	800aaca <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8d2:	f7f9 fecf 	bl	8004674 <HAL_GetTick>
 800a8d6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a8d8:	e00e      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a8da:	f7f9 fecb 	bl	8004674 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d907      	bls.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e188      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a8ec:	40023800 	.word	0x40023800
 800a8f0:	424711e0 	.word	0x424711e0
 800a8f4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a8f8:	4b7e      	ldr	r3, [pc, #504]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1ea      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	2b00      	cmp	r3, #0
 800a916:	d009      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a920:	2b00      	cmp	r3, #0
 800a922:	d028      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d124      	bne.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a92c:	4b71      	ldr	r3, [pc, #452]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	3301      	adds	r3, #1
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a93e:	4b6d      	ldr	r3, [pc, #436]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a944:	0e1b      	lsrs	r3, r3, #24
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	019b      	lsls	r3, r3, #6
 800a956:	431a      	orrs	r2, r3
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	3b01      	subs	r3, #1
 800a95e:	041b      	lsls	r3, r3, #16
 800a960:	431a      	orrs	r2, r3
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	061b      	lsls	r3, r3, #24
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	071b      	lsls	r3, r3, #28
 800a96e:	4961      	ldr	r1, [pc, #388]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a970:	4313      	orrs	r3, r2
 800a972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0304 	and.w	r3, r3, #4
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d004      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a98a:	d00a      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a994:	2b00      	cmp	r3, #0
 800a996:	d035      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9a0:	d130      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a9a2:	4b54      	ldr	r3, [pc, #336]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a8:	0c1b      	lsrs	r3, r3, #16
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a9b4:	4b4f      	ldr	r3, [pc, #316]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a9b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ba:	0f1b      	lsrs	r3, r3, #28
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	019b      	lsls	r3, r3, #6
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	085b      	lsrs	r3, r3, #1
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	041b      	lsls	r3, r3, #16
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	061b      	lsls	r3, r3, #24
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	071b      	lsls	r3, r3, #28
 800a9e4:	4943      	ldr	r1, [pc, #268]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a9ec:	4b41      	ldr	r3, [pc, #260]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a9ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9f2:	f023 021f 	bic.w	r2, r3, #31
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	493d      	ldr	r1, [pc, #244]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d029      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa18:	d124      	bne.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800aa1a:	4b36      	ldr	r3, [pc, #216]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa20:	0c1b      	lsrs	r3, r3, #16
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	3301      	adds	r3, #1
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa2c:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa32:	0f1b      	lsrs	r3, r3, #28
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	019b      	lsls	r3, r3, #6
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	085b      	lsrs	r3, r3, #1
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	041b      	lsls	r3, r3, #16
 800aa50:	431a      	orrs	r2, r3
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	061b      	lsls	r3, r3, #24
 800aa56:	431a      	orrs	r2, r3
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	071b      	lsls	r3, r3, #28
 800aa5c:	4925      	ldr	r1, [pc, #148]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d016      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685a      	ldr	r2, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	019b      	lsls	r3, r3, #6
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	085b      	lsrs	r3, r3, #1
 800aa82:	3b01      	subs	r3, #1
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	431a      	orrs	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	061b      	lsls	r3, r3, #24
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	071b      	lsls	r3, r3, #28
 800aa96:	4917      	ldr	r1, [pc, #92]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aaa4:	f7f9 fde6 	bl	8004674 <HAL_GetTick>
 800aaa8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aaaa:	e008      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aaac:	f7f9 fde2 	bl	8004674 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d901      	bls.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e09f      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aabe:	4b0d      	ldr	r3, [pc, #52]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0f0      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	2b01      	cmp	r3, #1
 800aace:	f040 8095 	bne.w	800abfc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800aad2:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aad8:	f7f9 fdcc 	bl	8004674 <HAL_GetTick>
 800aadc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aade:	e00f      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aae0:	f7f9 fdc8 	bl	8004674 <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d908      	bls.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e085      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x642>
 800aaf2:	bf00      	nop
 800aaf4:	40023800 	.word	0x40023800
 800aaf8:	42470068 	.word	0x42470068
 800aafc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab00:	4b41      	ldr	r3, [pc, #260]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab0c:	d0e8      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0304 	and.w	r3, r3, #4
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d02b      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d127      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ab36:	4b34      	ldr	r3, [pc, #208]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ab38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3c:	0c1b      	lsrs	r3, r3, #16
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	3301      	adds	r3, #1
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699a      	ldr	r2, [r3, #24]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	019b      	lsls	r3, r3, #6
 800ab52:	431a      	orrs	r2, r3
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	085b      	lsrs	r3, r3, #1
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	041b      	lsls	r3, r3, #16
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	061b      	lsls	r3, r3, #24
 800ab64:	4928      	ldr	r1, [pc, #160]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ab6c:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ab6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	021b      	lsls	r3, r3, #8
 800ab7e:	4922      	ldr	r1, [pc, #136]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d01d      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x612>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab9a:	d118      	bne.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ab9c:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ab9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba2:	0e1b      	lsrs	r3, r3, #24
 800aba4:	f003 030f 	and.w	r3, r3, #15
 800aba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699a      	ldr	r2, [r3, #24]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	019b      	lsls	r3, r3, #6
 800abb4:	431a      	orrs	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	085b      	lsrs	r3, r3, #1
 800abbc:	3b01      	subs	r3, #1
 800abbe:	041b      	lsls	r3, r3, #16
 800abc0:	431a      	orrs	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	061b      	lsls	r3, r3, #24
 800abc6:	4910      	ldr	r1, [pc, #64]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800abd0:	2201      	movs	r2, #1
 800abd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800abd4:	f7f9 fd4e 	bl	8004674 <HAL_GetTick>
 800abd8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800abda:	e008      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800abdc:	f7f9 fd4a 	bl	8004674 <HAL_GetTick>
 800abe0:	4602      	mov	r2, r0
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d901      	bls.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e007      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800abee:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abfa:	d1ef      	bne.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3730      	adds	r7, #48	; 0x30
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	40023800 	.word	0x40023800
 800ac0c:	42470070 	.word	0x42470070

0800ac10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac14:	b088      	sub	sp, #32
 800ac16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac2c:	4bce      	ldr	r3, [pc, #824]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f003 030c 	and.w	r3, r3, #12
 800ac34:	2b0c      	cmp	r3, #12
 800ac36:	f200 818d 	bhi.w	800af54 <HAL_RCC_GetSysClockFreq+0x344>
 800ac3a:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <HAL_RCC_GetSysClockFreq+0x30>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac75 	.word	0x0800ac75
 800ac44:	0800af55 	.word	0x0800af55
 800ac48:	0800af55 	.word	0x0800af55
 800ac4c:	0800af55 	.word	0x0800af55
 800ac50:	0800ac7b 	.word	0x0800ac7b
 800ac54:	0800af55 	.word	0x0800af55
 800ac58:	0800af55 	.word	0x0800af55
 800ac5c:	0800af55 	.word	0x0800af55
 800ac60:	0800ac81 	.word	0x0800ac81
 800ac64:	0800af55 	.word	0x0800af55
 800ac68:	0800af55 	.word	0x0800af55
 800ac6c:	0800af55 	.word	0x0800af55
 800ac70:	0800adf5 	.word	0x0800adf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac74:	4bbd      	ldr	r3, [pc, #756]	; (800af6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800ac76:	61bb      	str	r3, [r7, #24]
       break;
 800ac78:	e16f      	b.n	800af5a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac7a:	4bbd      	ldr	r3, [pc, #756]	; (800af70 <HAL_RCC_GetSysClockFreq+0x360>)
 800ac7c:	61bb      	str	r3, [r7, #24]
      break;
 800ac7e:	e16c      	b.n	800af5a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac80:	4bb9      	ldr	r3, [pc, #740]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac88:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac8a:	4bb7      	ldr	r3, [pc, #732]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d053      	beq.n	800ad3e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac96:	4bb4      	ldr	r3, [pc, #720]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	099b      	lsrs	r3, r3, #6
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f04f 0300 	mov.w	r3, #0
 800aca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aca6:	f04f 0100 	mov.w	r1, #0
 800acaa:	ea02 0400 	and.w	r4, r2, r0
 800acae:	603c      	str	r4, [r7, #0]
 800acb0:	400b      	ands	r3, r1
 800acb2:	607b      	str	r3, [r7, #4]
 800acb4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f04f 0200 	mov.w	r2, #0
 800acc0:	f04f 0300 	mov.w	r3, #0
 800acc4:	014b      	lsls	r3, r1, #5
 800acc6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800acca:	0142      	lsls	r2, r0, #5
 800accc:	4610      	mov	r0, r2
 800acce:	4619      	mov	r1, r3
 800acd0:	4623      	mov	r3, r4
 800acd2:	1ac0      	subs	r0, r0, r3
 800acd4:	462b      	mov	r3, r5
 800acd6:	eb61 0103 	sbc.w	r1, r1, r3
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	f04f 0300 	mov.w	r3, #0
 800ace2:	018b      	lsls	r3, r1, #6
 800ace4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ace8:	0182      	lsls	r2, r0, #6
 800acea:	1a12      	subs	r2, r2, r0
 800acec:	eb63 0301 	sbc.w	r3, r3, r1
 800acf0:	f04f 0000 	mov.w	r0, #0
 800acf4:	f04f 0100 	mov.w	r1, #0
 800acf8:	00d9      	lsls	r1, r3, #3
 800acfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acfe:	00d0      	lsls	r0, r2, #3
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4621      	mov	r1, r4
 800ad06:	1852      	adds	r2, r2, r1
 800ad08:	4629      	mov	r1, r5
 800ad0a:	eb43 0101 	adc.w	r1, r3, r1
 800ad0e:	460b      	mov	r3, r1
 800ad10:	f04f 0000 	mov.w	r0, #0
 800ad14:	f04f 0100 	mov.w	r1, #0
 800ad18:	0259      	lsls	r1, r3, #9
 800ad1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800ad1e:	0250      	lsls	r0, r2, #9
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4610      	mov	r0, r2
 800ad26:	4619      	mov	r1, r3
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f04f 0300 	mov.w	r3, #0
 800ad30:	f7f5 fa68 	bl	8000204 <__aeabi_uldivmod>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4613      	mov	r3, r2
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	e04c      	b.n	800add8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad3e:	4b8a      	ldr	r3, [pc, #552]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	099b      	lsrs	r3, r3, #6
 800ad44:	461a      	mov	r2, r3
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ad4e:	f04f 0100 	mov.w	r1, #0
 800ad52:	ea02 0a00 	and.w	sl, r2, r0
 800ad56:	ea03 0b01 	and.w	fp, r3, r1
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	4659      	mov	r1, fp
 800ad5e:	f04f 0200 	mov.w	r2, #0
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	014b      	lsls	r3, r1, #5
 800ad68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ad6c:	0142      	lsls	r2, r0, #5
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4619      	mov	r1, r3
 800ad72:	ebb0 000a 	subs.w	r0, r0, sl
 800ad76:	eb61 010b 	sbc.w	r1, r1, fp
 800ad7a:	f04f 0200 	mov.w	r2, #0
 800ad7e:	f04f 0300 	mov.w	r3, #0
 800ad82:	018b      	lsls	r3, r1, #6
 800ad84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad88:	0182      	lsls	r2, r0, #6
 800ad8a:	1a12      	subs	r2, r2, r0
 800ad8c:	eb63 0301 	sbc.w	r3, r3, r1
 800ad90:	f04f 0000 	mov.w	r0, #0
 800ad94:	f04f 0100 	mov.w	r1, #0
 800ad98:	00d9      	lsls	r1, r3, #3
 800ad9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad9e:	00d0      	lsls	r0, r2, #3
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	eb12 020a 	adds.w	r2, r2, sl
 800ada8:	eb43 030b 	adc.w	r3, r3, fp
 800adac:	f04f 0000 	mov.w	r0, #0
 800adb0:	f04f 0100 	mov.w	r1, #0
 800adb4:	0299      	lsls	r1, r3, #10
 800adb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800adba:	0290      	lsls	r0, r2, #10
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4610      	mov	r0, r2
 800adc2:	4619      	mov	r1, r3
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	461a      	mov	r2, r3
 800adc8:	f04f 0300 	mov.w	r3, #0
 800adcc:	f7f5 fa1a 	bl	8000204 <__aeabi_uldivmod>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4613      	mov	r3, r2
 800add6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800add8:	4b63      	ldr	r3, [pc, #396]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	0c1b      	lsrs	r3, r3, #16
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	3301      	adds	r3, #1
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf0:	61bb      	str	r3, [r7, #24]
      break;
 800adf2:	e0b2      	b.n	800af5a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800adf4:	4b5c      	ldr	r3, [pc, #368]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adfc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800adfe:	4b5a      	ldr	r3, [pc, #360]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d04d      	beq.n	800aea6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae0a:	4b57      	ldr	r3, [pc, #348]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	099b      	lsrs	r3, r3, #6
 800ae10:	461a      	mov	r2, r3
 800ae12:	f04f 0300 	mov.w	r3, #0
 800ae16:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ae1a:	f04f 0100 	mov.w	r1, #0
 800ae1e:	ea02 0800 	and.w	r8, r2, r0
 800ae22:	ea03 0901 	and.w	r9, r3, r1
 800ae26:	4640      	mov	r0, r8
 800ae28:	4649      	mov	r1, r9
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	014b      	lsls	r3, r1, #5
 800ae34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ae38:	0142      	lsls	r2, r0, #5
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	ebb0 0008 	subs.w	r0, r0, r8
 800ae42:	eb61 0109 	sbc.w	r1, r1, r9
 800ae46:	f04f 0200 	mov.w	r2, #0
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	018b      	lsls	r3, r1, #6
 800ae50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ae54:	0182      	lsls	r2, r0, #6
 800ae56:	1a12      	subs	r2, r2, r0
 800ae58:	eb63 0301 	sbc.w	r3, r3, r1
 800ae5c:	f04f 0000 	mov.w	r0, #0
 800ae60:	f04f 0100 	mov.w	r1, #0
 800ae64:	00d9      	lsls	r1, r3, #3
 800ae66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae6a:	00d0      	lsls	r0, r2, #3
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	eb12 0208 	adds.w	r2, r2, r8
 800ae74:	eb43 0309 	adc.w	r3, r3, r9
 800ae78:	f04f 0000 	mov.w	r0, #0
 800ae7c:	f04f 0100 	mov.w	r1, #0
 800ae80:	0259      	lsls	r1, r3, #9
 800ae82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800ae86:	0250      	lsls	r0, r2, #9
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	461a      	mov	r2, r3
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	f7f5 f9b4 	bl	8000204 <__aeabi_uldivmod>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4613      	mov	r3, r2
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	e04a      	b.n	800af3c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aea6:	4b30      	ldr	r3, [pc, #192]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	099b      	lsrs	r3, r3, #6
 800aeac:	461a      	mov	r2, r3
 800aeae:	f04f 0300 	mov.w	r3, #0
 800aeb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aeb6:	f04f 0100 	mov.w	r1, #0
 800aeba:	ea02 0400 	and.w	r4, r2, r0
 800aebe:	ea03 0501 	and.w	r5, r3, r1
 800aec2:	4620      	mov	r0, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	f04f 0200 	mov.w	r2, #0
 800aeca:	f04f 0300 	mov.w	r3, #0
 800aece:	014b      	lsls	r3, r1, #5
 800aed0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aed4:	0142      	lsls	r2, r0, #5
 800aed6:	4610      	mov	r0, r2
 800aed8:	4619      	mov	r1, r3
 800aeda:	1b00      	subs	r0, r0, r4
 800aedc:	eb61 0105 	sbc.w	r1, r1, r5
 800aee0:	f04f 0200 	mov.w	r2, #0
 800aee4:	f04f 0300 	mov.w	r3, #0
 800aee8:	018b      	lsls	r3, r1, #6
 800aeea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aeee:	0182      	lsls	r2, r0, #6
 800aef0:	1a12      	subs	r2, r2, r0
 800aef2:	eb63 0301 	sbc.w	r3, r3, r1
 800aef6:	f04f 0000 	mov.w	r0, #0
 800aefa:	f04f 0100 	mov.w	r1, #0
 800aefe:	00d9      	lsls	r1, r3, #3
 800af00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af04:	00d0      	lsls	r0, r2, #3
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	1912      	adds	r2, r2, r4
 800af0c:	eb45 0303 	adc.w	r3, r5, r3
 800af10:	f04f 0000 	mov.w	r0, #0
 800af14:	f04f 0100 	mov.w	r1, #0
 800af18:	0299      	lsls	r1, r3, #10
 800af1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800af1e:	0290      	lsls	r0, r2, #10
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4610      	mov	r0, r2
 800af26:	4619      	mov	r1, r3
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f04f 0300 	mov.w	r3, #0
 800af30:	f7f5 f968 	bl	8000204 <__aeabi_uldivmod>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4613      	mov	r3, r2
 800af3a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <HAL_RCC_GetSysClockFreq+0x358>)
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	0f1b      	lsrs	r3, r3, #28
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800af48:	69fa      	ldr	r2, [r7, #28]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af50:	61bb      	str	r3, [r7, #24]
      break;
 800af52:	e002      	b.n	800af5a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800af56:	61bb      	str	r3, [r7, #24]
      break;
 800af58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af5a:	69bb      	ldr	r3, [r7, #24]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af66:	bf00      	nop
 800af68:	40023800 	.word	0x40023800
 800af6c:	00f42400 	.word	0x00f42400
 800af70:	007a1200 	.word	0x007a1200

0800af74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e28d      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 8083 	beq.w	800b09a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800af94:	4b94      	ldr	r3, [pc, #592]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f003 030c 	and.w	r3, r3, #12
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	d019      	beq.n	800afd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800afa0:	4b91      	ldr	r3, [pc, #580]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800afa8:	2b08      	cmp	r3, #8
 800afaa:	d106      	bne.n	800afba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800afac:	4b8e      	ldr	r3, [pc, #568]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb8:	d00c      	beq.n	800afd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800afba:	4b8b      	ldr	r3, [pc, #556]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800afc2:	2b0c      	cmp	r3, #12
 800afc4:	d112      	bne.n	800afec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800afc6:	4b88      	ldr	r3, [pc, #544]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afd2:	d10b      	bne.n	800afec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd4:	4b84      	ldr	r3, [pc, #528]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d05b      	beq.n	800b098 <HAL_RCC_OscConfig+0x124>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d157      	bne.n	800b098 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e25a      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff4:	d106      	bne.n	800b004 <HAL_RCC_OscConfig+0x90>
 800aff6:	4b7c      	ldr	r3, [pc, #496]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a7b      	ldr	r2, [pc, #492]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800affc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	e01d      	b.n	800b040 <HAL_RCC_OscConfig+0xcc>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b00c:	d10c      	bne.n	800b028 <HAL_RCC_OscConfig+0xb4>
 800b00e:	4b76      	ldr	r3, [pc, #472]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a75      	ldr	r2, [pc, #468]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	4b73      	ldr	r3, [pc, #460]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a72      	ldr	r2, [pc, #456]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b024:	6013      	str	r3, [r2, #0]
 800b026:	e00b      	b.n	800b040 <HAL_RCC_OscConfig+0xcc>
 800b028:	4b6f      	ldr	r3, [pc, #444]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a6e      	ldr	r2, [pc, #440]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b02e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b032:	6013      	str	r3, [r2, #0]
 800b034:	4b6c      	ldr	r3, [pc, #432]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a6b      	ldr	r2, [pc, #428]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b03a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b03e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d013      	beq.n	800b070 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b048:	f7f9 fb14 	bl	8004674 <HAL_GetTick>
 800b04c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b04e:	e008      	b.n	800b062 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b050:	f7f9 fb10 	bl	8004674 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b64      	cmp	r3, #100	; 0x64
 800b05c:	d901      	bls.n	800b062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e21f      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b062:	4b61      	ldr	r3, [pc, #388]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0f0      	beq.n	800b050 <HAL_RCC_OscConfig+0xdc>
 800b06e:	e014      	b.n	800b09a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b070:	f7f9 fb00 	bl	8004674 <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b078:	f7f9 fafc 	bl	8004674 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b64      	cmp	r3, #100	; 0x64
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e20b      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b08a:	4b57      	ldr	r3, [pc, #348]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1f0      	bne.n	800b078 <HAL_RCC_OscConfig+0x104>
 800b096:	e000      	b.n	800b09a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d06f      	beq.n	800b186 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b0a6:	4b50      	ldr	r3, [pc, #320]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f003 030c 	and.w	r3, r3, #12
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d017      	beq.n	800b0e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b0b2:	4b4d      	ldr	r3, [pc, #308]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b0ba:	2b08      	cmp	r3, #8
 800b0bc:	d105      	bne.n	800b0ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b0be:	4b4a      	ldr	r3, [pc, #296]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00b      	beq.n	800b0e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0ca:	4b47      	ldr	r3, [pc, #284]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b0d2:	2b0c      	cmp	r3, #12
 800b0d4:	d11c      	bne.n	800b110 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0d6:	4b44      	ldr	r3, [pc, #272]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d116      	bne.n	800b110 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0e2:	4b41      	ldr	r3, [pc, #260]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d005      	beq.n	800b0fa <HAL_RCC_OscConfig+0x186>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d001      	beq.n	800b0fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e1d3      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0fa:	4b3b      	ldr	r3, [pc, #236]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4937      	ldr	r1, [pc, #220]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b10e:	e03a      	b.n	800b186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d020      	beq.n	800b15a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b118:	4b34      	ldr	r3, [pc, #208]	; (800b1ec <HAL_RCC_OscConfig+0x278>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b11e:	f7f9 faa9 	bl	8004674 <HAL_GetTick>
 800b122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b126:	f7f9 faa5 	bl	8004674 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e1b4      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b138:	4b2b      	ldr	r3, [pc, #172]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0f0      	beq.n	800b126 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b144:	4b28      	ldr	r3, [pc, #160]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	4925      	ldr	r1, [pc, #148]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b154:	4313      	orrs	r3, r2
 800b156:	600b      	str	r3, [r1, #0]
 800b158:	e015      	b.n	800b186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <HAL_RCC_OscConfig+0x278>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b160:	f7f9 fa88 	bl	8004674 <HAL_GetTick>
 800b164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b166:	e008      	b.n	800b17a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b168:	f7f9 fa84 	bl	8004674 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b02      	cmp	r3, #2
 800b174:	d901      	bls.n	800b17a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e193      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b17a:	4b1b      	ldr	r3, [pc, #108]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1f0      	bne.n	800b168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0308 	and.w	r3, r3, #8
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d036      	beq.n	800b200 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d016      	beq.n	800b1c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b19a:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <HAL_RCC_OscConfig+0x27c>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1a0:	f7f9 fa68 	bl	8004674 <HAL_GetTick>
 800b1a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1a8:	f7f9 fa64 	bl	8004674 <HAL_GetTick>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e173      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <HAL_RCC_OscConfig+0x274>)
 800b1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1be:	f003 0302 	and.w	r3, r3, #2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0f0      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x234>
 800b1c6:	e01b      	b.n	800b200 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1c8:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <HAL_RCC_OscConfig+0x27c>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1ce:	f7f9 fa51 	bl	8004674 <HAL_GetTick>
 800b1d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1d4:	e00e      	b.n	800b1f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1d6:	f7f9 fa4d 	bl	8004674 <HAL_GetTick>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d907      	bls.n	800b1f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e15c      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
 800b1e8:	40023800 	.word	0x40023800
 800b1ec:	42470000 	.word	0x42470000
 800b1f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1f4:	4b8a      	ldr	r3, [pc, #552]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1ea      	bne.n	800b1d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 8097 	beq.w	800b33c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b20e:	2300      	movs	r3, #0
 800b210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b212:	4b83      	ldr	r3, [pc, #524]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10f      	bne.n	800b23e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b21e:	2300      	movs	r3, #0
 800b220:	60bb      	str	r3, [r7, #8]
 800b222:	4b7f      	ldr	r3, [pc, #508]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b226:	4a7e      	ldr	r2, [pc, #504]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b22c:	6413      	str	r3, [r2, #64]	; 0x40
 800b22e:	4b7c      	ldr	r3, [pc, #496]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b236:	60bb      	str	r3, [r7, #8]
 800b238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b23a:	2301      	movs	r3, #1
 800b23c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b23e:	4b79      	ldr	r3, [pc, #484]	; (800b424 <HAL_RCC_OscConfig+0x4b0>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b246:	2b00      	cmp	r3, #0
 800b248:	d118      	bne.n	800b27c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b24a:	4b76      	ldr	r3, [pc, #472]	; (800b424 <HAL_RCC_OscConfig+0x4b0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a75      	ldr	r2, [pc, #468]	; (800b424 <HAL_RCC_OscConfig+0x4b0>)
 800b250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b256:	f7f9 fa0d 	bl	8004674 <HAL_GetTick>
 800b25a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b25c:	e008      	b.n	800b270 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b25e:	f7f9 fa09 	bl	8004674 <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d901      	bls.n	800b270 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e118      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b270:	4b6c      	ldr	r3, [pc, #432]	; (800b424 <HAL_RCC_OscConfig+0x4b0>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0f0      	beq.n	800b25e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d106      	bne.n	800b292 <HAL_RCC_OscConfig+0x31e>
 800b284:	4b66      	ldr	r3, [pc, #408]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b288:	4a65      	ldr	r2, [pc, #404]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b28a:	f043 0301 	orr.w	r3, r3, #1
 800b28e:	6713      	str	r3, [r2, #112]	; 0x70
 800b290:	e01c      	b.n	800b2cc <HAL_RCC_OscConfig+0x358>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	2b05      	cmp	r3, #5
 800b298:	d10c      	bne.n	800b2b4 <HAL_RCC_OscConfig+0x340>
 800b29a:	4b61      	ldr	r3, [pc, #388]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	4a60      	ldr	r2, [pc, #384]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2a0:	f043 0304 	orr.w	r3, r3, #4
 800b2a4:	6713      	str	r3, [r2, #112]	; 0x70
 800b2a6:	4b5e      	ldr	r3, [pc, #376]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2aa:	4a5d      	ldr	r2, [pc, #372]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	6713      	str	r3, [r2, #112]	; 0x70
 800b2b2:	e00b      	b.n	800b2cc <HAL_RCC_OscConfig+0x358>
 800b2b4:	4b5a      	ldr	r3, [pc, #360]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b8:	4a59      	ldr	r2, [pc, #356]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2ba:	f023 0301 	bic.w	r3, r3, #1
 800b2be:	6713      	str	r3, [r2, #112]	; 0x70
 800b2c0:	4b57      	ldr	r3, [pc, #348]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c4:	4a56      	ldr	r2, [pc, #344]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2c6:	f023 0304 	bic.w	r3, r3, #4
 800b2ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d015      	beq.n	800b300 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2d4:	f7f9 f9ce 	bl	8004674 <HAL_GetTick>
 800b2d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2da:	e00a      	b.n	800b2f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b2dc:	f7f9 f9ca 	bl	8004674 <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e0d7      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2f2:	4b4b      	ldr	r3, [pc, #300]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0ee      	beq.n	800b2dc <HAL_RCC_OscConfig+0x368>
 800b2fe:	e014      	b.n	800b32a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b300:	f7f9 f9b8 	bl	8004674 <HAL_GetTick>
 800b304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b306:	e00a      	b.n	800b31e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b308:	f7f9 f9b4 	bl	8004674 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	f241 3288 	movw	r2, #5000	; 0x1388
 800b316:	4293      	cmp	r3, r2
 800b318:	d901      	bls.n	800b31e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e0c1      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b31e:	4b40      	ldr	r3, [pc, #256]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1ee      	bne.n	800b308 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d105      	bne.n	800b33c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b330:	4b3b      	ldr	r3, [pc, #236]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b334:	4a3a      	ldr	r2, [pc, #232]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b33a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 80ad 	beq.w	800b4a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b346:	4b36      	ldr	r3, [pc, #216]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	f003 030c 	and.w	r3, r3, #12
 800b34e:	2b08      	cmp	r3, #8
 800b350:	d060      	beq.n	800b414 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d145      	bne.n	800b3e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b35a:	4b33      	ldr	r3, [pc, #204]	; (800b428 <HAL_RCC_OscConfig+0x4b4>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b360:	f7f9 f988 	bl	8004674 <HAL_GetTick>
 800b364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b366:	e008      	b.n	800b37a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b368:	f7f9 f984 	bl	8004674 <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	2b02      	cmp	r3, #2
 800b374:	d901      	bls.n	800b37a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e093      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b37a:	4b29      	ldr	r3, [pc, #164]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1f0      	bne.n	800b368 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	69da      	ldr	r2, [r3, #28]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	431a      	orrs	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	019b      	lsls	r3, r3, #6
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	041b      	lsls	r3, r3, #16
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	061b      	lsls	r3, r3, #24
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	071b      	lsls	r3, r3, #28
 800b3b2:	491b      	ldr	r1, [pc, #108]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3b8:	4b1b      	ldr	r3, [pc, #108]	; (800b428 <HAL_RCC_OscConfig+0x4b4>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3be:	f7f9 f959 	bl	8004674 <HAL_GetTick>
 800b3c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3c4:	e008      	b.n	800b3d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3c6:	f7f9 f955 	bl	8004674 <HAL_GetTick>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d901      	bls.n	800b3d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e064      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3d8:	4b11      	ldr	r3, [pc, #68]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0f0      	beq.n	800b3c6 <HAL_RCC_OscConfig+0x452>
 800b3e4:	e05c      	b.n	800b4a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3e6:	4b10      	ldr	r3, [pc, #64]	; (800b428 <HAL_RCC_OscConfig+0x4b4>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ec:	f7f9 f942 	bl	8004674 <HAL_GetTick>
 800b3f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3f2:	e008      	b.n	800b406 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3f4:	f7f9 f93e 	bl	8004674 <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d901      	bls.n	800b406 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e04d      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b406:	4b06      	ldr	r3, [pc, #24]	; (800b420 <HAL_RCC_OscConfig+0x4ac>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1f0      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x480>
 800b412:	e045      	b.n	800b4a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d107      	bne.n	800b42c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e040      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
 800b420:	40023800 	.word	0x40023800
 800b424:	40007000 	.word	0x40007000
 800b428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b42c:	4b1f      	ldr	r3, [pc, #124]	; (800b4ac <HAL_RCC_OscConfig+0x538>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d030      	beq.n	800b49c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b444:	429a      	cmp	r2, r3
 800b446:	d129      	bne.n	800b49c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b452:	429a      	cmp	r2, r3
 800b454:	d122      	bne.n	800b49c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b45c:	4013      	ands	r3, r2
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b464:	4293      	cmp	r3, r2
 800b466:	d119      	bne.n	800b49c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b472:	085b      	lsrs	r3, r3, #1
 800b474:	3b01      	subs	r3, #1
 800b476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b478:	429a      	cmp	r2, r3
 800b47a:	d10f      	bne.n	800b49c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b488:	429a      	cmp	r2, r3
 800b48a:	d107      	bne.n	800b49c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b496:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b498:	429a      	cmp	r2, r3
 800b49a:	d001      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	40023800 	.word	0x40023800

0800b4b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e041      	b.n	800b546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7f8 fdf2 	bl	80040c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f000 fc9e 	bl	800be30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	d001      	beq.n	800b568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e04e      	b.n	800b606 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f042 0201 	orr.w	r2, r2, #1
 800b57e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a23      	ldr	r2, [pc, #140]	; (800b614 <HAL_TIM_Base_Start_IT+0xc4>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d022      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b592:	d01d      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a1f      	ldr	r2, [pc, #124]	; (800b618 <HAL_TIM_Base_Start_IT+0xc8>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d018      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a1e      	ldr	r2, [pc, #120]	; (800b61c <HAL_TIM_Base_Start_IT+0xcc>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d013      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a1c      	ldr	r2, [pc, #112]	; (800b620 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d00e      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a1b      	ldr	r2, [pc, #108]	; (800b624 <HAL_TIM_Base_Start_IT+0xd4>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d009      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a19      	ldr	r2, [pc, #100]	; (800b628 <HAL_TIM_Base_Start_IT+0xd8>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d004      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a18      	ldr	r2, [pc, #96]	; (800b62c <HAL_TIM_Base_Start_IT+0xdc>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d111      	bne.n	800b5f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2b06      	cmp	r3, #6
 800b5e0:	d010      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f042 0201 	orr.w	r2, r2, #1
 800b5f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5f2:	e007      	b.n	800b604 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0201 	orr.w	r2, r2, #1
 800b602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40010000 	.word	0x40010000
 800b618:	40000400 	.word	0x40000400
 800b61c:	40000800 	.word	0x40000800
 800b620:	40000c00 	.word	0x40000c00
 800b624:	40010400 	.word	0x40010400
 800b628:	40014000 	.word	0x40014000
 800b62c:	40001800 	.word	0x40001800

0800b630 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f022 0201 	bic.w	r2, r2, #1
 800b646:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6a1a      	ldr	r2, [r3, #32]
 800b64e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b652:	4013      	ands	r3, r2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10f      	bne.n	800b678 <HAL_TIM_Base_Stop_IT+0x48>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6a1a      	ldr	r2, [r3, #32]
 800b65e:	f240 4344 	movw	r3, #1092	; 0x444
 800b662:	4013      	ands	r3, r2
 800b664:	2b00      	cmp	r3, #0
 800b666:	d107      	bne.n	800b678 <HAL_TIM_Base_Stop_IT+0x48>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f022 0201 	bic.w	r2, r2, #1
 800b676:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e041      	b.n	800b724 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7f8 fd91 	bl	80041dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2202      	movs	r2, #2
 800b6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	f000 fbaf 	bl	800be30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d109      	bne.n	800b750 <HAL_TIM_PWM_Start+0x24>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b01      	cmp	r3, #1
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	e022      	b.n	800b796 <HAL_TIM_PWM_Start+0x6a>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b04      	cmp	r3, #4
 800b754:	d109      	bne.n	800b76a <HAL_TIM_PWM_Start+0x3e>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b01      	cmp	r3, #1
 800b760:	bf14      	ite	ne
 800b762:	2301      	movne	r3, #1
 800b764:	2300      	moveq	r3, #0
 800b766:	b2db      	uxtb	r3, r3
 800b768:	e015      	b.n	800b796 <HAL_TIM_PWM_Start+0x6a>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d109      	bne.n	800b784 <HAL_TIM_PWM_Start+0x58>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b01      	cmp	r3, #1
 800b77a:	bf14      	ite	ne
 800b77c:	2301      	movne	r3, #1
 800b77e:	2300      	moveq	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	e008      	b.n	800b796 <HAL_TIM_PWM_Start+0x6a>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	bf14      	ite	ne
 800b790:	2301      	movne	r3, #1
 800b792:	2300      	moveq	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e07c      	b.n	800b898 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d104      	bne.n	800b7ae <HAL_TIM_PWM_Start+0x82>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7ac:	e013      	b.n	800b7d6 <HAL_TIM_PWM_Start+0xaa>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b04      	cmp	r3, #4
 800b7b2:	d104      	bne.n	800b7be <HAL_TIM_PWM_Start+0x92>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7bc:	e00b      	b.n	800b7d6 <HAL_TIM_PWM_Start+0xaa>
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d104      	bne.n	800b7ce <HAL_TIM_PWM_Start+0xa2>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7cc:	e003      	b.n	800b7d6 <HAL_TIM_PWM_Start+0xaa>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 fe10 	bl	800c404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a2d      	ldr	r2, [pc, #180]	; (800b8a0 <HAL_TIM_PWM_Start+0x174>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d004      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0xcc>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a2c      	ldr	r2, [pc, #176]	; (800b8a4 <HAL_TIM_PWM_Start+0x178>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d101      	bne.n	800b7fc <HAL_TIM_PWM_Start+0xd0>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <HAL_TIM_PWM_Start+0xd2>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d007      	beq.n	800b812 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a22      	ldr	r2, [pc, #136]	; (800b8a0 <HAL_TIM_PWM_Start+0x174>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d022      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b824:	d01d      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a1f      	ldr	r2, [pc, #124]	; (800b8a8 <HAL_TIM_PWM_Start+0x17c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d018      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a1d      	ldr	r2, [pc, #116]	; (800b8ac <HAL_TIM_PWM_Start+0x180>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d013      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1c      	ldr	r2, [pc, #112]	; (800b8b0 <HAL_TIM_PWM_Start+0x184>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d00e      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a16      	ldr	r2, [pc, #88]	; (800b8a4 <HAL_TIM_PWM_Start+0x178>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d009      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <HAL_TIM_PWM_Start+0x188>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d004      	beq.n	800b862 <HAL_TIM_PWM_Start+0x136>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a16      	ldr	r2, [pc, #88]	; (800b8b8 <HAL_TIM_PWM_Start+0x18c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d111      	bne.n	800b886 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f003 0307 	and.w	r3, r3, #7
 800b86c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b06      	cmp	r3, #6
 800b872:	d010      	beq.n	800b896 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f042 0201 	orr.w	r2, r2, #1
 800b882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b884:	e007      	b.n	800b896 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f042 0201 	orr.w	r2, r2, #1
 800b894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	40010000 	.word	0x40010000
 800b8a4:	40010400 	.word	0x40010400
 800b8a8:	40000400 	.word	0x40000400
 800b8ac:	40000800 	.word	0x40000800
 800b8b0:	40000c00 	.word	0x40000c00
 800b8b4:	40014000 	.word	0x40014000
 800b8b8:	40001800 	.word	0x40001800

0800b8bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d122      	bne.n	800b918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f003 0302 	and.w	r3, r3, #2
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d11b      	bne.n	800b918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f06f 0202 	mvn.w	r2, #2
 800b8e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	f003 0303 	and.w	r3, r3, #3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d003      	beq.n	800b906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa77 	bl	800bdf2 <HAL_TIM_IC_CaptureCallback>
 800b904:	e005      	b.n	800b912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fa69 	bl	800bdde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa7a 	bl	800be06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	f003 0304 	and.w	r3, r3, #4
 800b922:	2b04      	cmp	r3, #4
 800b924:	d122      	bne.n	800b96c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f003 0304 	and.w	r3, r3, #4
 800b930:	2b04      	cmp	r3, #4
 800b932:	d11b      	bne.n	800b96c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f06f 0204 	mvn.w	r2, #4
 800b93c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2202      	movs	r2, #2
 800b942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	699b      	ldr	r3, [r3, #24]
 800b94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa4d 	bl	800bdf2 <HAL_TIM_IC_CaptureCallback>
 800b958:	e005      	b.n	800b966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fa3f 	bl	800bdde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fa50 	bl	800be06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f003 0308 	and.w	r3, r3, #8
 800b976:	2b08      	cmp	r3, #8
 800b978:	d122      	bne.n	800b9c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b08      	cmp	r3, #8
 800b986:	d11b      	bne.n	800b9c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f06f 0208 	mvn.w	r2, #8
 800b990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2204      	movs	r2, #4
 800b996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fa23 	bl	800bdf2 <HAL_TIM_IC_CaptureCallback>
 800b9ac:	e005      	b.n	800b9ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fa15 	bl	800bdde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fa26 	bl	800be06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	f003 0310 	and.w	r3, r3, #16
 800b9ca:	2b10      	cmp	r3, #16
 800b9cc:	d122      	bne.n	800ba14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	2b10      	cmp	r3, #16
 800b9da:	d11b      	bne.n	800ba14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f06f 0210 	mvn.w	r2, #16
 800b9e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2208      	movs	r2, #8
 800b9ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f9f9 	bl	800bdf2 <HAL_TIM_IC_CaptureCallback>
 800ba00:	e005      	b.n	800ba0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f9eb 	bl	800bdde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f9fc 	bl	800be06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d10e      	bne.n	800ba40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d107      	bne.n	800ba40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f06f 0201 	mvn.w	r2, #1
 800ba38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7f7 f938 	bl	8002cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba4a:	2b80      	cmp	r3, #128	; 0x80
 800ba4c:	d10e      	bne.n	800ba6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba58:	2b80      	cmp	r3, #128	; 0x80
 800ba5a:	d107      	bne.n	800ba6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fdca 	bl	800c600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba76:	2b40      	cmp	r3, #64	; 0x40
 800ba78:	d10e      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba84:	2b40      	cmp	r3, #64	; 0x40
 800ba86:	d107      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f9c1 	bl	800be1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f003 0320 	and.w	r3, r3, #32
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	d10e      	bne.n	800bac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f003 0320 	and.w	r3, r3, #32
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	d107      	bne.n	800bac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f06f 0220 	mvn.w	r2, #32
 800babc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fd94 	bl	800c5ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bae6:	2302      	movs	r3, #2
 800bae8:	e0ae      	b.n	800bc48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b0c      	cmp	r3, #12
 800baf6:	f200 809f 	bhi.w	800bc38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bafa:	a201      	add	r2, pc, #4	; (adr r2, 800bb00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb00:	0800bb35 	.word	0x0800bb35
 800bb04:	0800bc39 	.word	0x0800bc39
 800bb08:	0800bc39 	.word	0x0800bc39
 800bb0c:	0800bc39 	.word	0x0800bc39
 800bb10:	0800bb75 	.word	0x0800bb75
 800bb14:	0800bc39 	.word	0x0800bc39
 800bb18:	0800bc39 	.word	0x0800bc39
 800bb1c:	0800bc39 	.word	0x0800bc39
 800bb20:	0800bbb7 	.word	0x0800bbb7
 800bb24:	0800bc39 	.word	0x0800bc39
 800bb28:	0800bc39 	.word	0x0800bc39
 800bb2c:	0800bc39 	.word	0x0800bc39
 800bb30:	0800bbf7 	.word	0x0800bbf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fa18 	bl	800bf70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	699a      	ldr	r2, [r3, #24]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f042 0208 	orr.w	r2, r2, #8
 800bb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	699a      	ldr	r2, [r3, #24]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 0204 	bic.w	r2, r2, #4
 800bb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6999      	ldr	r1, [r3, #24]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	691a      	ldr	r2, [r3, #16]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	619a      	str	r2, [r3, #24]
      break;
 800bb72:	e064      	b.n	800bc3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68b9      	ldr	r1, [r7, #8]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 fa68 	bl	800c050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	699a      	ldr	r2, [r3, #24]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	699a      	ldr	r2, [r3, #24]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6999      	ldr	r1, [r3, #24]
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	021a      	lsls	r2, r3, #8
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	619a      	str	r2, [r3, #24]
      break;
 800bbb4:	e043      	b.n	800bc3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 fabd 	bl	800c13c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69da      	ldr	r2, [r3, #28]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0208 	orr.w	r2, r2, #8
 800bbd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69da      	ldr	r2, [r3, #28]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f022 0204 	bic.w	r2, r2, #4
 800bbe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69d9      	ldr	r1, [r3, #28]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	691a      	ldr	r2, [r3, #16]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	61da      	str	r2, [r3, #28]
      break;
 800bbf4:	e023      	b.n	800bc3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f000 fb11 	bl	800c224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69da      	ldr	r2, [r3, #28]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	69d9      	ldr	r1, [r3, #28]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	021a      	lsls	r2, r3, #8
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	61da      	str	r2, [r3, #28]
      break;
 800bc36:	e002      	b.n	800bc3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d101      	bne.n	800bc6c <HAL_TIM_ConfigClockSource+0x1c>
 800bc68:	2302      	movs	r3, #2
 800bc6a:	e0b4      	b.n	800bdd6 <HAL_TIM_ConfigClockSource+0x186>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2202      	movs	r2, #2
 800bc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca4:	d03e      	beq.n	800bd24 <HAL_TIM_ConfigClockSource+0xd4>
 800bca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcaa:	f200 8087 	bhi.w	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcb2:	f000 8086 	beq.w	800bdc2 <HAL_TIM_ConfigClockSource+0x172>
 800bcb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcba:	d87f      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcbc:	2b70      	cmp	r3, #112	; 0x70
 800bcbe:	d01a      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0xa6>
 800bcc0:	2b70      	cmp	r3, #112	; 0x70
 800bcc2:	d87b      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcc4:	2b60      	cmp	r3, #96	; 0x60
 800bcc6:	d050      	beq.n	800bd6a <HAL_TIM_ConfigClockSource+0x11a>
 800bcc8:	2b60      	cmp	r3, #96	; 0x60
 800bcca:	d877      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bccc:	2b50      	cmp	r3, #80	; 0x50
 800bcce:	d03c      	beq.n	800bd4a <HAL_TIM_ConfigClockSource+0xfa>
 800bcd0:	2b50      	cmp	r3, #80	; 0x50
 800bcd2:	d873      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcd4:	2b40      	cmp	r3, #64	; 0x40
 800bcd6:	d058      	beq.n	800bd8a <HAL_TIM_ConfigClockSource+0x13a>
 800bcd8:	2b40      	cmp	r3, #64	; 0x40
 800bcda:	d86f      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcdc:	2b30      	cmp	r3, #48	; 0x30
 800bcde:	d064      	beq.n	800bdaa <HAL_TIM_ConfigClockSource+0x15a>
 800bce0:	2b30      	cmp	r3, #48	; 0x30
 800bce2:	d86b      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d060      	beq.n	800bdaa <HAL_TIM_ConfigClockSource+0x15a>
 800bce8:	2b20      	cmp	r3, #32
 800bcea:	d867      	bhi.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d05c      	beq.n	800bdaa <HAL_TIM_ConfigClockSource+0x15a>
 800bcf0:	2b10      	cmp	r3, #16
 800bcf2:	d05a      	beq.n	800bdaa <HAL_TIM_ConfigClockSource+0x15a>
 800bcf4:	e062      	b.n	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	6899      	ldr	r1, [r3, #8]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	f000 fb5d 	bl	800c3c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	609a      	str	r2, [r3, #8]
      break;
 800bd22:	e04f      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6818      	ldr	r0, [r3, #0]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	6899      	ldr	r1, [r3, #8]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f000 fb46 	bl	800c3c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689a      	ldr	r2, [r3, #8]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd46:	609a      	str	r2, [r3, #8]
      break;
 800bd48:	e03c      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6818      	ldr	r0, [r3, #0]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	6859      	ldr	r1, [r3, #4]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f000 faba 	bl	800c2d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2150      	movs	r1, #80	; 0x50
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 fb13 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800bd68:	e02c      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6818      	ldr	r0, [r3, #0]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	6859      	ldr	r1, [r3, #4]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	461a      	mov	r2, r3
 800bd78:	f000 fad9 	bl	800c32e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2160      	movs	r1, #96	; 0x60
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fb03 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800bd88:	e01c      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6859      	ldr	r1, [r3, #4]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	461a      	mov	r2, r3
 800bd98:	f000 fa9a 	bl	800c2d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2140      	movs	r1, #64	; 0x40
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 faf3 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800bda8:	e00c      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	f000 faea 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800bdba:	e003      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc0:	e000      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b083      	sub	sp, #12
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdfa:	bf00      	nop
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be06:	b480      	push	{r7}
 800be08:	b083      	sub	sp, #12
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be0e:	bf00      	nop
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b083      	sub	sp, #12
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be22:	bf00      	nop
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
	...

0800be30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a40      	ldr	r2, [pc, #256]	; (800bf44 <TIM_Base_SetConfig+0x114>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d013      	beq.n	800be70 <TIM_Base_SetConfig+0x40>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be4e:	d00f      	beq.n	800be70 <TIM_Base_SetConfig+0x40>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a3d      	ldr	r2, [pc, #244]	; (800bf48 <TIM_Base_SetConfig+0x118>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d00b      	beq.n	800be70 <TIM_Base_SetConfig+0x40>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a3c      	ldr	r2, [pc, #240]	; (800bf4c <TIM_Base_SetConfig+0x11c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d007      	beq.n	800be70 <TIM_Base_SetConfig+0x40>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a3b      	ldr	r2, [pc, #236]	; (800bf50 <TIM_Base_SetConfig+0x120>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d003      	beq.n	800be70 <TIM_Base_SetConfig+0x40>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a3a      	ldr	r2, [pc, #232]	; (800bf54 <TIM_Base_SetConfig+0x124>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d108      	bne.n	800be82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	4313      	orrs	r3, r2
 800be80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a2f      	ldr	r2, [pc, #188]	; (800bf44 <TIM_Base_SetConfig+0x114>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d02b      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be90:	d027      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a2c      	ldr	r2, [pc, #176]	; (800bf48 <TIM_Base_SetConfig+0x118>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d023      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a2b      	ldr	r2, [pc, #172]	; (800bf4c <TIM_Base_SetConfig+0x11c>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d01f      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a2a      	ldr	r2, [pc, #168]	; (800bf50 <TIM_Base_SetConfig+0x120>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d01b      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a29      	ldr	r2, [pc, #164]	; (800bf54 <TIM_Base_SetConfig+0x124>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d017      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a28      	ldr	r2, [pc, #160]	; (800bf58 <TIM_Base_SetConfig+0x128>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d013      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a27      	ldr	r2, [pc, #156]	; (800bf5c <TIM_Base_SetConfig+0x12c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d00f      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a26      	ldr	r2, [pc, #152]	; (800bf60 <TIM_Base_SetConfig+0x130>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d00b      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a25      	ldr	r2, [pc, #148]	; (800bf64 <TIM_Base_SetConfig+0x134>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d007      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a24      	ldr	r2, [pc, #144]	; (800bf68 <TIM_Base_SetConfig+0x138>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d003      	beq.n	800bee2 <TIM_Base_SetConfig+0xb2>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a23      	ldr	r2, [pc, #140]	; (800bf6c <TIM_Base_SetConfig+0x13c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d108      	bne.n	800bef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	695b      	ldr	r3, [r3, #20]
 800befe:	4313      	orrs	r3, r2
 800bf00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	689a      	ldr	r2, [r3, #8]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	; (800bf44 <TIM_Base_SetConfig+0x114>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d003      	beq.n	800bf28 <TIM_Base_SetConfig+0xf8>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <TIM_Base_SetConfig+0x124>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d103      	bne.n	800bf30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	691a      	ldr	r2, [r3, #16]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	615a      	str	r2, [r3, #20]
}
 800bf36:	bf00      	nop
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	40010000 	.word	0x40010000
 800bf48:	40000400 	.word	0x40000400
 800bf4c:	40000800 	.word	0x40000800
 800bf50:	40000c00 	.word	0x40000c00
 800bf54:	40010400 	.word	0x40010400
 800bf58:	40014000 	.word	0x40014000
 800bf5c:	40014400 	.word	0x40014400
 800bf60:	40014800 	.word	0x40014800
 800bf64:	40001800 	.word	0x40001800
 800bf68:	40001c00 	.word	0x40001c00
 800bf6c:	40002000 	.word	0x40002000

0800bf70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	f023 0201 	bic.w	r2, r3, #1
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f023 0302 	bic.w	r3, r3, #2
 800bfb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a20      	ldr	r2, [pc, #128]	; (800c048 <TIM_OC1_SetConfig+0xd8>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d003      	beq.n	800bfd4 <TIM_OC1_SetConfig+0x64>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a1f      	ldr	r2, [pc, #124]	; (800c04c <TIM_OC1_SetConfig+0xdc>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d10c      	bne.n	800bfee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f023 0308 	bic.w	r3, r3, #8
 800bfda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f023 0304 	bic.w	r3, r3, #4
 800bfec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a15      	ldr	r2, [pc, #84]	; (800c048 <TIM_OC1_SetConfig+0xd8>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d003      	beq.n	800bffe <TIM_OC1_SetConfig+0x8e>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a14      	ldr	r2, [pc, #80]	; (800c04c <TIM_OC1_SetConfig+0xdc>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d111      	bne.n	800c022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	4313      	orrs	r3, r2
 800c016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	4313      	orrs	r3, r2
 800c020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	621a      	str	r2, [r3, #32]
}
 800c03c:	bf00      	nop
 800c03e:	371c      	adds	r7, #28
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	40010000 	.word	0x40010000
 800c04c:	40010400 	.word	0x40010400

0800c050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	f023 0210 	bic.w	r2, r3, #16
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	021b      	lsls	r3, r3, #8
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	4313      	orrs	r3, r2
 800c092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f023 0320 	bic.w	r3, r3, #32
 800c09a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	011b      	lsls	r3, r3, #4
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a22      	ldr	r2, [pc, #136]	; (800c134 <TIM_OC2_SetConfig+0xe4>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d003      	beq.n	800c0b8 <TIM_OC2_SetConfig+0x68>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a21      	ldr	r2, [pc, #132]	; (800c138 <TIM_OC2_SetConfig+0xe8>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d10d      	bne.n	800c0d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	011b      	lsls	r3, r3, #4
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a17      	ldr	r2, [pc, #92]	; (800c134 <TIM_OC2_SetConfig+0xe4>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d003      	beq.n	800c0e4 <TIM_OC2_SetConfig+0x94>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a16      	ldr	r2, [pc, #88]	; (800c138 <TIM_OC2_SetConfig+0xe8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d113      	bne.n	800c10c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	4313      	orrs	r3, r2
 800c10a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	621a      	str	r2, [r3, #32]
}
 800c126:	bf00      	nop
 800c128:	371c      	adds	r7, #28
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	40010000 	.word	0x40010000
 800c138:	40010400 	.word	0x40010400

0800c13c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f023 0303 	bic.w	r3, r3, #3
 800c172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	021b      	lsls	r3, r3, #8
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	4313      	orrs	r3, r2
 800c190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a21      	ldr	r2, [pc, #132]	; (800c21c <TIM_OC3_SetConfig+0xe0>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d003      	beq.n	800c1a2 <TIM_OC3_SetConfig+0x66>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a20      	ldr	r2, [pc, #128]	; (800c220 <TIM_OC3_SetConfig+0xe4>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d10d      	bne.n	800c1be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	021b      	lsls	r3, r3, #8
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a16      	ldr	r2, [pc, #88]	; (800c21c <TIM_OC3_SetConfig+0xe0>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d003      	beq.n	800c1ce <TIM_OC3_SetConfig+0x92>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a15      	ldr	r2, [pc, #84]	; (800c220 <TIM_OC3_SetConfig+0xe4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d113      	bne.n	800c1f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	695b      	ldr	r3, [r3, #20]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	621a      	str	r2, [r3, #32]
}
 800c210:	bf00      	nop
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	40010000 	.word	0x40010000
 800c220:	40010400 	.word	0x40010400

0800c224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c25a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	021b      	lsls	r3, r3, #8
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4313      	orrs	r3, r2
 800c266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c26e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	031b      	lsls	r3, r3, #12
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	4313      	orrs	r3, r2
 800c27a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a12      	ldr	r2, [pc, #72]	; (800c2c8 <TIM_OC4_SetConfig+0xa4>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d003      	beq.n	800c28c <TIM_OC4_SetConfig+0x68>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a11      	ldr	r2, [pc, #68]	; (800c2cc <TIM_OC4_SetConfig+0xa8>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d109      	bne.n	800c2a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	019b      	lsls	r3, r3, #6
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	685a      	ldr	r2, [r3, #4]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	621a      	str	r2, [r3, #32]
}
 800c2ba:	bf00      	nop
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	40010000 	.word	0x40010000
 800c2cc:	40010400 	.word	0x40010400

0800c2d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	f023 0201 	bic.w	r2, r3, #1
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	4313      	orrs	r3, r2
 800c304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f023 030a 	bic.w	r3, r3, #10
 800c30c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	4313      	orrs	r3, r2
 800c314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	621a      	str	r2, [r3, #32]
}
 800c322:	bf00      	nop
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c32e:	b480      	push	{r7}
 800c330:	b087      	sub	sp, #28
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	f023 0210 	bic.w	r2, r3, #16
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	031b      	lsls	r3, r3, #12
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	4313      	orrs	r3, r2
 800c362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c36a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	4313      	orrs	r3, r2
 800c374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	693a      	ldr	r2, [r7, #16]
 800c380:	621a      	str	r2, [r3, #32]
}
 800c382:	bf00      	nop
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c38e:	b480      	push	{r7}
 800c390:	b085      	sub	sp, #20
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	f043 0307 	orr.w	r3, r3, #7
 800c3b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	609a      	str	r2, [r3, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b087      	sub	sp, #28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	021a      	lsls	r2, r3, #8
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	609a      	str	r2, [r3, #8]
}
 800c3f8:	bf00      	nop
 800c3fa:	371c      	adds	r7, #28
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f003 031f 	and.w	r3, r3, #31
 800c416:	2201      	movs	r2, #1
 800c418:	fa02 f303 	lsl.w	r3, r2, r3
 800c41c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6a1a      	ldr	r2, [r3, #32]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	43db      	mvns	r3, r3
 800c426:	401a      	ands	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a1a      	ldr	r2, [r3, #32]
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f003 031f 	and.w	r3, r3, #31
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	fa01 f303 	lsl.w	r3, r1, r3
 800c43c:	431a      	orrs	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	621a      	str	r2, [r3, #32]
}
 800c442:	bf00      	nop
 800c444:	371c      	adds	r7, #28
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
	...

0800c450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c460:	2b01      	cmp	r3, #1
 800c462:	d101      	bne.n	800c468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c464:	2302      	movs	r3, #2
 800c466:	e05a      	b.n	800c51e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2202      	movs	r2, #2
 800c474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c48e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	4313      	orrs	r3, r2
 800c498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a21      	ldr	r2, [pc, #132]	; (800c52c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d022      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b4:	d01d      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a1d      	ldr	r2, [pc, #116]	; (800c530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d018      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a1b      	ldr	r2, [pc, #108]	; (800c534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d013      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a1a      	ldr	r2, [pc, #104]	; (800c538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d00e      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a18      	ldr	r2, [pc, #96]	; (800c53c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d009      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a17      	ldr	r2, [pc, #92]	; (800c540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d004      	beq.n	800c4f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a15      	ldr	r2, [pc, #84]	; (800c544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d10c      	bne.n	800c50c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4313      	orrs	r3, r2
 800c502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	40010000 	.word	0x40010000
 800c530:	40000400 	.word	0x40000400
 800c534:	40000800 	.word	0x40000800
 800c538:	40000c00 	.word	0x40000c00
 800c53c:	40010400 	.word	0x40010400
 800c540:	40014000 	.word	0x40014000
 800c544:	40001800 	.word	0x40001800

0800c548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d101      	bne.n	800c564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c560:	2302      	movs	r3, #2
 800c562:	e03d      	b.n	800c5e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	4313      	orrs	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	4313      	orrs	r3, r2
 800c594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c608:	bf00      	nop
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c614:	b084      	sub	sp, #16
 800c616:	b580      	push	{r7, lr}
 800c618:	b084      	sub	sp, #16
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	f107 001c 	add.w	r0, r7, #28
 800c622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d122      	bne.n	800c672 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c656:	2b01      	cmp	r3, #1
 800c658:	d105      	bne.n	800c666 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 fb16 	bl	800dc98 <USB_CoreReset>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73fb      	strb	r3, [r7, #15]
 800c670:	e01a      	b.n	800c6a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fb0a 	bl	800dc98 <USB_CoreReset>
 800c684:	4603      	mov	r3, r0
 800c686:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	639a      	str	r2, [r3, #56]	; 0x38
 800c69a:	e005      	b.n	800c6a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d10b      	bne.n	800c6c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	f043 0206 	orr.w	r2, r3, #6
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f043 0220 	orr.w	r2, r3, #32
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6d2:	b004      	add	sp, #16
 800c6d4:	4770      	bx	lr
	...

0800c6d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b087      	sub	sp, #28
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d165      	bne.n	800c7b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	4a41      	ldr	r2, [pc, #260]	; (800c7f4 <USB_SetTurnaroundTime+0x11c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d906      	bls.n	800c702 <USB_SetTurnaroundTime+0x2a>
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	4a40      	ldr	r2, [pc, #256]	; (800c7f8 <USB_SetTurnaroundTime+0x120>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d202      	bcs.n	800c702 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c6fc:	230f      	movs	r3, #15
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	e062      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	4a3c      	ldr	r2, [pc, #240]	; (800c7f8 <USB_SetTurnaroundTime+0x120>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d306      	bcc.n	800c718 <USB_SetTurnaroundTime+0x40>
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	4a3b      	ldr	r2, [pc, #236]	; (800c7fc <USB_SetTurnaroundTime+0x124>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d202      	bcs.n	800c718 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c712:	230e      	movs	r3, #14
 800c714:	617b      	str	r3, [r7, #20]
 800c716:	e057      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	4a38      	ldr	r2, [pc, #224]	; (800c7fc <USB_SetTurnaroundTime+0x124>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d306      	bcc.n	800c72e <USB_SetTurnaroundTime+0x56>
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4a37      	ldr	r2, [pc, #220]	; (800c800 <USB_SetTurnaroundTime+0x128>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d202      	bcs.n	800c72e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c728:	230d      	movs	r3, #13
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	e04c      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4a33      	ldr	r2, [pc, #204]	; (800c800 <USB_SetTurnaroundTime+0x128>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d306      	bcc.n	800c744 <USB_SetTurnaroundTime+0x6c>
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	4a32      	ldr	r2, [pc, #200]	; (800c804 <USB_SetTurnaroundTime+0x12c>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d802      	bhi.n	800c744 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c73e:	230c      	movs	r3, #12
 800c740:	617b      	str	r3, [r7, #20]
 800c742:	e041      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4a2f      	ldr	r2, [pc, #188]	; (800c804 <USB_SetTurnaroundTime+0x12c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d906      	bls.n	800c75a <USB_SetTurnaroundTime+0x82>
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	4a2e      	ldr	r2, [pc, #184]	; (800c808 <USB_SetTurnaroundTime+0x130>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d802      	bhi.n	800c75a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c754:	230b      	movs	r3, #11
 800c756:	617b      	str	r3, [r7, #20]
 800c758:	e036      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	4a2a      	ldr	r2, [pc, #168]	; (800c808 <USB_SetTurnaroundTime+0x130>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d906      	bls.n	800c770 <USB_SetTurnaroundTime+0x98>
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	4a29      	ldr	r2, [pc, #164]	; (800c80c <USB_SetTurnaroundTime+0x134>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d802      	bhi.n	800c770 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c76a:	230a      	movs	r3, #10
 800c76c:	617b      	str	r3, [r7, #20]
 800c76e:	e02b      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	4a26      	ldr	r2, [pc, #152]	; (800c80c <USB_SetTurnaroundTime+0x134>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d906      	bls.n	800c786 <USB_SetTurnaroundTime+0xae>
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	4a25      	ldr	r2, [pc, #148]	; (800c810 <USB_SetTurnaroundTime+0x138>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d202      	bcs.n	800c786 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c780:	2309      	movs	r3, #9
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e020      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	4a21      	ldr	r2, [pc, #132]	; (800c810 <USB_SetTurnaroundTime+0x138>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d306      	bcc.n	800c79c <USB_SetTurnaroundTime+0xc4>
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	4a20      	ldr	r2, [pc, #128]	; (800c814 <USB_SetTurnaroundTime+0x13c>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d802      	bhi.n	800c79c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c796:	2308      	movs	r3, #8
 800c798:	617b      	str	r3, [r7, #20]
 800c79a:	e015      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4a1d      	ldr	r2, [pc, #116]	; (800c814 <USB_SetTurnaroundTime+0x13c>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d906      	bls.n	800c7b2 <USB_SetTurnaroundTime+0xda>
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	4a1c      	ldr	r2, [pc, #112]	; (800c818 <USB_SetTurnaroundTime+0x140>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d202      	bcs.n	800c7b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c7ac:	2307      	movs	r3, #7
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	e00a      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c7b2:	2306      	movs	r3, #6
 800c7b4:	617b      	str	r3, [r7, #20]
 800c7b6:	e007      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c7be:	2309      	movs	r3, #9
 800c7c0:	617b      	str	r3, [r7, #20]
 800c7c2:	e001      	b.n	800c7c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c7c4:	2309      	movs	r3, #9
 800c7c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	68da      	ldr	r2, [r3, #12]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	029b      	lsls	r3, r3, #10
 800c7dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	371c      	adds	r7, #28
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr
 800c7f4:	00d8acbf 	.word	0x00d8acbf
 800c7f8:	00e4e1c0 	.word	0x00e4e1c0
 800c7fc:	00f42400 	.word	0x00f42400
 800c800:	01067380 	.word	0x01067380
 800c804:	011a499f 	.word	0x011a499f
 800c808:	01312cff 	.word	0x01312cff
 800c80c:	014ca43f 	.word	0x014ca43f
 800c810:	016e3600 	.word	0x016e3600
 800c814:	01a6ab1f 	.word	0x01a6ab1f
 800c818:	01e84800 	.word	0x01e84800

0800c81c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f043 0201 	orr.w	r2, r3, #1
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f023 0201 	bic.w	r2, r3, #1
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c87c:	78fb      	ldrb	r3, [r7, #3]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d115      	bne.n	800c8ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c88e:	2001      	movs	r0, #1
 800c890:	f7f7 fefc 	bl	800468c <HAL_Delay>
      ms++;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3301      	adds	r3, #1
 800c898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f001 f96c 	bl	800db78 <USB_GetMode>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d01e      	beq.n	800c8e4 <USB_SetCurrentMode+0x84>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b31      	cmp	r3, #49	; 0x31
 800c8aa:	d9f0      	bls.n	800c88e <USB_SetCurrentMode+0x2e>
 800c8ac:	e01a      	b.n	800c8e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c8ae:	78fb      	ldrb	r3, [r7, #3]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d115      	bne.n	800c8e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	f7f7 fee3 	bl	800468c <HAL_Delay>
      ms++;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f001 f953 	bl	800db78 <USB_GetMode>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <USB_SetCurrentMode+0x84>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b31      	cmp	r3, #49	; 0x31
 800c8dc:	d9f0      	bls.n	800c8c0 <USB_SetCurrentMode+0x60>
 800c8de:	e001      	b.n	800c8e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e005      	b.n	800c8f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b32      	cmp	r3, #50	; 0x32
 800c8e8:	d101      	bne.n	800c8ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b086      	sub	sp, #24
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c912:	2300      	movs	r3, #0
 800c914:	613b      	str	r3, [r7, #16]
 800c916:	e009      	b.n	800c92c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3340      	adds	r3, #64	; 0x40
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	2200      	movs	r2, #0
 800c924:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	3301      	adds	r3, #1
 800c92a:	613b      	str	r3, [r7, #16]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	2b0e      	cmp	r3, #14
 800c930:	d9f2      	bls.n	800c918 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c934:	2b00      	cmp	r3, #0
 800c936:	d11c      	bne.n	800c972 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c946:	f043 0302 	orr.w	r3, r3, #2
 800c94a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	601a      	str	r2, [r3, #0]
 800c970:	e005      	b.n	800c97e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c984:	461a      	mov	r2, r3
 800c986:	2300      	movs	r3, #0
 800c988:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c990:	4619      	mov	r1, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c998:	461a      	mov	r2, r3
 800c99a:	680b      	ldr	r3, [r1, #0]
 800c99c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d10c      	bne.n	800c9be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d104      	bne.n	800c9b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f945 	bl	800cc3c <USB_SetDevSpeed>
 800c9b2:	e008      	b.n	800c9c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f940 	bl	800cc3c <USB_SetDevSpeed>
 800c9bc:	e003      	b.n	800c9c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c9be:	2103      	movs	r1, #3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f93b 	bl	800cc3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c9c6:	2110      	movs	r1, #16
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 f8f3 	bl	800cbb4 <USB_FlushTxFifo>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f90f 	bl	800cbfc <USB_FlushRxFifo>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca06:	461a      	mov	r2, r3
 800ca08:	2300      	movs	r3, #0
 800ca0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	613b      	str	r3, [r7, #16]
 800ca10:	e043      	b.n	800ca9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca28:	d118      	bne.n	800ca5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	015a      	lsls	r2, r3, #5
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4413      	add	r3, r2
 800ca38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	e013      	b.n	800ca6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	015a      	lsls	r2, r3, #5
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca52:	461a      	mov	r2, r3
 800ca54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	e008      	b.n	800ca6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca68:	461a      	mov	r2, r3
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	015a      	lsls	r2, r3, #5
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	4413      	add	r3, r2
 800ca76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	015a      	lsls	r2, r3, #5
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	4413      	add	r3, r2
 800ca88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	3301      	adds	r3, #1
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d3b7      	bcc.n	800ca12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800caa2:	2300      	movs	r3, #0
 800caa4:	613b      	str	r3, [r7, #16]
 800caa6:	e043      	b.n	800cb30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	015a      	lsls	r2, r3, #5
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cabe:	d118      	bne.n	800caf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10a      	bne.n	800cadc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad2:	461a      	mov	r2, r3
 800cad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	e013      	b.n	800cb04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae8:	461a      	mov	r2, r3
 800caea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	e008      	b.n	800cb04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafe:	461a      	mov	r2, r3
 800cb00:	2300      	movs	r3, #0
 800cb02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb10:	461a      	mov	r2, r3
 800cb12:	2300      	movs	r3, #0
 800cb14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	015a      	lsls	r2, r3, #5
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb22:	461a      	mov	r2, r3
 800cb24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d3b7      	bcc.n	800caa8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d105      	bne.n	800cb6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	f043 0210 	orr.w	r2, r3, #16
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699a      	ldr	r2, [r3, #24]
 800cb70:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <USB_DevInit+0x2b8>)
 800cb72:	4313      	orrs	r3, r2
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d005      	beq.n	800cb8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	f043 0208 	orr.w	r2, r3, #8
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d107      	bne.n	800cba0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb98:	f043 0304 	orr.w	r3, r3, #4
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbac:	b004      	add	sp, #16
 800cbae:	4770      	bx	lr
 800cbb0:	803c3800 	.word	0x803c3800

0800cbb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	019b      	lsls	r3, r3, #6
 800cbc6:	f043 0220 	orr.w	r2, r3, #32
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	4a08      	ldr	r2, [pc, #32]	; (800cbf8 <USB_FlushTxFifo+0x44>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d901      	bls.n	800cbde <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	e006      	b.n	800cbec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	f003 0320 	and.w	r3, r3, #32
 800cbe6:	2b20      	cmp	r3, #32
 800cbe8:	d0f1      	beq.n	800cbce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr
 800cbf8:	00030d40 	.word	0x00030d40

0800cbfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2210      	movs	r2, #16
 800cc0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3301      	adds	r3, #1
 800cc12:	60fb      	str	r3, [r7, #12]
 800cc14:	4a08      	ldr	r2, [pc, #32]	; (800cc38 <USB_FlushRxFifo+0x3c>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d901      	bls.n	800cc1e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e006      	b.n	800cc2c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	f003 0310 	and.w	r3, r3, #16
 800cc26:	2b10      	cmp	r3, #16
 800cc28:	d0f1      	beq.n	800cc0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	00030d40 	.word	0x00030d40

0800cc3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	68f9      	ldr	r1, [r7, #12]
 800cc58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b087      	sub	sp, #28
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f003 0306 	and.w	r3, r3, #6
 800cc86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d102      	bne.n	800cc94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	75fb      	strb	r3, [r7, #23]
 800cc92:	e00a      	b.n	800ccaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d002      	beq.n	800cca0 <USB_GetDevSpeed+0x32>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b06      	cmp	r3, #6
 800cc9e:	d102      	bne.n	800cca6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cca0:	2302      	movs	r3, #2
 800cca2:	75fb      	strb	r3, [r7, #23]
 800cca4:	e001      	b.n	800ccaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cca6:	230f      	movs	r3, #15
 800cca8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	371c      	adds	r7, #28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	785b      	ldrb	r3, [r3, #1]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d13a      	bne.n	800cd4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccda:	69da      	ldr	r2, [r3, #28]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f003 030f 	and.w	r3, r3, #15
 800cce4:	2101      	movs	r1, #1
 800cce6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	68f9      	ldr	r1, [r7, #12]
 800ccee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	015a      	lsls	r2, r3, #5
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d155      	bne.n	800cdb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	78db      	ldrb	r3, [r3, #3]
 800cd26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	059b      	lsls	r3, r3, #22
 800cd2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd30:	4313      	orrs	r3, r2
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	0151      	lsls	r1, r2, #5
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	440a      	add	r2, r1
 800cd3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	e036      	b.n	800cdb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd50:	69da      	ldr	r2, [r3, #28]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	f003 030f 	and.w	r3, r3, #15
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd60:	041b      	lsls	r3, r3, #16
 800cd62:	68f9      	ldr	r1, [r7, #12]
 800cd64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	015a      	lsls	r2, r3, #5
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4413      	add	r3, r2
 800cd74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d11a      	bne.n	800cdb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	78db      	ldrb	r3, [r3, #3]
 800cd9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	4313      	orrs	r3, r2
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	0151      	lsls	r1, r2, #5
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	440a      	add	r2, r1
 800cdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
	...

0800cdc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d161      	bne.n	800cea8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	015a      	lsls	r2, r3, #5
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdfa:	d11f      	bne.n	800ce3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	015a      	lsls	r2, r3, #5
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4413      	add	r3, r2
 800ce04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	0151      	lsls	r1, r2, #5
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	440a      	add	r2, r1
 800ce12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	0151      	lsls	r1, r2, #5
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	440a      	add	r2, r1
 800ce32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	43db      	mvns	r3, r3
 800ce56:	68f9      	ldr	r1, [r7, #12]
 800ce58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce66:	69da      	ldr	r2, [r3, #28]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	f003 030f 	and.w	r3, r3, #15
 800ce70:	2101      	movs	r1, #1
 800ce72:	fa01 f303 	lsl.w	r3, r1, r3
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	43db      	mvns	r3, r3
 800ce7a:	68f9      	ldr	r1, [r7, #12]
 800ce7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce80:	4013      	ands	r3, r2
 800ce82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	015a      	lsls	r2, r3, #5
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	0159      	lsls	r1, r3, #5
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	440b      	add	r3, r1
 800ce9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4b35      	ldr	r3, [pc, #212]	; (800cf78 <USB_DeactivateEndpoint+0x1b0>)
 800cea2:	4013      	ands	r3, r2
 800cea4:	600b      	str	r3, [r1, #0]
 800cea6:	e060      	b.n	800cf6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	015a      	lsls	r2, r3, #5
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4413      	add	r3, r2
 800ceb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ceba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cebe:	d11f      	bne.n	800cf00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	015a      	lsls	r2, r3, #5
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	4413      	add	r3, r2
 800cec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	0151      	lsls	r1, r2, #5
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	440a      	add	r2, r1
 800ced6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cede:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	0151      	lsls	r1, r2, #5
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	440a      	add	r2, r1
 800cef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cefa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cefe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f003 030f 	and.w	r3, r3, #15
 800cf10:	2101      	movs	r1, #1
 800cf12:	fa01 f303 	lsl.w	r3, r1, r3
 800cf16:	041b      	lsls	r3, r3, #16
 800cf18:	43db      	mvns	r3, r3
 800cf1a:	68f9      	ldr	r1, [r7, #12]
 800cf1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf20:	4013      	ands	r3, r2
 800cf22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf2a:	69da      	ldr	r2, [r3, #28]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	f003 030f 	and.w	r3, r3, #15
 800cf34:	2101      	movs	r1, #1
 800cf36:	fa01 f303 	lsl.w	r3, r1, r3
 800cf3a:	041b      	lsls	r3, r3, #16
 800cf3c:	43db      	mvns	r3, r3
 800cf3e:	68f9      	ldr	r1, [r7, #12]
 800cf40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf44:	4013      	ands	r3, r2
 800cf46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	015a      	lsls	r2, r3, #5
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	0159      	lsls	r1, r3, #5
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	440b      	add	r3, r1
 800cf5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf62:	4619      	mov	r1, r3
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <USB_DeactivateEndpoint+0x1b4>)
 800cf66:	4013      	ands	r3, r2
 800cf68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	ec337800 	.word	0xec337800
 800cf7c:	eff37800 	.word	0xeff37800

0800cf80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08a      	sub	sp, #40	; 0x28
 800cf84:	af02      	add	r7, sp, #8
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	785b      	ldrb	r3, [r3, #1]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	f040 815c 	bne.w	800d25a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d132      	bne.n	800d010 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	015a      	lsls	r2, r3, #5
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	69ba      	ldr	r2, [r7, #24]
 800cfba:	0151      	lsls	r1, r2, #5
 800cfbc:	69fa      	ldr	r2, [r7, #28]
 800cfbe:	440a      	add	r2, r1
 800cfc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	015a      	lsls	r2, r3, #5
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	0151      	lsls	r1, r2, #5
 800cfe0:	69fa      	ldr	r2, [r7, #28]
 800cfe2:	440a      	add	r2, r1
 800cfe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	015a      	lsls	r2, r3, #5
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	4413      	add	r3, r2
 800cff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	69ba      	ldr	r2, [r7, #24]
 800cffe:	0151      	lsls	r1, r2, #5
 800d000:	69fa      	ldr	r2, [r7, #28]
 800d002:	440a      	add	r2, r1
 800d004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d008:	0cdb      	lsrs	r3, r3, #19
 800d00a:	04db      	lsls	r3, r3, #19
 800d00c:	6113      	str	r3, [r2, #16]
 800d00e:	e074      	b.n	800d0fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	015a      	lsls	r2, r3, #5
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	4413      	add	r3, r2
 800d018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	0151      	lsls	r1, r2, #5
 800d022:	69fa      	ldr	r2, [r7, #28]
 800d024:	440a      	add	r2, r1
 800d026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d02a:	0cdb      	lsrs	r3, r3, #19
 800d02c:	04db      	lsls	r3, r3, #19
 800d02e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	015a      	lsls	r2, r3, #5
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	4413      	add	r3, r2
 800d038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	0151      	lsls	r1, r2, #5
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	440a      	add	r2, r1
 800d046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d04a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d04e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	015a      	lsls	r2, r3, #5
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	4413      	add	r3, r2
 800d05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d060:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	6959      	ldr	r1, [r3, #20]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	440b      	add	r3, r1
 800d06c:	1e59      	subs	r1, r3, #1
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	fbb1 f3f3 	udiv	r3, r1, r3
 800d076:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d078:	4b9d      	ldr	r3, [pc, #628]	; (800d2f0 <USB_EPStartXfer+0x370>)
 800d07a:	400b      	ands	r3, r1
 800d07c:	69b9      	ldr	r1, [r7, #24]
 800d07e:	0148      	lsls	r0, r1, #5
 800d080:	69f9      	ldr	r1, [r7, #28]
 800d082:	4401      	add	r1, r0
 800d084:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d088:	4313      	orrs	r3, r2
 800d08a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d098:	691a      	ldr	r2, [r3, #16]
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0a2:	69b9      	ldr	r1, [r7, #24]
 800d0a4:	0148      	lsls	r0, r1, #5
 800d0a6:	69f9      	ldr	r1, [r7, #28]
 800d0a8:	4401      	add	r1, r0
 800d0aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	78db      	ldrb	r3, [r3, #3]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d11f      	bne.n	800d0fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	015a      	lsls	r2, r3, #5
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	0151      	lsls	r1, r2, #5
 800d0cc:	69fa      	ldr	r2, [r7, #28]
 800d0ce:	440a      	add	r2, r1
 800d0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d0d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	0151      	lsls	r1, r2, #5
 800d0ec:	69fa      	ldr	r2, [r7, #28]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d14b      	bne.n	800d198 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d009      	beq.n	800d11c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d114:	461a      	mov	r2, r3
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	78db      	ldrb	r3, [r3, #3]
 800d120:	2b01      	cmp	r3, #1
 800d122:	d128      	bne.n	800d176 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d130:	2b00      	cmp	r3, #0
 800d132:	d110      	bne.n	800d156 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	015a      	lsls	r2, r3, #5
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	4413      	add	r3, r2
 800d13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	69ba      	ldr	r2, [r7, #24]
 800d144:	0151      	lsls	r1, r2, #5
 800d146:	69fa      	ldr	r2, [r7, #28]
 800d148:	440a      	add	r2, r1
 800d14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d14e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	e00f      	b.n	800d176 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	69ba      	ldr	r2, [r7, #24]
 800d166:	0151      	lsls	r1, r2, #5
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	440a      	add	r2, r1
 800d16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d174:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	015a      	lsls	r2, r3, #5
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	4413      	add	r3, r2
 800d17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	69ba      	ldr	r2, [r7, #24]
 800d186:	0151      	lsls	r1, r2, #5
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	440a      	add	r2, r1
 800d18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	e12f      	b.n	800d3f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	78db      	ldrb	r3, [r3, #3]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d015      	beq.n	800d1ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 8117 	beq.w	800d3f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 030f 	and.w	r3, r3, #15
 800d1da:	2101      	movs	r1, #1
 800d1dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d1e0:	69f9      	ldr	r1, [r7, #28]
 800d1e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	634b      	str	r3, [r1, #52]	; 0x34
 800d1ea:	e105      	b.n	800d3f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d110      	bne.n	800d21e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	0151      	lsls	r1, r2, #5
 800d20e:	69fa      	ldr	r2, [r7, #28]
 800d210:	440a      	add	r2, r1
 800d212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d21a:	6013      	str	r3, [r2, #0]
 800d21c:	e00f      	b.n	800d23e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	015a      	lsls	r2, r3, #5
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	4413      	add	r3, r2
 800d226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	69ba      	ldr	r2, [r7, #24]
 800d22e:	0151      	lsls	r1, r2, #5
 800d230:	69fa      	ldr	r2, [r7, #28]
 800d232:	440a      	add	r2, r1
 800d234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d23c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	68d9      	ldr	r1, [r3, #12]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	781a      	ldrb	r2, [r3, #0]
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	b298      	uxth	r0, r3
 800d24c:	79fb      	ldrb	r3, [r7, #7]
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	4603      	mov	r3, r0
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f000 fa2b 	bl	800d6ae <USB_WritePacket>
 800d258:	e0ce      	b.n	800d3f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	69ba      	ldr	r2, [r7, #24]
 800d26a:	0151      	lsls	r1, r2, #5
 800d26c:	69fa      	ldr	r2, [r7, #28]
 800d26e:	440a      	add	r2, r1
 800d270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d274:	0cdb      	lsrs	r3, r3, #19
 800d276:	04db      	lsls	r3, r3, #19
 800d278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	4413      	add	r3, r2
 800d282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	69ba      	ldr	r2, [r7, #24]
 800d28a:	0151      	lsls	r1, r2, #5
 800d28c:	69fa      	ldr	r2, [r7, #28]
 800d28e:	440a      	add	r2, r1
 800d290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d29c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d126      	bne.n	800d2f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b2:	691a      	ldr	r2, [r3, #16]
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2bc:	69b9      	ldr	r1, [r7, #24]
 800d2be:	0148      	lsls	r0, r1, #5
 800d2c0:	69f9      	ldr	r1, [r7, #28]
 800d2c2:	4401      	add	r1, r0
 800d2c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	015a      	lsls	r2, r3, #5
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	69ba      	ldr	r2, [r7, #24]
 800d2dc:	0151      	lsls	r1, r2, #5
 800d2de:	69fa      	ldr	r2, [r7, #28]
 800d2e0:	440a      	add	r2, r1
 800d2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2ea:	6113      	str	r3, [r2, #16]
 800d2ec:	e036      	b.n	800d35c <USB_EPStartXfer+0x3dc>
 800d2ee:	bf00      	nop
 800d2f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	695a      	ldr	r2, [r3, #20]
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	1e5a      	subs	r2, r3, #1
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	fbb2 f3f3 	udiv	r3, r2, r3
 800d308:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	4413      	add	r3, r2
 800d312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d316:	691a      	ldr	r2, [r3, #16]
 800d318:	8afb      	ldrh	r3, [r7, #22]
 800d31a:	04d9      	lsls	r1, r3, #19
 800d31c:	4b39      	ldr	r3, [pc, #228]	; (800d404 <USB_EPStartXfer+0x484>)
 800d31e:	400b      	ands	r3, r1
 800d320:	69b9      	ldr	r1, [r7, #24]
 800d322:	0148      	lsls	r0, r1, #5
 800d324:	69f9      	ldr	r1, [r7, #28]
 800d326:	4401      	add	r1, r0
 800d328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d32c:	4313      	orrs	r3, r2
 800d32e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	015a      	lsls	r2, r3, #5
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	4413      	add	r3, r2
 800d338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d33c:	691a      	ldr	r2, [r3, #16]
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	8af9      	ldrh	r1, [r7, #22]
 800d344:	fb01 f303 	mul.w	r3, r1, r3
 800d348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d34c:	69b9      	ldr	r1, [r7, #24]
 800d34e:	0148      	lsls	r0, r1, #5
 800d350:	69f9      	ldr	r1, [r7, #28]
 800d352:	4401      	add	r1, r0
 800d354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d358:	4313      	orrs	r3, r2
 800d35a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d10d      	bne.n	800d37e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	68d9      	ldr	r1, [r3, #12]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37a:	460a      	mov	r2, r1
 800d37c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	78db      	ldrb	r3, [r3, #3]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d128      	bne.n	800d3d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d392:	2b00      	cmp	r3, #0
 800d394:	d110      	bne.n	800d3b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	0151      	lsls	r1, r2, #5
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	440a      	add	r2, r1
 800d3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3b4:	6013      	str	r3, [r2, #0]
 800d3b6:	e00f      	b.n	800d3d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	0151      	lsls	r1, r2, #5
 800d3ca:	69fa      	ldr	r2, [r7, #28]
 800d3cc:	440a      	add	r2, r1
 800d3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	0151      	lsls	r1, r2, #5
 800d3ea:	69fa      	ldr	r2, [r7, #28]
 800d3ec:	440a      	add	r2, r1
 800d3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	1ff80000 	.word	0x1ff80000

0800d408 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d408:	b480      	push	{r7}
 800d40a:	b087      	sub	sp, #28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	4613      	mov	r3, r2
 800d414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	2b01      	cmp	r3, #1
 800d426:	f040 80cd 	bne.w	800d5c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d132      	bne.n	800d498 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	015a      	lsls	r2, r3, #5
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	4413      	add	r3, r2
 800d43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	0151      	lsls	r1, r2, #5
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	440a      	add	r2, r1
 800d448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d44c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	0151      	lsls	r1, r2, #5
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	440a      	add	r2, r1
 800d46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	0151      	lsls	r1, r2, #5
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	440a      	add	r2, r1
 800d48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d490:	0cdb      	lsrs	r3, r3, #19
 800d492:	04db      	lsls	r3, r3, #19
 800d494:	6113      	str	r3, [r2, #16]
 800d496:	e04e      	b.n	800d536 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	0151      	lsls	r1, r2, #5
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	440a      	add	r2, r1
 800d4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4b2:	0cdb      	lsrs	r3, r3, #19
 800d4b4:	04db      	lsls	r3, r3, #19
 800d4b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	015a      	lsls	r2, r3, #5
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	0151      	lsls	r1, r2, #5
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	440a      	add	r2, r1
 800d4ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d4d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d4da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	695a      	ldr	r2, [r3, #20]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d903      	bls.n	800d4f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	693a      	ldr	r2, [r7, #16]
 800d500:	0151      	lsls	r1, r2, #5
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	440a      	add	r2, r1
 800d506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d50a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d50e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	4413      	add	r3, r2
 800d518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d51c:	691a      	ldr	r2, [r3, #16]
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d526:	6939      	ldr	r1, [r7, #16]
 800d528:	0148      	lsls	r0, r1, #5
 800d52a:	6979      	ldr	r1, [r7, #20]
 800d52c:	4401      	add	r1, r0
 800d52e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d532:	4313      	orrs	r3, r2
 800d534:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d11e      	bne.n	800d57a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d009      	beq.n	800d558 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d550:	461a      	mov	r2, r3
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	0151      	lsls	r1, r2, #5
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	440a      	add	r2, r1
 800d56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d576:	6013      	str	r3, [r2, #0]
 800d578:	e092      	b.n	800d6a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	015a      	lsls	r2, r3, #5
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	4413      	add	r3, r2
 800d582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	0151      	lsls	r1, r2, #5
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	440a      	add	r2, r1
 800d590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d598:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	695b      	ldr	r3, [r3, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d07e      	beq.n	800d6a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	f003 030f 	and.w	r3, r3, #15
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b8:	6979      	ldr	r1, [r7, #20]
 800d5ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	634b      	str	r3, [r1, #52]	; 0x34
 800d5c2:	e06d      	b.n	800d6a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	0151      	lsls	r1, r2, #5
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	440a      	add	r2, r1
 800d5da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5de:	0cdb      	lsrs	r3, r3, #19
 800d5e0:	04db      	lsls	r3, r3, #19
 800d5e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	693a      	ldr	r2, [r7, #16]
 800d5f4:	0151      	lsls	r1, r2, #5
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	440a      	add	r2, r1
 800d5fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d602:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d606:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	689a      	ldr	r2, [r3, #8]
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	0151      	lsls	r1, r2, #5
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	440a      	add	r2, r1
 800d62e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d636:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	015a      	lsls	r2, r3, #5
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	4413      	add	r3, r2
 800d640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d644:	691a      	ldr	r2, [r3, #16]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d64e:	6939      	ldr	r1, [r7, #16]
 800d650:	0148      	lsls	r0, r1, #5
 800d652:	6979      	ldr	r1, [r7, #20]
 800d654:	4401      	add	r1, r0
 800d656:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d65a:	4313      	orrs	r3, r2
 800d65c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d10d      	bne.n	800d680 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d009      	beq.n	800d680 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	68d9      	ldr	r1, [r3, #12]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	015a      	lsls	r2, r3, #5
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	4413      	add	r3, r2
 800d678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d67c:	460a      	mov	r2, r1
 800d67e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	0151      	lsls	r1, r2, #5
 800d692:	697a      	ldr	r2, [r7, #20]
 800d694:	440a      	add	r2, r1
 800d696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d69a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d69e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	371c      	adds	r7, #28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b089      	sub	sp, #36	; 0x24
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	60f8      	str	r0, [r7, #12]
 800d6b6:	60b9      	str	r1, [r7, #8]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	460b      	mov	r3, r1
 800d6be:	71fb      	strb	r3, [r7, #7]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d6cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d123      	bne.n	800d71c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d6d4:	88bb      	ldrh	r3, [r7, #4]
 800d6d6:	3303      	adds	r3, #3
 800d6d8:	089b      	lsrs	r3, r3, #2
 800d6da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d6dc:	2300      	movs	r3, #0
 800d6de:	61bb      	str	r3, [r7, #24]
 800d6e0:	e018      	b.n	800d714 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	031a      	lsls	r2, r3, #12
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	3301      	adds	r3, #1
 800d700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	3301      	adds	r3, #1
 800d706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	3301      	adds	r3, #1
 800d70c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	3301      	adds	r3, #1
 800d712:	61bb      	str	r3, [r7, #24]
 800d714:	69ba      	ldr	r2, [r7, #24]
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d3e2      	bcc.n	800d6e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3724      	adds	r7, #36	; 0x24
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b08b      	sub	sp, #44	; 0x2c
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	4613      	mov	r3, r2
 800d736:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d740:	88fb      	ldrh	r3, [r7, #6]
 800d742:	089b      	lsrs	r3, r3, #2
 800d744:	b29b      	uxth	r3, r3
 800d746:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d748:	88fb      	ldrh	r3, [r7, #6]
 800d74a:	f003 0303 	and.w	r3, r3, #3
 800d74e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d750:	2300      	movs	r3, #0
 800d752:	623b      	str	r3, [r7, #32]
 800d754:	e014      	b.n	800d780 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	601a      	str	r2, [r3, #0]
    pDest++;
 800d762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d764:	3301      	adds	r3, #1
 800d766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	3301      	adds	r3, #1
 800d76c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	3301      	adds	r3, #1
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	3301      	adds	r3, #1
 800d778:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	3301      	adds	r3, #1
 800d77e:	623b      	str	r3, [r7, #32]
 800d780:	6a3a      	ldr	r2, [r7, #32]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	429a      	cmp	r2, r3
 800d786:	d3e6      	bcc.n	800d756 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d788:	8bfb      	ldrh	r3, [r7, #30]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01e      	beq.n	800d7cc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d78e:	2300      	movs	r3, #0
 800d790:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d798:	461a      	mov	r2, r3
 800d79a:	f107 0310 	add.w	r3, r7, #16
 800d79e:	6812      	ldr	r2, [r2, #0]
 800d7a0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	6a3b      	ldr	r3, [r7, #32]
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	701a      	strb	r2, [r3, #0]
      i++;
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	623b      	str	r3, [r7, #32]
      pDest++;
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	3301      	adds	r3, #1
 800d7be:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d7c0:	8bfb      	ldrh	r3, [r7, #30]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d7c6:	8bfb      	ldrh	r3, [r7, #30]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1ea      	bne.n	800d7a2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	372c      	adds	r7, #44	; 0x2c
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b085      	sub	sp, #20
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	785b      	ldrb	r3, [r3, #1]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d12c      	bne.n	800d850 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	db12      	blt.n	800d82e <USB_EPSetStall+0x54>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00f      	beq.n	800d82e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	015a      	lsls	r2, r3, #5
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	4413      	add	r3, r2
 800d816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	0151      	lsls	r1, r2, #5
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	440a      	add	r2, r1
 800d824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d828:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d82c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	0151      	lsls	r1, r2, #5
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	440a      	add	r2, r1
 800d844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	e02b      	b.n	800d8a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	015a      	lsls	r2, r3, #5
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	4413      	add	r3, r2
 800d858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	db12      	blt.n	800d888 <USB_EPSetStall+0xae>
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00f      	beq.n	800d888 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	015a      	lsls	r2, r3, #5
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	4413      	add	r3, r2
 800d870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	0151      	lsls	r1, r2, #5
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	440a      	add	r2, r1
 800d87e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d886:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	015a      	lsls	r2, r3, #5
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	4413      	add	r3, r2
 800d890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	0151      	lsls	r1, r2, #5
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	440a      	add	r2, r1
 800d89e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b085      	sub	sp, #20
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	785b      	ldrb	r3, [r3, #1]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d128      	bne.n	800d924 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	015a      	lsls	r2, r3, #5
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4413      	add	r3, r2
 800d8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	0151      	lsls	r1, r2, #5
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	440a      	add	r2, r1
 800d8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	78db      	ldrb	r3, [r3, #3]
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	d003      	beq.n	800d902 <USB_EPClearStall+0x4c>
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	78db      	ldrb	r3, [r3, #3]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d138      	bne.n	800d974 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	015a      	lsls	r2, r3, #5
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	4413      	add	r3, r2
 800d90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	0151      	lsls	r1, r2, #5
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	440a      	add	r2, r1
 800d918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d91c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	e027      	b.n	800d974 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	015a      	lsls	r2, r3, #5
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	0151      	lsls	r1, r2, #5
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	440a      	add	r2, r1
 800d93a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d93e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d942:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	78db      	ldrb	r3, [r3, #3]
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d003      	beq.n	800d954 <USB_EPClearStall+0x9e>
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	78db      	ldrb	r3, [r3, #3]
 800d950:	2b02      	cmp	r3, #2
 800d952:	d10f      	bne.n	800d974 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	0151      	lsls	r1, r2, #5
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	440a      	add	r2, r1
 800d96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d972:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d982:	b480      	push	{r7}
 800d984:	b085      	sub	sp, #20
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	460b      	mov	r3, r1
 800d98c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d9a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	78fb      	ldrb	r3, [r7, #3]
 800d9b0:	011b      	lsls	r3, r3, #4
 800d9b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr

0800d9ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9e8:	f023 0303 	bic.w	r3, r3, #3
 800d9ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9fc:	f023 0302 	bic.w	r3, r3, #2
 800da00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800da2a:	f023 0303 	bic.w	r3, r3, #3
 800da2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da3e:	f043 0302 	orr.w	r3, r3, #2
 800da42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	4013      	ands	r3, r2
 800da68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800da6a:	68fb      	ldr	r3, [r7, #12]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da94:	69db      	ldr	r3, [r3, #28]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	4013      	ands	r3, r2
 800da9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	0c1b      	lsrs	r3, r3, #16
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	4013      	ands	r3, r2
 800dace:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	b29b      	uxth	r3, r3
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800daf0:	78fb      	ldrb	r3, [r7, #3]
 800daf2:	015a      	lsls	r2, r3, #5
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db06:	695b      	ldr	r3, [r3, #20]
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	4013      	ands	r3, r2
 800db0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800db0e:	68bb      	ldr	r3, [r7, #8]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b087      	sub	sp, #28
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	460b      	mov	r3, r1
 800db26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800db40:	78fb      	ldrb	r3, [r7, #3]
 800db42:	f003 030f 	and.w	r3, r3, #15
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	fa22 f303 	lsr.w	r3, r2, r3
 800db4c:	01db      	lsls	r3, r3, #7
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	693a      	ldr	r2, [r7, #16]
 800db52:	4313      	orrs	r3, r2
 800db54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800db56:	78fb      	ldrb	r3, [r7, #3]
 800db58:	015a      	lsls	r2, r3, #5
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	4413      	add	r3, r2
 800db5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	4013      	ands	r3, r2
 800db68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800db6a:	68bb      	ldr	r3, [r7, #8]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	371c      	adds	r7, #28
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	f003 0301 	and.w	r3, r3, #1
}
 800db88:	4618      	mov	r0, r3
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dbb2:	f023 0307 	bic.w	r3, r3, #7
 800dbb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3714      	adds	r7, #20
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
	...

0800dbdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	607a      	str	r2, [r7, #4]
 800dbe8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	333c      	adds	r3, #60	; 0x3c
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	4a26      	ldr	r2, [pc, #152]	; (800dc94 <USB_EP0_OutStart+0xb8>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d90a      	bls.n	800dc16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc10:	d101      	bne.n	800dc16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	e037      	b.n	800dc86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	2300      	movs	r3, #0
 800dc20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	697a      	ldr	r2, [r7, #20]
 800dc2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc44:	f043 0318 	orr.w	r3, r3, #24
 800dc48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dc5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dc5e:	7afb      	ldrb	r3, [r7, #11]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d10f      	bne.n	800dc84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dc82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	4f54300a 	.word	0x4f54300a

0800dc98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dca0:	2300      	movs	r3, #0
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	3301      	adds	r3, #1
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	4a13      	ldr	r2, [pc, #76]	; (800dcf8 <USB_CoreReset+0x60>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d901      	bls.n	800dcb4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e01a      	b.n	800dcea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	daf3      	bge.n	800dca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	f043 0201 	orr.w	r2, r3, #1
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	60fb      	str	r3, [r7, #12]
 800dcd2:	4a09      	ldr	r2, [pc, #36]	; (800dcf8 <USB_CoreReset+0x60>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d901      	bls.n	800dcdc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	e006      	b.n	800dcea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d0f1      	beq.n	800dccc <USB_CoreReset+0x34>

  return HAL_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	00030d40 	.word	0x00030d40

0800dcfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dd08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dd0c:	f002 fa66 	bl	80101dc <USBD_static_malloc>
 800dd10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d105      	bne.n	800dd24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dd20:	2302      	movs	r3, #2
 800dd22:	e066      	b.n	800ddf2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	7c1b      	ldrb	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d119      	bne.n	800dd68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dd34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd38:	2202      	movs	r2, #2
 800dd3a:	2181      	movs	r1, #129	; 0x81
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f002 f8dc 	bl	800fefa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dd48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd4c:	2202      	movs	r2, #2
 800dd4e:	2101      	movs	r1, #1
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f002 f8d2 	bl	800fefa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2210      	movs	r2, #16
 800dd62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dd66:	e016      	b.n	800dd96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dd68:	2340      	movs	r3, #64	; 0x40
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	2181      	movs	r1, #129	; 0x81
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f002 f8c3 	bl	800fefa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dd7a:	2340      	movs	r3, #64	; 0x40
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	2101      	movs	r1, #1
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f002 f8ba 	bl	800fefa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2210      	movs	r2, #16
 800dd92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dd96:	2308      	movs	r3, #8
 800dd98:	2203      	movs	r2, #3
 800dd9a:	2182      	movs	r1, #130	; 0x82
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f002 f8ac 	bl	800fefa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	7c1b      	ldrb	r3, [r3, #16]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d109      	bne.n	800dde0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ddd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f002 f97d 	bl	80100d8 <USBD_LL_PrepareReceive>
 800ddde:	e007      	b.n	800ddf0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dde6:	2340      	movs	r3, #64	; 0x40
 800dde8:	2101      	movs	r1, #1
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f002 f974 	bl	80100d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800de06:	2181      	movs	r1, #129	; 0x81
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f002 f89c 	bl	800ff46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800de14:	2101      	movs	r1, #1
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f002 f895 	bl	800ff46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800de24:	2182      	movs	r1, #130	; 0x82
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f002 f88d 	bl	800ff46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00e      	beq.n	800de64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de56:	4618      	mov	r0, r3
 800de58:	f002 f9ce 	bl	80101f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
	...

0800de70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800de82:	2300      	movs	r3, #0
 800de84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800de86:	2300      	movs	r3, #0
 800de88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800de94:	2303      	movs	r3, #3
 800de96:	e0af      	b.n	800dff8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d03f      	beq.n	800df24 <USBD_CDC_Setup+0xb4>
 800dea4:	2b20      	cmp	r3, #32
 800dea6:	f040 809f 	bne.w	800dfe8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	88db      	ldrh	r3, [r3, #6]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d02e      	beq.n	800df10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	b25b      	sxtb	r3, r3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	da16      	bge.n	800deea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	683a      	ldr	r2, [r7, #0]
 800dec6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800dec8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	88d2      	ldrh	r2, [r2, #6]
 800dece:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	88db      	ldrh	r3, [r3, #6]
 800ded4:	2b07      	cmp	r3, #7
 800ded6:	bf28      	it	cs
 800ded8:	2307      	movcs	r3, #7
 800deda:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	89fa      	ldrh	r2, [r7, #14]
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f001 fb43 	bl	800f56e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dee8:	e085      	b.n	800dff6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	785a      	ldrb	r2, [r3, #1]
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	88db      	ldrh	r3, [r3, #6]
 800def8:	b2da      	uxtb	r2, r3
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800df00:	6939      	ldr	r1, [r7, #16]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	88db      	ldrh	r3, [r3, #6]
 800df06:	461a      	mov	r2, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f001 fb5c 	bl	800f5c6 <USBD_CtlPrepareRx>
      break;
 800df0e:	e072      	b.n	800dff6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	7850      	ldrb	r0, [r2, #1]
 800df1c:	2200      	movs	r2, #0
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	4798      	blx	r3
      break;
 800df22:	e068      	b.n	800dff6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	2b0b      	cmp	r3, #11
 800df2a:	d852      	bhi.n	800dfd2 <USBD_CDC_Setup+0x162>
 800df2c:	a201      	add	r2, pc, #4	; (adr r2, 800df34 <USBD_CDC_Setup+0xc4>)
 800df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df32:	bf00      	nop
 800df34:	0800df65 	.word	0x0800df65
 800df38:	0800dfe1 	.word	0x0800dfe1
 800df3c:	0800dfd3 	.word	0x0800dfd3
 800df40:	0800dfd3 	.word	0x0800dfd3
 800df44:	0800dfd3 	.word	0x0800dfd3
 800df48:	0800dfd3 	.word	0x0800dfd3
 800df4c:	0800dfd3 	.word	0x0800dfd3
 800df50:	0800dfd3 	.word	0x0800dfd3
 800df54:	0800dfd3 	.word	0x0800dfd3
 800df58:	0800dfd3 	.word	0x0800dfd3
 800df5c:	0800df8f 	.word	0x0800df8f
 800df60:	0800dfb9 	.word	0x0800dfb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	2b03      	cmp	r3, #3
 800df6e:	d107      	bne.n	800df80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800df70:	f107 030a 	add.w	r3, r7, #10
 800df74:	2202      	movs	r2, #2
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f001 faf8 	bl	800f56e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df7e:	e032      	b.n	800dfe6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f001 fa82 	bl	800f48c <USBD_CtlError>
            ret = USBD_FAIL;
 800df88:	2303      	movs	r3, #3
 800df8a:	75fb      	strb	r3, [r7, #23]
          break;
 800df8c:	e02b      	b.n	800dfe6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b03      	cmp	r3, #3
 800df98:	d107      	bne.n	800dfaa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800df9a:	f107 030d 	add.w	r3, r7, #13
 800df9e:	2201      	movs	r2, #1
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f001 fae3 	bl	800f56e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfa8:	e01d      	b.n	800dfe6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f001 fa6d 	bl	800f48c <USBD_CtlError>
            ret = USBD_FAIL;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	75fb      	strb	r3, [r7, #23]
          break;
 800dfb6:	e016      	b.n	800dfe6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b03      	cmp	r3, #3
 800dfc2:	d00f      	beq.n	800dfe4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f001 fa60 	bl	800f48c <USBD_CtlError>
            ret = USBD_FAIL;
 800dfcc:	2303      	movs	r3, #3
 800dfce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dfd0:	e008      	b.n	800dfe4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dfd2:	6839      	ldr	r1, [r7, #0]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f001 fa59 	bl	800f48c <USBD_CtlError>
          ret = USBD_FAIL;
 800dfda:	2303      	movs	r3, #3
 800dfdc:	75fb      	strb	r3, [r7, #23]
          break;
 800dfde:	e002      	b.n	800dfe6 <USBD_CDC_Setup+0x176>
          break;
 800dfe0:	bf00      	nop
 800dfe2:	e008      	b.n	800dff6 <USBD_CDC_Setup+0x186>
          break;
 800dfe4:	bf00      	nop
      }
      break;
 800dfe6:	e006      	b.n	800dff6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dfe8:	6839      	ldr	r1, [r7, #0]
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f001 fa4e 	bl	800f48c <USBD_CtlError>
      ret = USBD_FAIL;
 800dff0:	2303      	movs	r3, #3
 800dff2:	75fb      	strb	r3, [r7, #23]
      break;
 800dff4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d101      	bne.n	800e022 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e01e:	2303      	movs	r3, #3
 800e020:	e04f      	b.n	800e0c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e028:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e02a:	78fa      	ldrb	r2, [r7, #3]
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	4613      	mov	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4413      	add	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	440b      	add	r3, r1
 800e038:	3318      	adds	r3, #24
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d029      	beq.n	800e094 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e040:	78fa      	ldrb	r2, [r7, #3]
 800e042:	6879      	ldr	r1, [r7, #4]
 800e044:	4613      	mov	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	440b      	add	r3, r1
 800e04e:	3318      	adds	r3, #24
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	78f9      	ldrb	r1, [r7, #3]
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	460b      	mov	r3, r1
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	1a5b      	subs	r3, r3, r1
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4403      	add	r3, r0
 800e060:	3344      	adds	r3, #68	; 0x44
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	fbb2 f1f3 	udiv	r1, r2, r3
 800e068:	fb03 f301 	mul.w	r3, r3, r1
 800e06c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d110      	bne.n	800e094 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e072:	78fa      	ldrb	r2, [r7, #3]
 800e074:	6879      	ldr	r1, [r7, #4]
 800e076:	4613      	mov	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	440b      	add	r3, r1
 800e080:	3318      	adds	r3, #24
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e086:	78f9      	ldrb	r1, [r7, #3]
 800e088:	2300      	movs	r3, #0
 800e08a:	2200      	movs	r2, #0
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f002 f802 	bl	8010096 <USBD_LL_Transmit>
 800e092:	e015      	b.n	800e0c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2200      	movs	r2, #0
 800e098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00b      	beq.n	800e0c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	68ba      	ldr	r2, [r7, #8]
 800e0b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e0bc:	78fa      	ldrb	r2, [r7, #3]
 800e0be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b084      	sub	sp, #16
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	e015      	b.n	800e118 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e0ec:	78fb      	ldrb	r3, [r7, #3]
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f002 f812 	bl	801011a <USBD_LL_GetRxDataSize>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e112:	4611      	mov	r1, r2
 800e114:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e12e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e136:	2303      	movs	r3, #3
 800e138:	e01b      	b.n	800e172 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d015      	beq.n	800e170 <USBD_CDC_EP0_RxReady+0x50>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e14a:	2bff      	cmp	r3, #255	; 0xff
 800e14c:	d010      	beq.n	800e170 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e15c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e164:	b292      	uxth	r2, r2
 800e166:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	22ff      	movs	r2, #255	; 0xff
 800e16c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
	...

0800e17c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2243      	movs	r2, #67	; 0x43
 800e188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e18a:	4b03      	ldr	r3, [pc, #12]	; (800e198 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	20000094 	.word	0x20000094

0800e19c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2243      	movs	r2, #67	; 0x43
 800e1a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e1aa:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	20000050 	.word	0x20000050

0800e1bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2243      	movs	r2, #67	; 0x43
 800e1c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e1ca:	4b03      	ldr	r3, [pc, #12]	; (800e1d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	200000d8 	.word	0x200000d8

0800e1dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	220a      	movs	r2, #10
 800e1e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e1ea:	4b03      	ldr	r3, [pc, #12]	; (800e1f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	2000000c 	.word	0x2000000c

0800e1fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e20c:	2303      	movs	r3, #3
 800e20e:	e004      	b.n	800e21a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e226:	b480      	push	{r7}
 800e228:	b087      	sub	sp, #28
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	60f8      	str	r0, [r7, #12]
 800e22e:	60b9      	str	r1, [r7, #8]
 800e230:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e238:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d101      	bne.n	800e244 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e240:	2303      	movs	r3, #3
 800e242:	e008      	b.n	800e256 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	371c      	adds	r7, #28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e262:	b480      	push	{r7}
 800e264:	b085      	sub	sp, #20
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e272:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d101      	bne.n	800e27e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e27a:	2303      	movs	r3, #3
 800e27c:	e004      	b.n	800e288 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	683a      	ldr	r2, [r7, #0]
 800e282:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	e01a      	b.n	800e2ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d114      	bne.n	800e2ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e2de:	2181      	movs	r1, #129	; 0x81
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 fed8 	bl	8010096 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e30e:	2303      	movs	r3, #3
 800e310:	e016      	b.n	800e340 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	7c1b      	ldrb	r3, [r3, #16]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d109      	bne.n	800e32e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e324:	2101      	movs	r1, #1
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f001 fed6 	bl	80100d8 <USBD_LL_PrepareReceive>
 800e32c:	e007      	b.n	800e33e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e334:	2340      	movs	r3, #64	; 0x40
 800e336:	2101      	movs	r1, #1
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f001 fecd 	bl	80100d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	4613      	mov	r3, r2
 800e354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d101      	bne.n	800e360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e01f      	b.n	800e3a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2200      	movs	r2, #0
 800e364:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2200      	movs	r2, #0
 800e36c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2200      	movs	r2, #0
 800e374:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d003      	beq.n	800e386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	79fa      	ldrb	r2, [r7, #7]
 800e392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f001 fd49 	bl	800fe2c <USBD_LL_Init>
 800e39a:	4603      	mov	r3, r0
 800e39c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d101      	bne.n	800e3c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e3bc:	2303      	movs	r3, #3
 800e3be:	e016      	b.n	800e3ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00b      	beq.n	800e3ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3dc:	f107 020e 	add.w	r2, r7, #14
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4798      	blx	r3
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f001 fd60 	bl	800fec4 <USBD_LL_Start>
 800e404:	4603      	mov	r3, r0
}
 800e406:	4618      	mov	r0, r3
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e40e:	b480      	push	{r7}
 800e410:	b083      	sub	sp, #12
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e430:	2303      	movs	r3, #3
 800e432:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d009      	beq.n	800e452 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	78fa      	ldrb	r2, [r7, #3]
 800e448:	4611      	mov	r1, r2
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	4798      	blx	r3
 800e44e:	4603      	mov	r3, r0
 800e450:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e452:	7bfb      	ldrb	r3, [r7, #15]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	460b      	mov	r3, r1
 800e466:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	78fa      	ldrb	r2, [r7, #3]
 800e47c:	4611      	mov	r1, r2
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	4798      	blx	r3
  }

  return USBD_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e49c:	6839      	ldr	r1, [r7, #0]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 ffba 	bl	800f418 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e4c0:	f003 031f 	and.w	r3, r3, #31
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d01a      	beq.n	800e4fe <USBD_LL_SetupStage+0x72>
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d822      	bhi.n	800e512 <USBD_LL_SetupStage+0x86>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <USBD_LL_SetupStage+0x4a>
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d00a      	beq.n	800e4ea <USBD_LL_SetupStage+0x5e>
 800e4d4:	e01d      	b.n	800e512 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fa62 	bl	800e9a8 <USBD_StdDevReq>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e4e8:	e020      	b.n	800e52c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fac6 	bl	800ea84 <USBD_StdItfReq>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800e4fc:	e016      	b.n	800e52c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e504:	4619      	mov	r1, r3
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fb05 	bl	800eb16 <USBD_StdEPReq>
 800e50c:	4603      	mov	r3, r0
 800e50e:	73fb      	strb	r3, [r7, #15]
      break;
 800e510:	e00c      	b.n	800e52c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f001 fd2f 	bl	800ff84 <USBD_LL_StallEP>
 800e526:	4603      	mov	r3, r0
 800e528:	73fb      	strb	r3, [r7, #15]
      break;
 800e52a:	bf00      	nop
  }

  return ret;
 800e52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b086      	sub	sp, #24
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	60f8      	str	r0, [r7, #12]
 800e53e:	460b      	mov	r3, r1
 800e540:	607a      	str	r2, [r7, #4]
 800e542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e544:	7afb      	ldrb	r3, [r7, #11]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d138      	bne.n	800e5bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e550:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e558:	2b03      	cmp	r3, #3
 800e55a:	d14a      	bne.n	800e5f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	689a      	ldr	r2, [r3, #8]
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	429a      	cmp	r2, r3
 800e566:	d913      	bls.n	800e590 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	689a      	ldr	r2, [r3, #8]
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	1ad2      	subs	r2, r2, r3
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	4293      	cmp	r3, r2
 800e580:	bf28      	it	cs
 800e582:	4613      	movcs	r3, r2
 800e584:	461a      	mov	r2, r3
 800e586:	6879      	ldr	r1, [r7, #4]
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f001 f839 	bl	800f600 <USBD_CtlContinueRx>
 800e58e:	e030      	b.n	800e5f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b03      	cmp	r3, #3
 800e59a:	d10b      	bne.n	800e5b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a2:	691b      	ldr	r3, [r3, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d005      	beq.n	800e5b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f001 f834 	bl	800f622 <USBD_CtlSendStatus>
 800e5ba:	e01a      	b.n	800e5f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b03      	cmp	r3, #3
 800e5c6:	d114      	bne.n	800e5f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00e      	beq.n	800e5f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5da:	699b      	ldr	r3, [r3, #24]
 800e5dc:	7afa      	ldrb	r2, [r7, #11]
 800e5de:	4611      	mov	r1, r2
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	4798      	blx	r3
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e5ee:	7dfb      	ldrb	r3, [r7, #23]
 800e5f0:	e000      	b.n	800e5f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3718      	adds	r7, #24
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	460b      	mov	r3, r1
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e60a:	7afb      	ldrb	r3, [r7, #11]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d16b      	bne.n	800e6e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	3314      	adds	r3, #20
 800e614:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d156      	bne.n	800e6ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	689a      	ldr	r2, [r3, #8]
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d914      	bls.n	800e656 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	689a      	ldr	r2, [r3, #8]
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	1ad2      	subs	r2, r2, r3
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	461a      	mov	r2, r3
 800e640:	6879      	ldr	r1, [r7, #4]
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f000 ffae 	bl	800f5a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e648:	2300      	movs	r3, #0
 800e64a:	2200      	movs	r2, #0
 800e64c:	2100      	movs	r1, #0
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f001 fd42 	bl	80100d8 <USBD_LL_PrepareReceive>
 800e654:	e03b      	b.n	800e6ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	68da      	ldr	r2, [r3, #12]
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d11c      	bne.n	800e69c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	685a      	ldr	r2, [r3, #4]
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d316      	bcc.n	800e69c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e678:	429a      	cmp	r2, r3
 800e67a:	d20f      	bcs.n	800e69c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e67c:	2200      	movs	r2, #0
 800e67e:	2100      	movs	r1, #0
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f000 ff8f 	bl	800f5a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e68e:	2300      	movs	r3, #0
 800e690:	2200      	movs	r2, #0
 800e692:	2100      	movs	r1, #0
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f001 fd1f 	bl	80100d8 <USBD_LL_PrepareReceive>
 800e69a:	e018      	b.n	800e6ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d10b      	bne.n	800e6c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d005      	beq.n	800e6c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6c0:	2180      	movs	r1, #128	; 0x80
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f001 fc5e 	bl	800ff84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f000 ffbd 	bl	800f648 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d122      	bne.n	800e71e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f7ff fe98 	bl	800e40e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e6e6:	e01a      	b.n	800e71e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b03      	cmp	r3, #3
 800e6f2:	d114      	bne.n	800e71e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00e      	beq.n	800e71e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	7afa      	ldrb	r2, [r7, #11]
 800e70a:	4611      	mov	r1, r2
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	4798      	blx	r3
 800e710:	4603      	mov	r3, r0
 800e712:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
 800e71c:	e000      	b.n	800e720 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e754:	2b00      	cmp	r3, #0
 800e756:	d101      	bne.n	800e75c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e758:	2303      	movs	r3, #3
 800e75a:	e02f      	b.n	800e7bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00f      	beq.n	800e786 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	6852      	ldr	r2, [r2, #4]
 800e77e:	b2d2      	uxtb	r2, r2
 800e780:	4611      	mov	r1, r2
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e786:	2340      	movs	r3, #64	; 0x40
 800e788:	2200      	movs	r2, #0
 800e78a:	2100      	movs	r1, #0
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f001 fbb4 	bl	800fefa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2201      	movs	r2, #1
 800e796:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2240      	movs	r2, #64	; 0x40
 800e79e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7a2:	2340      	movs	r3, #64	; 0x40
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	2180      	movs	r1, #128	; 0x80
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f001 fba6 	bl	800fefa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2240      	movs	r2, #64	; 0x40
 800e7b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	78fa      	ldrb	r2, [r7, #3]
 800e7d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2204      	movs	r2, #4
 800e7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	2b04      	cmp	r3, #4
 800e822:	d106      	bne.n	800e832 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d101      	bne.n	800e856 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e852:	2303      	movs	r3, #3
 800e854:	e012      	b.n	800e87c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d10b      	bne.n	800e87a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d005      	beq.n	800e87a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e89a:	2303      	movs	r3, #3
 800e89c:	e014      	b.n	800e8c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d10d      	bne.n	800e8c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b0:	6a1b      	ldr	r3, [r3, #32]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d007      	beq.n	800e8c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	78fa      	ldrb	r2, [r7, #3]
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	e014      	b.n	800e914 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d10d      	bne.n	800e912 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d007      	beq.n	800e912 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90a:	78fa      	ldrb	r2, [r7, #3]
 800e90c:	4611      	mov	r1, r2
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b082      	sub	sp, #8
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2201      	movs	r2, #1
 800e93e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d009      	beq.n	800e960 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	6852      	ldr	r2, [r2, #4]
 800e958:	b2d2      	uxtb	r2, r2
 800e95a:	4611      	mov	r1, r2
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	4798      	blx	r3
  }

  return USBD_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e96a:	b480      	push	{r7}
 800e96c:	b087      	sub	sp, #28
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	3301      	adds	r3, #1
 800e980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e988:	8a3b      	ldrh	r3, [r7, #16]
 800e98a:	021b      	lsls	r3, r3, #8
 800e98c:	b21a      	sxth	r2, r3
 800e98e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e992:	4313      	orrs	r3, r2
 800e994:	b21b      	sxth	r3, r3
 800e996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e998:	89fb      	ldrh	r3, [r7, #14]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	371c      	adds	r7, #28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9be:	2b40      	cmp	r3, #64	; 0x40
 800e9c0:	d005      	beq.n	800e9ce <USBD_StdDevReq+0x26>
 800e9c2:	2b40      	cmp	r3, #64	; 0x40
 800e9c4:	d853      	bhi.n	800ea6e <USBD_StdDevReq+0xc6>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00b      	beq.n	800e9e2 <USBD_StdDevReq+0x3a>
 800e9ca:	2b20      	cmp	r3, #32
 800e9cc:	d14f      	bne.n	800ea6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	4798      	blx	r3
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e0:	e04a      	b.n	800ea78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	785b      	ldrb	r3, [r3, #1]
 800e9e6:	2b09      	cmp	r3, #9
 800e9e8:	d83b      	bhi.n	800ea62 <USBD_StdDevReq+0xba>
 800e9ea:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <USBD_StdDevReq+0x48>)
 800e9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f0:	0800ea45 	.word	0x0800ea45
 800e9f4:	0800ea59 	.word	0x0800ea59
 800e9f8:	0800ea63 	.word	0x0800ea63
 800e9fc:	0800ea4f 	.word	0x0800ea4f
 800ea00:	0800ea63 	.word	0x0800ea63
 800ea04:	0800ea23 	.word	0x0800ea23
 800ea08:	0800ea19 	.word	0x0800ea19
 800ea0c:	0800ea63 	.word	0x0800ea63
 800ea10:	0800ea3b 	.word	0x0800ea3b
 800ea14:	0800ea2d 	.word	0x0800ea2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f9de 	bl	800eddc <USBD_GetDescriptor>
          break;
 800ea20:	e024      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fb6d 	bl	800f104 <USBD_SetAddress>
          break;
 800ea2a:	e01f      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fbac 	bl	800f18c <USBD_SetConfig>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
          break;
 800ea38:	e018      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fc4b 	bl	800f2d8 <USBD_GetConfig>
          break;
 800ea42:	e013      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 fc7c 	bl	800f344 <USBD_GetStatus>
          break;
 800ea4c:	e00e      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fcab 	bl	800f3ac <USBD_SetFeature>
          break;
 800ea56:	e009      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fcba 	bl	800f3d4 <USBD_ClrFeature>
          break;
 800ea60:	e004      	b.n	800ea6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 fd11 	bl	800f48c <USBD_CtlError>
          break;
 800ea6a:	bf00      	nop
      }
      break;
 800ea6c:	e004      	b.n	800ea78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 fd0b 	bl	800f48c <USBD_CtlError>
      break;
 800ea76:	bf00      	nop
  }

  return ret;
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop

0800ea84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea9a:	2b40      	cmp	r3, #64	; 0x40
 800ea9c:	d005      	beq.n	800eaaa <USBD_StdItfReq+0x26>
 800ea9e:	2b40      	cmp	r3, #64	; 0x40
 800eaa0:	d82f      	bhi.n	800eb02 <USBD_StdItfReq+0x7e>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d001      	beq.n	800eaaa <USBD_StdItfReq+0x26>
 800eaa6:	2b20      	cmp	r3, #32
 800eaa8:	d12b      	bne.n	800eb02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	3b01      	subs	r3, #1
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d81d      	bhi.n	800eaf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	889b      	ldrh	r3, [r3, #4]
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d813      	bhi.n	800eaea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3
 800ead0:	4603      	mov	r3, r0
 800ead2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	88db      	ldrh	r3, [r3, #6]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d110      	bne.n	800eafe <USBD_StdItfReq+0x7a>
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10d      	bne.n	800eafe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 fd9d 	bl	800f622 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eae8:	e009      	b.n	800eafe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 fccd 	bl	800f48c <USBD_CtlError>
          break;
 800eaf2:	e004      	b.n	800eafe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800eaf4:	6839      	ldr	r1, [r7, #0]
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 fcc8 	bl	800f48c <USBD_CtlError>
          break;
 800eafc:	e000      	b.n	800eb00 <USBD_StdItfReq+0x7c>
          break;
 800eafe:	bf00      	nop
      }
      break;
 800eb00:	e004      	b.n	800eb0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fcc1 	bl	800f48c <USBD_CtlError>
      break;
 800eb0a:	bf00      	nop
  }

  return ret;
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb20:	2300      	movs	r3, #0
 800eb22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	889b      	ldrh	r3, [r3, #4]
 800eb28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb32:	2b40      	cmp	r3, #64	; 0x40
 800eb34:	d007      	beq.n	800eb46 <USBD_StdEPReq+0x30>
 800eb36:	2b40      	cmp	r3, #64	; 0x40
 800eb38:	f200 8145 	bhi.w	800edc6 <USBD_StdEPReq+0x2b0>
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00c      	beq.n	800eb5a <USBD_StdEPReq+0x44>
 800eb40:	2b20      	cmp	r3, #32
 800eb42:	f040 8140 	bne.w	800edc6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	6839      	ldr	r1, [r7, #0]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	4798      	blx	r3
 800eb54:	4603      	mov	r3, r0
 800eb56:	73fb      	strb	r3, [r7, #15]
      break;
 800eb58:	e13a      	b.n	800edd0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	785b      	ldrb	r3, [r3, #1]
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d007      	beq.n	800eb72 <USBD_StdEPReq+0x5c>
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	f300 8129 	bgt.w	800edba <USBD_StdEPReq+0x2a4>
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d07f      	beq.n	800ec6c <USBD_StdEPReq+0x156>
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d03c      	beq.n	800ebea <USBD_StdEPReq+0xd4>
 800eb70:	e123      	b.n	800edba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	d002      	beq.n	800eb84 <USBD_StdEPReq+0x6e>
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d016      	beq.n	800ebb0 <USBD_StdEPReq+0x9a>
 800eb82:	e02c      	b.n	800ebde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb84:	7bbb      	ldrb	r3, [r7, #14]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00d      	beq.n	800eba6 <USBD_StdEPReq+0x90>
 800eb8a:	7bbb      	ldrb	r3, [r7, #14]
 800eb8c:	2b80      	cmp	r3, #128	; 0x80
 800eb8e:	d00a      	beq.n	800eba6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 f9f5 	bl	800ff84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb9a:	2180      	movs	r1, #128	; 0x80
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f001 f9f1 	bl	800ff84 <USBD_LL_StallEP>
 800eba2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eba4:	e020      	b.n	800ebe8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fc6f 	bl	800f48c <USBD_CtlError>
              break;
 800ebae:	e01b      	b.n	800ebe8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	885b      	ldrh	r3, [r3, #2]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10e      	bne.n	800ebd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00b      	beq.n	800ebd6 <USBD_StdEPReq+0xc0>
 800ebbe:	7bbb      	ldrb	r3, [r7, #14]
 800ebc0:	2b80      	cmp	r3, #128	; 0x80
 800ebc2:	d008      	beq.n	800ebd6 <USBD_StdEPReq+0xc0>
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	88db      	ldrh	r3, [r3, #6]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d104      	bne.n	800ebd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f001 f9d7 	bl	800ff84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 fd23 	bl	800f622 <USBD_CtlSendStatus>

              break;
 800ebdc:	e004      	b.n	800ebe8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ebde:	6839      	ldr	r1, [r7, #0]
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 fc53 	bl	800f48c <USBD_CtlError>
              break;
 800ebe6:	bf00      	nop
          }
          break;
 800ebe8:	e0ec      	b.n	800edc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d002      	beq.n	800ebfc <USBD_StdEPReq+0xe6>
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d016      	beq.n	800ec28 <USBD_StdEPReq+0x112>
 800ebfa:	e030      	b.n	800ec5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebfc:	7bbb      	ldrb	r3, [r7, #14]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00d      	beq.n	800ec1e <USBD_StdEPReq+0x108>
 800ec02:	7bbb      	ldrb	r3, [r7, #14]
 800ec04:	2b80      	cmp	r3, #128	; 0x80
 800ec06:	d00a      	beq.n	800ec1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f001 f9b9 	bl	800ff84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec12:	2180      	movs	r1, #128	; 0x80
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f001 f9b5 	bl	800ff84 <USBD_LL_StallEP>
 800ec1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec1c:	e025      	b.n	800ec6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ec1e:	6839      	ldr	r1, [r7, #0]
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 fc33 	bl	800f48c <USBD_CtlError>
              break;
 800ec26:	e020      	b.n	800ec6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	885b      	ldrh	r3, [r3, #2]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d11b      	bne.n	800ec68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ec30:	7bbb      	ldrb	r3, [r7, #14]
 800ec32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d004      	beq.n	800ec44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec3a:	7bbb      	ldrb	r3, [r7, #14]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f001 f9bf 	bl	800ffc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 fcec 	bl	800f622 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	6839      	ldr	r1, [r7, #0]
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	4798      	blx	r3
 800ec58:	4603      	mov	r3, r0
 800ec5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ec5c:	e004      	b.n	800ec68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 fc13 	bl	800f48c <USBD_CtlError>
              break;
 800ec66:	e000      	b.n	800ec6a <USBD_StdEPReq+0x154>
              break;
 800ec68:	bf00      	nop
          }
          break;
 800ec6a:	e0ab      	b.n	800edc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d002      	beq.n	800ec7e <USBD_StdEPReq+0x168>
 800ec78:	2b03      	cmp	r3, #3
 800ec7a:	d032      	beq.n	800ece2 <USBD_StdEPReq+0x1cc>
 800ec7c:	e097      	b.n	800edae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec7e:	7bbb      	ldrb	r3, [r7, #14]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d007      	beq.n	800ec94 <USBD_StdEPReq+0x17e>
 800ec84:	7bbb      	ldrb	r3, [r7, #14]
 800ec86:	2b80      	cmp	r3, #128	; 0x80
 800ec88:	d004      	beq.n	800ec94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ec8a:	6839      	ldr	r1, [r7, #0]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fbfd 	bl	800f48c <USBD_CtlError>
                break;
 800ec92:	e091      	b.n	800edb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	da0b      	bge.n	800ecb4 <USBD_StdEPReq+0x19e>
 800ec9c:	7bbb      	ldrb	r3, [r7, #14]
 800ec9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eca2:	4613      	mov	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4413      	add	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	3310      	adds	r3, #16
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	4413      	add	r3, r2
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	e00b      	b.n	800eccc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ecb4:	7bbb      	ldrb	r3, [r7, #14]
 800ecb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecba:	4613      	mov	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	4413      	add	r3, r2
 800ecca:	3304      	adds	r3, #4
 800eccc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 fc47 	bl	800f56e <USBD_CtlSendData>
              break;
 800ece0:	e06a      	b.n	800edb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ece2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	da11      	bge.n	800ed0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecea:	7bbb      	ldrb	r3, [r7, #14]
 800ecec:	f003 020f 	and.w	r2, r3, #15
 800ecf0:	6879      	ldr	r1, [r7, #4]
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	440b      	add	r3, r1
 800ecfc:	3324      	adds	r3, #36	; 0x24
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d117      	bne.n	800ed34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 fbc0 	bl	800f48c <USBD_CtlError>
                  break;
 800ed0c:	e054      	b.n	800edb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed0e:	7bbb      	ldrb	r3, [r7, #14]
 800ed10:	f003 020f 	and.w	r2, r3, #15
 800ed14:	6879      	ldr	r1, [r7, #4]
 800ed16:	4613      	mov	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	440b      	add	r3, r1
 800ed20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d104      	bne.n	800ed34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 fbad 	bl	800f48c <USBD_CtlError>
                  break;
 800ed32:	e041      	b.n	800edb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	da0b      	bge.n	800ed54 <USBD_StdEPReq+0x23e>
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed42:	4613      	mov	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	3310      	adds	r3, #16
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	4413      	add	r3, r2
 800ed50:	3304      	adds	r3, #4
 800ed52:	e00b      	b.n	800ed6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed54:	7bbb      	ldrb	r3, [r7, #14]
 800ed56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4413      	add	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	4413      	add	r3, r2
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed6e:	7bbb      	ldrb	r3, [r7, #14]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <USBD_StdEPReq+0x264>
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
 800ed76:	2b80      	cmp	r3, #128	; 0x80
 800ed78:	d103      	bne.n	800ed82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	e00e      	b.n	800eda0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed82:	7bbb      	ldrb	r3, [r7, #14]
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f001 f93a 	bl	8010000 <USBD_LL_IsStallEP>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d003      	beq.n	800ed9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2201      	movs	r2, #1
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	e002      	b.n	800eda0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	2202      	movs	r2, #2
 800eda4:	4619      	mov	r1, r3
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fbe1 	bl	800f56e <USBD_CtlSendData>
              break;
 800edac:	e004      	b.n	800edb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 fb6b 	bl	800f48c <USBD_CtlError>
              break;
 800edb6:	bf00      	nop
          }
          break;
 800edb8:	e004      	b.n	800edc4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fb65 	bl	800f48c <USBD_CtlError>
          break;
 800edc2:	bf00      	nop
      }
      break;
 800edc4:	e004      	b.n	800edd0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800edc6:	6839      	ldr	r1, [r7, #0]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fb5f 	bl	800f48c <USBD_CtlError>
      break;
 800edce:	bf00      	nop
  }

  return ret;
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
	...

0800eddc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ede6:	2300      	movs	r3, #0
 800ede8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800edee:	2300      	movs	r3, #0
 800edf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	885b      	ldrh	r3, [r3, #2]
 800edf6:	0a1b      	lsrs	r3, r3, #8
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	3b01      	subs	r3, #1
 800edfc:	2b0e      	cmp	r3, #14
 800edfe:	f200 8152 	bhi.w	800f0a6 <USBD_GetDescriptor+0x2ca>
 800ee02:	a201      	add	r2, pc, #4	; (adr r2, 800ee08 <USBD_GetDescriptor+0x2c>)
 800ee04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee08:	0800ee79 	.word	0x0800ee79
 800ee0c:	0800ee91 	.word	0x0800ee91
 800ee10:	0800eed1 	.word	0x0800eed1
 800ee14:	0800f0a7 	.word	0x0800f0a7
 800ee18:	0800f0a7 	.word	0x0800f0a7
 800ee1c:	0800f047 	.word	0x0800f047
 800ee20:	0800f073 	.word	0x0800f073
 800ee24:	0800f0a7 	.word	0x0800f0a7
 800ee28:	0800f0a7 	.word	0x0800f0a7
 800ee2c:	0800f0a7 	.word	0x0800f0a7
 800ee30:	0800f0a7 	.word	0x0800f0a7
 800ee34:	0800f0a7 	.word	0x0800f0a7
 800ee38:	0800f0a7 	.word	0x0800f0a7
 800ee3c:	0800f0a7 	.word	0x0800f0a7
 800ee40:	0800ee45 	.word	0x0800ee45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee4a:	69db      	ldr	r3, [r3, #28]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00b      	beq.n	800ee68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee56:	69db      	ldr	r3, [r3, #28]
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	7c12      	ldrb	r2, [r2, #16]
 800ee5c:	f107 0108 	add.w	r1, r7, #8
 800ee60:	4610      	mov	r0, r2
 800ee62:	4798      	blx	r3
 800ee64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee66:	e126      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fb0e 	bl	800f48c <USBD_CtlError>
        err++;
 800ee70:	7afb      	ldrb	r3, [r7, #11]
 800ee72:	3301      	adds	r3, #1
 800ee74:	72fb      	strb	r3, [r7, #11]
      break;
 800ee76:	e11e      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	7c12      	ldrb	r2, [r2, #16]
 800ee84:	f107 0108 	add.w	r1, r7, #8
 800ee88:	4610      	mov	r0, r2
 800ee8a:	4798      	blx	r3
 800ee8c:	60f8      	str	r0, [r7, #12]
      break;
 800ee8e:	e112      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	7c1b      	ldrb	r3, [r3, #16]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10d      	bne.n	800eeb4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea0:	f107 0208 	add.w	r2, r7, #8
 800eea4:	4610      	mov	r0, r2
 800eea6:	4798      	blx	r3
 800eea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3301      	adds	r3, #1
 800eeae:	2202      	movs	r2, #2
 800eeb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eeb2:	e100      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebc:	f107 0208 	add.w	r2, r7, #8
 800eec0:	4610      	mov	r0, r2
 800eec2:	4798      	blx	r3
 800eec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	3301      	adds	r3, #1
 800eeca:	2202      	movs	r2, #2
 800eecc:	701a      	strb	r2, [r3, #0]
      break;
 800eece:	e0f2      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	885b      	ldrh	r3, [r3, #2]
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b05      	cmp	r3, #5
 800eed8:	f200 80ac 	bhi.w	800f034 <USBD_GetDescriptor+0x258>
 800eedc:	a201      	add	r2, pc, #4	; (adr r2, 800eee4 <USBD_GetDescriptor+0x108>)
 800eede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee2:	bf00      	nop
 800eee4:	0800eefd 	.word	0x0800eefd
 800eee8:	0800ef31 	.word	0x0800ef31
 800eeec:	0800ef65 	.word	0x0800ef65
 800eef0:	0800ef99 	.word	0x0800ef99
 800eef4:	0800efcd 	.word	0x0800efcd
 800eef8:	0800f001 	.word	0x0800f001
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d00b      	beq.n	800ef20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	7c12      	ldrb	r2, [r2, #16]
 800ef14:	f107 0108 	add.w	r1, r7, #8
 800ef18:	4610      	mov	r0, r2
 800ef1a:	4798      	blx	r3
 800ef1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef1e:	e091      	b.n	800f044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef20:	6839      	ldr	r1, [r7, #0]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fab2 	bl	800f48c <USBD_CtlError>
            err++;
 800ef28:	7afb      	ldrb	r3, [r7, #11]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef2e:	e089      	b.n	800f044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00b      	beq.n	800ef54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	7c12      	ldrb	r2, [r2, #16]
 800ef48:	f107 0108 	add.w	r1, r7, #8
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	4798      	blx	r3
 800ef50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef52:	e077      	b.n	800f044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fa98 	bl	800f48c <USBD_CtlError>
            err++;
 800ef5c:	7afb      	ldrb	r3, [r7, #11]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	72fb      	strb	r3, [r7, #11]
          break;
 800ef62:	e06f      	b.n	800f044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00b      	beq.n	800ef88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	7c12      	ldrb	r2, [r2, #16]
 800ef7c:	f107 0108 	add.w	r1, r7, #8
 800ef80:	4610      	mov	r0, r2
 800ef82:	4798      	blx	r3
 800ef84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef86:	e05d      	b.n	800f044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef88:	6839      	ldr	r1, [r7, #0]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 fa7e 	bl	800f48c <USBD_CtlError>
            err++;
 800ef90:	7afb      	ldrb	r3, [r7, #11]
 800ef92:	3301      	adds	r3, #1
 800ef94:	72fb      	strb	r3, [r7, #11]
          break;
 800ef96:	e055      	b.n	800f044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00b      	beq.n	800efbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	7c12      	ldrb	r2, [r2, #16]
 800efb0:	f107 0108 	add.w	r1, r7, #8
 800efb4:	4610      	mov	r0, r2
 800efb6:	4798      	blx	r3
 800efb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efba:	e043      	b.n	800f044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efbc:	6839      	ldr	r1, [r7, #0]
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 fa64 	bl	800f48c <USBD_CtlError>
            err++;
 800efc4:	7afb      	ldrb	r3, [r7, #11]
 800efc6:	3301      	adds	r3, #1
 800efc8:	72fb      	strb	r3, [r7, #11]
          break;
 800efca:	e03b      	b.n	800f044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efd2:	695b      	ldr	r3, [r3, #20]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00b      	beq.n	800eff0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efde:	695b      	ldr	r3, [r3, #20]
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	7c12      	ldrb	r2, [r2, #16]
 800efe4:	f107 0108 	add.w	r1, r7, #8
 800efe8:	4610      	mov	r0, r2
 800efea:	4798      	blx	r3
 800efec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efee:	e029      	b.n	800f044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fa4a 	bl	800f48c <USBD_CtlError>
            err++;
 800eff8:	7afb      	ldrb	r3, [r7, #11]
 800effa:	3301      	adds	r3, #1
 800effc:	72fb      	strb	r3, [r7, #11]
          break;
 800effe:	e021      	b.n	800f044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f006:	699b      	ldr	r3, [r3, #24]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d00b      	beq.n	800f024 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f012:	699b      	ldr	r3, [r3, #24]
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	7c12      	ldrb	r2, [r2, #16]
 800f018:	f107 0108 	add.w	r1, r7, #8
 800f01c:	4610      	mov	r0, r2
 800f01e:	4798      	blx	r3
 800f020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f022:	e00f      	b.n	800f044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 fa30 	bl	800f48c <USBD_CtlError>
            err++;
 800f02c:	7afb      	ldrb	r3, [r7, #11]
 800f02e:	3301      	adds	r3, #1
 800f030:	72fb      	strb	r3, [r7, #11]
          break;
 800f032:	e007      	b.n	800f044 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f034:	6839      	ldr	r1, [r7, #0]
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 fa28 	bl	800f48c <USBD_CtlError>
          err++;
 800f03c:	7afb      	ldrb	r3, [r7, #11]
 800f03e:	3301      	adds	r3, #1
 800f040:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f042:	bf00      	nop
      }
      break;
 800f044:	e037      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	7c1b      	ldrb	r3, [r3, #16]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d109      	bne.n	800f062 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f056:	f107 0208 	add.w	r2, r7, #8
 800f05a:	4610      	mov	r0, r2
 800f05c:	4798      	blx	r3
 800f05e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f060:	e029      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fa11 	bl	800f48c <USBD_CtlError>
        err++;
 800f06a:	7afb      	ldrb	r3, [r7, #11]
 800f06c:	3301      	adds	r3, #1
 800f06e:	72fb      	strb	r3, [r7, #11]
      break;
 800f070:	e021      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	7c1b      	ldrb	r3, [r3, #16]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10d      	bne.n	800f096 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f082:	f107 0208 	add.w	r2, r7, #8
 800f086:	4610      	mov	r0, r2
 800f088:	4798      	blx	r3
 800f08a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	3301      	adds	r3, #1
 800f090:	2207      	movs	r2, #7
 800f092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f094:	e00f      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f9f7 	bl	800f48c <USBD_CtlError>
        err++;
 800f09e:	7afb      	ldrb	r3, [r7, #11]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800f0a4:	e007      	b.n	800f0b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 f9ef 	bl	800f48c <USBD_CtlError>
      err++;
 800f0ae:	7afb      	ldrb	r3, [r7, #11]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800f0b4:	bf00      	nop
  }

  if (err != 0U)
 800f0b6:	7afb      	ldrb	r3, [r7, #11]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d11e      	bne.n	800f0fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	88db      	ldrh	r3, [r3, #6]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d016      	beq.n	800f0f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f0c4:	893b      	ldrh	r3, [r7, #8]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00e      	beq.n	800f0e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	88da      	ldrh	r2, [r3, #6]
 800f0ce:	893b      	ldrh	r3, [r7, #8]
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	bf28      	it	cs
 800f0d4:	4613      	movcs	r3, r2
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f0da:	893b      	ldrh	r3, [r7, #8]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	68f9      	ldr	r1, [r7, #12]
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fa44 	bl	800f56e <USBD_CtlSendData>
 800f0e6:	e009      	b.n	800f0fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f9ce 	bl	800f48c <USBD_CtlError>
 800f0f0:	e004      	b.n	800f0fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 fa95 	bl	800f622 <USBD_CtlSendStatus>
 800f0f8:	e000      	b.n	800f0fc <USBD_GetDescriptor+0x320>
    return;
 800f0fa:	bf00      	nop
  }
}
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop

0800f104 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	889b      	ldrh	r3, [r3, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d131      	bne.n	800f17a <USBD_SetAddress+0x76>
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	88db      	ldrh	r3, [r3, #6]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d12d      	bne.n	800f17a <USBD_SetAddress+0x76>
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	885b      	ldrh	r3, [r3, #2]
 800f122:	2b7f      	cmp	r3, #127	; 0x7f
 800f124:	d829      	bhi.n	800f17a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	885b      	ldrh	r3, [r3, #2]
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f130:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d104      	bne.n	800f148 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f9a3 	bl	800f48c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f146:	e01d      	b.n	800f184 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	7bfa      	ldrb	r2, [r7, #15]
 800f14c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	4619      	mov	r1, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 ff7f 	bl	8010058 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fa61 	bl	800f622 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f160:	7bfb      	ldrb	r3, [r7, #15]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d004      	beq.n	800f170 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2202      	movs	r2, #2
 800f16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f16e:	e009      	b.n	800f184 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f178:	e004      	b.n	800f184 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f985 	bl	800f48c <USBD_CtlError>
  }
}
 800f182:	bf00      	nop
 800f184:	bf00      	nop
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	885b      	ldrh	r3, [r3, #2]
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	4b4c      	ldr	r3, [pc, #304]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f1a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f1a4:	4b4b      	ldr	r3, [pc, #300]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d905      	bls.n	800f1b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f96c 	bl	800f48c <USBD_CtlError>
    return USBD_FAIL;
 800f1b4:	2303      	movs	r3, #3
 800f1b6:	e088      	b.n	800f2ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b02      	cmp	r3, #2
 800f1c2:	d002      	beq.n	800f1ca <USBD_SetConfig+0x3e>
 800f1c4:	2b03      	cmp	r3, #3
 800f1c6:	d025      	beq.n	800f214 <USBD_SetConfig+0x88>
 800f1c8:	e071      	b.n	800f2ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f1ca:	4b42      	ldr	r3, [pc, #264]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d01c      	beq.n	800f20c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f1d2:	4b40      	ldr	r3, [pc, #256]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f1dc:	4b3d      	ldr	r3, [pc, #244]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff f91e 	bl	800e424 <USBD_SetClassConfig>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d004      	beq.n	800f1fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f949 	bl	800f48c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1fa:	e065      	b.n	800f2c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fa10 	bl	800f622 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2203      	movs	r2, #3
 800f206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f20a:	e05d      	b.n	800f2c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fa08 	bl	800f622 <USBD_CtlSendStatus>
      break;
 800f212:	e059      	b.n	800f2c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f214:	4b2f      	ldr	r3, [pc, #188]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d112      	bne.n	800f242 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2202      	movs	r2, #2
 800f220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f224:	4b2b      	ldr	r3, [pc, #172]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	461a      	mov	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f22e:	4b29      	ldr	r3, [pc, #164]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7ff f911 	bl	800e45c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f9f1 	bl	800f622 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f240:	e042      	b.n	800f2c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f242:	4b24      	ldr	r3, [pc, #144]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d02a      	beq.n	800f2a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	b2db      	uxtb	r3, r3
 800f256:	4619      	mov	r1, r3
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff f8ff 	bl	800e45c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f25e:	4b1d      	ldr	r3, [pc, #116]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	461a      	mov	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f268:	4b1a      	ldr	r3, [pc, #104]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff f8d8 	bl	800e424 <USBD_SetClassConfig>
 800f274:	4603      	mov	r3, r0
 800f276:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00f      	beq.n	800f29e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 f903 	bl	800f48c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7ff f8e4 	bl	800e45c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2202      	movs	r2, #2
 800f298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f29c:	e014      	b.n	800f2c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f9bf 	bl	800f622 <USBD_CtlSendStatus>
      break;
 800f2a4:	e010      	b.n	800f2c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 f9bb 	bl	800f622 <USBD_CtlSendStatus>
      break;
 800f2ac:	e00c      	b.n	800f2c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f8eb 	bl	800f48c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2b6:	4b07      	ldr	r3, [pc, #28]	; (800f2d4 <USBD_SetConfig+0x148>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff f8cd 	bl	800e45c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f2c2:	2303      	movs	r3, #3
 800f2c4:	73fb      	strb	r3, [r7, #15]
      break;
 800f2c6:	bf00      	nop
  }

  return ret;
 800f2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	200001ac 	.word	0x200001ac

0800f2d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	88db      	ldrh	r3, [r3, #6]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d004      	beq.n	800f2f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f8cd 	bl	800f48c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f2f2:	e023      	b.n	800f33c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	dc02      	bgt.n	800f306 <USBD_GetConfig+0x2e>
 800f300:	2b00      	cmp	r3, #0
 800f302:	dc03      	bgt.n	800f30c <USBD_GetConfig+0x34>
 800f304:	e015      	b.n	800f332 <USBD_GetConfig+0x5a>
 800f306:	2b03      	cmp	r3, #3
 800f308:	d00b      	beq.n	800f322 <USBD_GetConfig+0x4a>
 800f30a:	e012      	b.n	800f332 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	3308      	adds	r3, #8
 800f316:	2201      	movs	r2, #1
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 f927 	bl	800f56e <USBD_CtlSendData>
        break;
 800f320:	e00c      	b.n	800f33c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3304      	adds	r3, #4
 800f326:	2201      	movs	r2, #1
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 f91f 	bl	800f56e <USBD_CtlSendData>
        break;
 800f330:	e004      	b.n	800f33c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f332:	6839      	ldr	r1, [r7, #0]
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f8a9 	bl	800f48c <USBD_CtlError>
        break;
 800f33a:	bf00      	nop
}
 800f33c:	bf00      	nop
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f354:	b2db      	uxtb	r3, r3
 800f356:	3b01      	subs	r3, #1
 800f358:	2b02      	cmp	r3, #2
 800f35a:	d81e      	bhi.n	800f39a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	88db      	ldrh	r3, [r3, #6]
 800f360:	2b02      	cmp	r3, #2
 800f362:	d004      	beq.n	800f36e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f890 	bl	800f48c <USBD_CtlError>
        break;
 800f36c:	e01a      	b.n	800f3a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2201      	movs	r2, #1
 800f372:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d005      	beq.n	800f38a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	f043 0202 	orr.w	r2, r3, #2
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	330c      	adds	r3, #12
 800f38e:	2202      	movs	r2, #2
 800f390:	4619      	mov	r1, r3
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 f8eb 	bl	800f56e <USBD_CtlSendData>
      break;
 800f398:	e004      	b.n	800f3a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 f875 	bl	800f48c <USBD_CtlError>
      break;
 800f3a2:	bf00      	nop
  }
}
 800f3a4:	bf00      	nop
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	885b      	ldrh	r3, [r3, #2]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d106      	bne.n	800f3cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f92b 	bl	800f622 <USBD_CtlSendStatus>
  }
}
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	2b02      	cmp	r3, #2
 800f3ea:	d80b      	bhi.n	800f404 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	885b      	ldrh	r3, [r3, #2]
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d10c      	bne.n	800f40e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 f910 	bl	800f622 <USBD_CtlSendStatus>
      }
      break;
 800f402:	e004      	b.n	800f40e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 f840 	bl	800f48c <USBD_CtlError>
      break;
 800f40c:	e000      	b.n	800f410 <USBD_ClrFeature+0x3c>
      break;
 800f40e:	bf00      	nop
  }
}
 800f410:	bf00      	nop
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	781a      	ldrb	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	3301      	adds	r3, #1
 800f432:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	781a      	ldrb	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	3301      	adds	r3, #1
 800f440:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f7ff fa91 	bl	800e96a <SWAPBYTE>
 800f448:	4603      	mov	r3, r0
 800f44a:	461a      	mov	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	3301      	adds	r3, #1
 800f454:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	3301      	adds	r3, #1
 800f45a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff fa84 	bl	800e96a <SWAPBYTE>
 800f462:	4603      	mov	r3, r0
 800f464:	461a      	mov	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3301      	adds	r3, #1
 800f46e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	3301      	adds	r3, #1
 800f474:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7ff fa77 	bl	800e96a <SWAPBYTE>
 800f47c:	4603      	mov	r3, r0
 800f47e:	461a      	mov	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	80da      	strh	r2, [r3, #6]
}
 800f484:	bf00      	nop
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f496:	2180      	movs	r1, #128	; 0x80
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 fd73 	bl	800ff84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f49e:	2100      	movs	r1, #0
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fd6f 	bl	800ff84 <USBD_LL_StallEP>
}
 800f4a6:	bf00      	nop
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b086      	sub	sp, #24
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	60f8      	str	r0, [r7, #12]
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d036      	beq.n	800f532 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f4c8:	6938      	ldr	r0, [r7, #16]
 800f4ca:	f000 f836 	bl	800f53a <USBD_GetLen>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	005b      	lsls	r3, r3, #1
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4dc:	7dfb      	ldrb	r3, [r7, #23]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	7812      	ldrb	r2, [r2, #0]
 800f4e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4f8:	7dfb      	ldrb	r3, [r7, #23]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f4fe:	e013      	b.n	800f528 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f500:	7dfb      	ldrb	r3, [r7, #23]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	4413      	add	r3, r2
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	7812      	ldrb	r2, [r2, #0]
 800f50a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	3301      	adds	r3, #1
 800f510:	613b      	str	r3, [r7, #16]
    idx++;
 800f512:	7dfb      	ldrb	r3, [r7, #23]
 800f514:	3301      	adds	r3, #1
 800f516:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f518:	7dfb      	ldrb	r3, [r7, #23]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	2200      	movs	r2, #0
 800f520:	701a      	strb	r2, [r3, #0]
    idx++;
 800f522:	7dfb      	ldrb	r3, [r7, #23]
 800f524:	3301      	adds	r3, #1
 800f526:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1e7      	bne.n	800f500 <USBD_GetString+0x52>
 800f530:	e000      	b.n	800f534 <USBD_GetString+0x86>
    return;
 800f532:	bf00      	nop
  }
}
 800f534:	3718      	adds	r7, #24
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f53a:	b480      	push	{r7}
 800f53c:	b085      	sub	sp, #20
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f542:	2300      	movs	r3, #0
 800f544:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f54a:	e005      	b.n	800f558 <USBD_GetLen+0x1e>
  {
    len++;
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
 800f54e:	3301      	adds	r3, #1
 800f550:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	3301      	adds	r3, #1
 800f556:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1f5      	bne.n	800f54c <USBD_GetLen+0x12>
  }

  return len;
 800f560:	7bfb      	ldrb	r3, [r7, #15]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr

0800f56e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b084      	sub	sp, #16
 800f572:	af00      	add	r7, sp, #0
 800f574:	60f8      	str	r0, [r7, #12]
 800f576:	60b9      	str	r1, [r7, #8]
 800f578:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2202      	movs	r2, #2
 800f57e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68ba      	ldr	r2, [r7, #8]
 800f592:	2100      	movs	r1, #0
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f000 fd7e 	bl	8010096 <USBD_LL_Transmit>

  return USBD_OK;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f000 fd6d 	bl	8010096 <USBD_LL_Transmit>

  return USBD_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b084      	sub	sp, #16
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	60f8      	str	r0, [r7, #12]
 800f5ce:	60b9      	str	r1, [r7, #8]
 800f5d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2203      	movs	r2, #3
 800f5d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 fd71 	bl	80100d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	2100      	movs	r1, #0
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f000 fd60 	bl	80100d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b082      	sub	sp, #8
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2204      	movs	r2, #4
 800f62e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f632:	2300      	movs	r3, #0
 800f634:	2200      	movs	r2, #0
 800f636:	2100      	movs	r1, #0
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fd2c 	bl	8010096 <USBD_LL_Transmit>

  return USBD_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2205      	movs	r2, #5
 800f654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f658:	2300      	movs	r3, #0
 800f65a:	2200      	movs	r2, #0
 800f65c:	2100      	movs	r1, #0
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fd3a 	bl	80100d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
	...

0800f670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f674:	2200      	movs	r2, #0
 800f676:	4912      	ldr	r1, [pc, #72]	; (800f6c0 <MX_USB_DEVICE_Init+0x50>)
 800f678:	4812      	ldr	r0, [pc, #72]	; (800f6c4 <MX_USB_DEVICE_Init+0x54>)
 800f67a:	f7fe fe65 	bl	800e348 <USBD_Init>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f684:	f7f1 fe04 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f688:	490f      	ldr	r1, [pc, #60]	; (800f6c8 <MX_USB_DEVICE_Init+0x58>)
 800f68a:	480e      	ldr	r0, [pc, #56]	; (800f6c4 <MX_USB_DEVICE_Init+0x54>)
 800f68c:	f7fe fe8c 	bl	800e3a8 <USBD_RegisterClass>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f696:	f7f1 fdfb 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f69a:	490c      	ldr	r1, [pc, #48]	; (800f6cc <MX_USB_DEVICE_Init+0x5c>)
 800f69c:	4809      	ldr	r0, [pc, #36]	; (800f6c4 <MX_USB_DEVICE_Init+0x54>)
 800f69e:	f7fe fdad 	bl	800e1fc <USBD_CDC_RegisterInterface>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d001      	beq.n	800f6ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f6a8:	f7f1 fdf2 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f6ac:	4805      	ldr	r0, [pc, #20]	; (800f6c4 <MX_USB_DEVICE_Init+0x54>)
 800f6ae:	f7fe fea2 	bl	800e3f6 <USBD_Start>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d001      	beq.n	800f6bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f6b8:	f7f1 fdea 	bl	8001290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f6bc:	bf00      	nop
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	20000130 	.word	0x20000130
 800f6c4:	200012c4 	.word	0x200012c4
 800f6c8:	20000018 	.word	0x20000018
 800f6cc:	2000011c 	.word	0x2000011c

0800f6d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	4905      	ldr	r1, [pc, #20]	; (800f6ec <CDC_Init_FS+0x1c>)
 800f6d8:	4805      	ldr	r0, [pc, #20]	; (800f6f0 <CDC_Init_FS+0x20>)
 800f6da:	f7fe fda4 	bl	800e226 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f6de:	4905      	ldr	r1, [pc, #20]	; (800f6f4 <CDC_Init_FS+0x24>)
 800f6e0:	4803      	ldr	r0, [pc, #12]	; (800f6f0 <CDC_Init_FS+0x20>)
 800f6e2:	f7fe fdbe 	bl	800e262 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20001d94 	.word	0x20001d94
 800f6f0:	200012c4 	.word	0x200012c4
 800f6f4:	20001594 	.word	0x20001594

0800f6f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	6039      	str	r1, [r7, #0]
 800f712:	71fb      	strb	r3, [r7, #7]
 800f714:	4613      	mov	r3, r2
 800f716:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f718:	79fb      	ldrb	r3, [r7, #7]
 800f71a:	2b23      	cmp	r3, #35	; 0x23
 800f71c:	f200 808c 	bhi.w	800f838 <CDC_Control_FS+0x130>
 800f720:	a201      	add	r2, pc, #4	; (adr r2, 800f728 <CDC_Control_FS+0x20>)
 800f722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f726:	bf00      	nop
 800f728:	0800f839 	.word	0x0800f839
 800f72c:	0800f839 	.word	0x0800f839
 800f730:	0800f839 	.word	0x0800f839
 800f734:	0800f839 	.word	0x0800f839
 800f738:	0800f839 	.word	0x0800f839
 800f73c:	0800f839 	.word	0x0800f839
 800f740:	0800f839 	.word	0x0800f839
 800f744:	0800f839 	.word	0x0800f839
 800f748:	0800f839 	.word	0x0800f839
 800f74c:	0800f839 	.word	0x0800f839
 800f750:	0800f839 	.word	0x0800f839
 800f754:	0800f839 	.word	0x0800f839
 800f758:	0800f839 	.word	0x0800f839
 800f75c:	0800f839 	.word	0x0800f839
 800f760:	0800f839 	.word	0x0800f839
 800f764:	0800f839 	.word	0x0800f839
 800f768:	0800f839 	.word	0x0800f839
 800f76c:	0800f839 	.word	0x0800f839
 800f770:	0800f839 	.word	0x0800f839
 800f774:	0800f839 	.word	0x0800f839
 800f778:	0800f839 	.word	0x0800f839
 800f77c:	0800f839 	.word	0x0800f839
 800f780:	0800f839 	.word	0x0800f839
 800f784:	0800f839 	.word	0x0800f839
 800f788:	0800f839 	.word	0x0800f839
 800f78c:	0800f839 	.word	0x0800f839
 800f790:	0800f839 	.word	0x0800f839
 800f794:	0800f839 	.word	0x0800f839
 800f798:	0800f839 	.word	0x0800f839
 800f79c:	0800f839 	.word	0x0800f839
 800f7a0:	0800f839 	.word	0x0800f839
 800f7a4:	0800f839 	.word	0x0800f839
 800f7a8:	0800f7b9 	.word	0x0800f7b9
 800f7ac:	0800f7f3 	.word	0x0800f7f3
 800f7b0:	0800f839 	.word	0x0800f839
 800f7b4:	0800f839 	.word	0x0800f839
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	USB_VCP_Parameters[0] = pbuf[0];
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	781a      	ldrb	r2, [r3, #0]
 800f7bc:	4b22      	ldr	r3, [pc, #136]	; (800f848 <CDC_Control_FS+0x140>)
 800f7be:	701a      	strb	r2, [r3, #0]
    	USB_VCP_Parameters[1] = pbuf[1];
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	785a      	ldrb	r2, [r3, #1]
 800f7c4:	4b20      	ldr	r3, [pc, #128]	; (800f848 <CDC_Control_FS+0x140>)
 800f7c6:	705a      	strb	r2, [r3, #1]
    	USB_VCP_Parameters[2] = pbuf[2];
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	789a      	ldrb	r2, [r3, #2]
 800f7cc:	4b1e      	ldr	r3, [pc, #120]	; (800f848 <CDC_Control_FS+0x140>)
 800f7ce:	709a      	strb	r2, [r3, #2]
    	USB_VCP_Parameters[3] = pbuf[3];
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	78da      	ldrb	r2, [r3, #3]
 800f7d4:	4b1c      	ldr	r3, [pc, #112]	; (800f848 <CDC_Control_FS+0x140>)
 800f7d6:	70da      	strb	r2, [r3, #3]
    	USB_VCP_Parameters[4] = pbuf[4];
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	791a      	ldrb	r2, [r3, #4]
 800f7dc:	4b1a      	ldr	r3, [pc, #104]	; (800f848 <CDC_Control_FS+0x140>)
 800f7de:	711a      	strb	r2, [r3, #4]
    	USB_VCP_Parameters[5] = pbuf[5];
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	795a      	ldrb	r2, [r3, #5]
 800f7e4:	4b18      	ldr	r3, [pc, #96]	; (800f848 <CDC_Control_FS+0x140>)
 800f7e6:	715a      	strb	r2, [r3, #5]
    	USB_VCP_Parameters[6] = pbuf[6];
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	799a      	ldrb	r2, [r3, #6]
 800f7ec:	4b16      	ldr	r3, [pc, #88]	; (800f848 <CDC_Control_FS+0x140>)
 800f7ee:	719a      	strb	r2, [r3, #6]
    break;
 800f7f0:	e023      	b.n	800f83a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = USB_VCP_Parameters[0];
 800f7f2:	4b15      	ldr	r3, [pc, #84]	; (800f848 <CDC_Control_FS+0x140>)
 800f7f4:	781a      	ldrb	r2, [r3, #0]
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = USB_VCP_Parameters[1];
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	4a12      	ldr	r2, [pc, #72]	; (800f848 <CDC_Control_FS+0x140>)
 800f800:	7852      	ldrb	r2, [r2, #1]
 800f802:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = USB_VCP_Parameters[2];
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	3302      	adds	r3, #2
 800f808:	4a0f      	ldr	r2, [pc, #60]	; (800f848 <CDC_Control_FS+0x140>)
 800f80a:	7892      	ldrb	r2, [r2, #2]
 800f80c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = USB_VCP_Parameters[3];
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	3303      	adds	r3, #3
 800f812:	4a0d      	ldr	r2, [pc, #52]	; (800f848 <CDC_Control_FS+0x140>)
 800f814:	78d2      	ldrb	r2, [r2, #3]
 800f816:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = USB_VCP_Parameters[4];
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4a0a      	ldr	r2, [pc, #40]	; (800f848 <CDC_Control_FS+0x140>)
 800f81e:	7912      	ldrb	r2, [r2, #4]
 800f820:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = USB_VCP_Parameters[5];
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	3305      	adds	r3, #5
 800f826:	4a08      	ldr	r2, [pc, #32]	; (800f848 <CDC_Control_FS+0x140>)
 800f828:	7952      	ldrb	r2, [r2, #5]
 800f82a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = USB_VCP_Parameters[6];
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	3306      	adds	r3, #6
 800f830:	4a05      	ldr	r2, [pc, #20]	; (800f848 <CDC_Control_FS+0x140>)
 800f832:	7992      	ldrb	r2, [r2, #6]
 800f834:	701a      	strb	r2, [r3, #0]
    break;
 800f836:	e000      	b.n	800f83a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f838:	bf00      	nop
  }

  return (USBD_OK);
 800f83a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr
 800f848:	200003d0 	.word	0x200003d0

0800f84c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	480c      	ldr	r0, [pc, #48]	; (800f88c <CDC_Receive_FS+0x40>)
 800f85a:	f7fe fd02 	bl	800e262 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f85e:	480b      	ldr	r0, [pc, #44]	; (800f88c <CDC_Receive_FS+0x40>)
 800f860:	f7fe fd48 	bl	800e2f4 <USBD_CDC_ReceivePacket>

  PDM_USB_Receive(Buf, *Len);
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	b29b      	uxth	r3, r3
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7f2 fd47 	bl	8002300 <PDM_USB_Receive>
  PDM_USB_Transmit_Config(Buf, *Len);
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	b29b      	uxth	r3, r3
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7f2 fe14 	bl	80024a8 <PDM_USB_Transmit_Config>

  return (USBD_OK);
 800f880:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	200012c4 	.word	0x200012c4

0800f890 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f8a0:	4b0d      	ldr	r3, [pc, #52]	; (800f8d8 <CDC_Transmit_FS+0x48>)
 800f8a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d001      	beq.n	800f8b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e00b      	b.n	800f8ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f8b6:	887b      	ldrh	r3, [r7, #2]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	4806      	ldr	r0, [pc, #24]	; (800f8d8 <CDC_Transmit_FS+0x48>)
 800f8be:	f7fe fcb2 	bl	800e226 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f8c2:	4805      	ldr	r0, [pc, #20]	; (800f8d8 <CDC_Transmit_FS+0x48>)
 800f8c4:	f7fe fce6 	bl	800e294 <USBD_CDC_TransmitPacket>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	200012c4 	.word	0x200012c4

0800f8dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b087      	sub	sp, #28
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	371c      	adds	r7, #28
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
	...

0800f900 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	4603      	mov	r3, r0
 800f908:	6039      	str	r1, [r7, #0]
 800f90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	2212      	movs	r2, #18
 800f910:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f912:	4b03      	ldr	r3, [pc, #12]	; (800f920 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f914:	4618      	mov	r0, r3
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	20000150 	.word	0x20000150

0800f924 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	6039      	str	r1, [r7, #0]
 800f92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	2204      	movs	r2, #4
 800f934:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f936:	4b03      	ldr	r3, [pc, #12]	; (800f944 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f938:	4618      	mov	r0, r3
 800f93a:	370c      	adds	r7, #12
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr
 800f944:	20000170 	.word	0x20000170

0800f948 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	4603      	mov	r3, r0
 800f950:	6039      	str	r1, [r7, #0]
 800f952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f954:	79fb      	ldrb	r3, [r7, #7]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d105      	bne.n	800f966 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f95a:	683a      	ldr	r2, [r7, #0]
 800f95c:	4907      	ldr	r1, [pc, #28]	; (800f97c <USBD_FS_ProductStrDescriptor+0x34>)
 800f95e:	4808      	ldr	r0, [pc, #32]	; (800f980 <USBD_FS_ProductStrDescriptor+0x38>)
 800f960:	f7ff fda5 	bl	800f4ae <USBD_GetString>
 800f964:	e004      	b.n	800f970 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	4904      	ldr	r1, [pc, #16]	; (800f97c <USBD_FS_ProductStrDescriptor+0x34>)
 800f96a:	4805      	ldr	r0, [pc, #20]	; (800f980 <USBD_FS_ProductStrDescriptor+0x38>)
 800f96c:	f7ff fd9f 	bl	800f4ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800f970:	4b02      	ldr	r3, [pc, #8]	; (800f97c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f972:	4618      	mov	r0, r3
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	20002594 	.word	0x20002594
 800f980:	080102d4 	.word	0x080102d4

0800f984 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	4603      	mov	r3, r0
 800f98c:	6039      	str	r1, [r7, #0]
 800f98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f990:	683a      	ldr	r2, [r7, #0]
 800f992:	4904      	ldr	r1, [pc, #16]	; (800f9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f994:	4804      	ldr	r0, [pc, #16]	; (800f9a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f996:	f7ff fd8a 	bl	800f4ae <USBD_GetString>
  return USBD_StrDesc;
 800f99a:	4b02      	ldr	r3, [pc, #8]	; (800f9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	20002594 	.word	0x20002594
 800f9a8:	080102ec 	.word	0x080102ec

0800f9ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	6039      	str	r1, [r7, #0]
 800f9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	221a      	movs	r2, #26
 800f9bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f9be:	f000 f855 	bl	800fa6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f9c2:	4b02      	ldr	r3, [pc, #8]	; (800f9cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	20000174 	.word	0x20000174

0800f9d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	6039      	str	r1, [r7, #0]
 800f9da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f9dc:	79fb      	ldrb	r3, [r7, #7]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d105      	bne.n	800f9ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f9e2:	683a      	ldr	r2, [r7, #0]
 800f9e4:	4907      	ldr	r1, [pc, #28]	; (800fa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f9e6:	4808      	ldr	r0, [pc, #32]	; (800fa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f9e8:	f7ff fd61 	bl	800f4ae <USBD_GetString>
 800f9ec:	e004      	b.n	800f9f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f9ee:	683a      	ldr	r2, [r7, #0]
 800f9f0:	4904      	ldr	r1, [pc, #16]	; (800fa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f9f2:	4805      	ldr	r0, [pc, #20]	; (800fa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f9f4:	f7ff fd5b 	bl	800f4ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9f8:	4b02      	ldr	r3, [pc, #8]	; (800fa04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20002594 	.word	0x20002594
 800fa08:	08010300 	.word	0x08010300

0800fa0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	4603      	mov	r3, r0
 800fa14:	6039      	str	r1, [r7, #0]
 800fa16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa18:	79fb      	ldrb	r3, [r7, #7]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d105      	bne.n	800fa2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	4907      	ldr	r1, [pc, #28]	; (800fa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa22:	4808      	ldr	r0, [pc, #32]	; (800fa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa24:	f7ff fd43 	bl	800f4ae <USBD_GetString>
 800fa28:	e004      	b.n	800fa34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	4904      	ldr	r1, [pc, #16]	; (800fa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa2e:	4805      	ldr	r0, [pc, #20]	; (800fa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa30:	f7ff fd3d 	bl	800f4ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa34:	4b02      	ldr	r3, [pc, #8]	; (800fa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20002594 	.word	0x20002594
 800fa44:	0801030c 	.word	0x0801030c

0800fa48 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	6039      	str	r1, [r7, #0]
 800fa52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	220c      	movs	r2, #12
 800fa58:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fa5a:	4b03      	ldr	r3, [pc, #12]	; (800fa68 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	20000164 	.word	0x20000164

0800fa6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fa72:	4b0f      	ldr	r3, [pc, #60]	; (800fab0 <Get_SerialNum+0x44>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fa78:	4b0e      	ldr	r3, [pc, #56]	; (800fab4 <Get_SerialNum+0x48>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fa7e:	4b0e      	ldr	r3, [pc, #56]	; (800fab8 <Get_SerialNum+0x4c>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4413      	add	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d009      	beq.n	800faa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fa92:	2208      	movs	r2, #8
 800fa94:	4909      	ldr	r1, [pc, #36]	; (800fabc <Get_SerialNum+0x50>)
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f000 f814 	bl	800fac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fa9c:	2204      	movs	r2, #4
 800fa9e:	4908      	ldr	r1, [pc, #32]	; (800fac0 <Get_SerialNum+0x54>)
 800faa0:	68b8      	ldr	r0, [r7, #8]
 800faa2:	f000 f80f 	bl	800fac4 <IntToUnicode>
  }
}
 800faa6:	bf00      	nop
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	1fff7a10 	.word	0x1fff7a10
 800fab4:	1fff7a14 	.word	0x1fff7a14
 800fab8:	1fff7a18 	.word	0x1fff7a18
 800fabc:	20000176 	.word	0x20000176
 800fac0:	20000186 	.word	0x20000186

0800fac4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	4613      	mov	r3, r2
 800fad0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fad6:	2300      	movs	r3, #0
 800fad8:	75fb      	strb	r3, [r7, #23]
 800fada:	e027      	b.n	800fb2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	0f1b      	lsrs	r3, r3, #28
 800fae0:	2b09      	cmp	r3, #9
 800fae2:	d80b      	bhi.n	800fafc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	0f1b      	lsrs	r3, r3, #28
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	7dfb      	ldrb	r3, [r7, #23]
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	4619      	mov	r1, r3
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	440b      	add	r3, r1
 800faf4:	3230      	adds	r2, #48	; 0x30
 800faf6:	b2d2      	uxtb	r2, r2
 800faf8:	701a      	strb	r2, [r3, #0]
 800fafa:	e00a      	b.n	800fb12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	0f1b      	lsrs	r3, r3, #28
 800fb00:	b2da      	uxtb	r2, r3
 800fb02:	7dfb      	ldrb	r3, [r7, #23]
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	4619      	mov	r1, r3
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	440b      	add	r3, r1
 800fb0c:	3237      	adds	r2, #55	; 0x37
 800fb0e:	b2d2      	uxtb	r2, r2
 800fb10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	011b      	lsls	r3, r3, #4
 800fb16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb18:	7dfb      	ldrb	r3, [r7, #23]
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	4413      	add	r3, r2
 800fb22:	2200      	movs	r2, #0
 800fb24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	75fb      	strb	r3, [r7, #23]
 800fb2c:	7dfa      	ldrb	r2, [r7, #23]
 800fb2e:	79fb      	ldrb	r3, [r7, #7]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d3d3      	bcc.n	800fadc <IntToUnicode+0x18>
  }
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop
 800fb38:	371c      	adds	r7, #28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
	...

0800fb44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b0a0      	sub	sp, #128	; 0x80
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fb50:	2200      	movs	r2, #0
 800fb52:	601a      	str	r2, [r3, #0]
 800fb54:	605a      	str	r2, [r3, #4]
 800fb56:	609a      	str	r2, [r3, #8]
 800fb58:	60da      	str	r2, [r3, #12]
 800fb5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fb5c:	f107 0310 	add.w	r3, r7, #16
 800fb60:	225c      	movs	r2, #92	; 0x5c
 800fb62:	2100      	movs	r1, #0
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 fba1 	bl	80102ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fb72:	d161      	bne.n	800fc38 <HAL_PCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fb74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 800fb7a:	2304      	movs	r3, #4
 800fb7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800fb7e:	2360      	movs	r3, #96	; 0x60
 800fb80:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800fb82:	2302      	movs	r3, #2
 800fb84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800fb86:	2304      	movs	r3, #4
 800fb88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800fb8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb92:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fb94:	f107 0310 	add.w	r3, r7, #16
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fa fd0f 	bl	800a5bc <HAL_RCCEx_PeriphCLKConfig>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800fba4:	f7f1 fb74 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fba8:	2300      	movs	r3, #0
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	4b24      	ldr	r3, [pc, #144]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb0:	4a23      	ldr	r2, [pc, #140]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fbb2:	f043 0301 	orr.w	r3, r3, #1
 800fbb6:	6313      	str	r3, [r2, #48]	; 0x30
 800fbb8:	4b21      	ldr	r3, [pc, #132]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbbc:	f003 0301 	and.w	r3, r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fbc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	481a      	ldr	r0, [pc, #104]	; (800fc44 <HAL_PCD_MspInit+0x100>)
 800fbda:	f7f6 fb27 	bl	800622c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fbde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fbe2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbec:	2303      	movs	r3, #3
 800fbee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fbf0:	230a      	movs	r3, #10
 800fbf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4812      	ldr	r0, [pc, #72]	; (800fc44 <HAL_PCD_MspInit+0x100>)
 800fbfc:	f7f6 fb16 	bl	800622c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc00:	4b0f      	ldr	r3, [pc, #60]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc04:	4a0e      	ldr	r2, [pc, #56]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc0a:	6353      	str	r3, [r2, #52]	; 0x34
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	60bb      	str	r3, [r7, #8]
 800fc10:	4b0b      	ldr	r3, [pc, #44]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fc12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc14:	4a0a      	ldr	r2, [pc, #40]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fc16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc1a:	6453      	str	r3, [r2, #68]	; 0x44
 800fc1c:	4b08      	ldr	r3, [pc, #32]	; (800fc40 <HAL_PCD_MspInit+0xfc>)
 800fc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc24:	60bb      	str	r3, [r7, #8]
 800fc26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fc28:	2200      	movs	r2, #0
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	2043      	movs	r0, #67	; 0x43
 800fc2e:	f7f5 fecc 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc32:	2043      	movs	r0, #67	; 0x43
 800fc34:	f7f5 fee5 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc38:	bf00      	nop
 800fc3a:	3780      	adds	r7, #128	; 0x80
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	40023800 	.word	0x40023800
 800fc44:	40020000 	.word	0x40020000

0800fc48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	4610      	mov	r0, r2
 800fc60:	f7fe fc14 	bl	800e48c <USBD_LL_SetupStage>
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	460b      	mov	r3, r1
 800fc76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fc7e:	78fa      	ldrb	r2, [r7, #3]
 800fc80:	6879      	ldr	r1, [r7, #4]
 800fc82:	4613      	mov	r3, r2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	1a9b      	subs	r3, r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	440b      	add	r3, r1
 800fc8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	78fb      	ldrb	r3, [r7, #3]
 800fc94:	4619      	mov	r1, r3
 800fc96:	f7fe fc4e 	bl	800e536 <USBD_LL_DataOutStage>
}
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b082      	sub	sp, #8
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	460b      	mov	r3, r1
 800fcac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fcb4:	78fa      	ldrb	r2, [r7, #3]
 800fcb6:	6879      	ldr	r1, [r7, #4]
 800fcb8:	4613      	mov	r3, r2
 800fcba:	00db      	lsls	r3, r3, #3
 800fcbc:	1a9b      	subs	r3, r3, r2
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	440b      	add	r3, r1
 800fcc2:	3348      	adds	r3, #72	; 0x48
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	4619      	mov	r1, r3
 800fcca:	f7fe fc97 	bl	800e5fc <USBD_LL_DataInStage>
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe fdab 	bl	800e840 <USBD_LL_SOF>
}
 800fcea:	bf00      	nop
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d102      	bne.n	800fd0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fd06:	2300      	movs	r3, #0
 800fd08:	73fb      	strb	r3, [r7, #15]
 800fd0a:	e008      	b.n	800fd1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	2b02      	cmp	r3, #2
 800fd12:	d102      	bne.n	800fd1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fd14:	2301      	movs	r3, #1
 800fd16:	73fb      	strb	r3, [r7, #15]
 800fd18:	e001      	b.n	800fd1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fd1a:	f7f1 fab9 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd24:	7bfa      	ldrb	r2, [r7, #15]
 800fd26:	4611      	mov	r1, r2
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe fd4b 	bl	800e7c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fe fcf7 	bl	800e728 <USBD_LL_Reset>
}
 800fd3a:	bf00      	nop
 800fd3c:	3710      	adds	r7, #16
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
	...

0800fd44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe fd46 	bl	800e7e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	6812      	ldr	r2, [r2, #0]
 800fd66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd6a:	f043 0301 	orr.w	r3, r3, #1
 800fd6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a1b      	ldr	r3, [r3, #32]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d005      	beq.n	800fd84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd78:	4b04      	ldr	r3, [pc, #16]	; (800fd8c <HAL_PCD_SuspendCallback+0x48>)
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	4a03      	ldr	r2, [pc, #12]	; (800fd8c <HAL_PCD_SuspendCallback+0x48>)
 800fd7e:	f043 0306 	orr.w	r3, r3, #6
 800fd82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fd84:	bf00      	nop
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	e000ed00 	.word	0xe000ed00

0800fd90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe fd36 	bl	800e810 <USBD_LL_Resume>
}
 800fda4:	bf00      	nop
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fdbe:	78fa      	ldrb	r2, [r7, #3]
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fe fd84 	bl	800e8d0 <USBD_LL_IsoOUTIncomplete>
}
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fde2:	78fa      	ldrb	r2, [r7, #3]
 800fde4:	4611      	mov	r1, r2
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe fd4c 	bl	800e884 <USBD_LL_IsoINIncomplete>
}
 800fdec:	bf00      	nop
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fe fd8a 	bl	800e91c <USBD_LL_DevConnected>
}
 800fe08:	bf00      	nop
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fe fd87 	bl	800e932 <USBD_LL_DevDisconnected>
}
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d13c      	bne.n	800feb6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fe3c:	4a20      	ldr	r2, [pc, #128]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a1e      	ldr	r2, [pc, #120]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe4c:	4b1c      	ldr	r3, [pc, #112]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fe52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fe54:	4b1a      	ldr	r3, [pc, #104]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe56:	2206      	movs	r2, #6
 800fe58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fe5a:	4b19      	ldr	r3, [pc, #100]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fe60:	4b17      	ldr	r3, [pc, #92]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fe66:	4b16      	ldr	r3, [pc, #88]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe68:	2202      	movs	r2, #2
 800fe6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fe6c:	4b14      	ldr	r3, [pc, #80]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fe72:	4b13      	ldr	r3, [pc, #76]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fe78:	4b11      	ldr	r3, [pc, #68]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800fe7e:	4b10      	ldr	r3, [pc, #64]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe80:	2201      	movs	r2, #1
 800fe82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fe84:	4b0e      	ldr	r3, [pc, #56]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe86:	2200      	movs	r2, #0
 800fe88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fe8a:	480d      	ldr	r0, [pc, #52]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe8c:	f7f9 f870 	bl	8008f70 <HAL_PCD_Init>
 800fe90:	4603      	mov	r3, r0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fe96:	f7f1 f9fb 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fe9a:	2180      	movs	r1, #128	; 0x80
 800fe9c:	4808      	ldr	r0, [pc, #32]	; (800fec0 <USBD_LL_Init+0x94>)
 800fe9e:	f7fa fa02 	bl	800a2a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fea2:	2240      	movs	r2, #64	; 0x40
 800fea4:	2100      	movs	r1, #0
 800fea6:	4806      	ldr	r0, [pc, #24]	; (800fec0 <USBD_LL_Init+0x94>)
 800fea8:	f7fa f9b6 	bl	800a218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800feac:	2280      	movs	r2, #128	; 0x80
 800feae:	2101      	movs	r1, #1
 800feb0:	4803      	ldr	r0, [pc, #12]	; (800fec0 <USBD_LL_Init+0x94>)
 800feb2:	f7fa f9b1 	bl	800a218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20002794 	.word	0x20002794

0800fec4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fed0:	2300      	movs	r3, #0
 800fed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800feda:	4618      	mov	r0, r3
 800fedc:	f7f9 f96c 	bl	80091b8 <HAL_PCD_Start>
 800fee0:	4603      	mov	r3, r0
 800fee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 f990 	bl	801020c <USBD_Get_USB_Status>
 800feec:	4603      	mov	r3, r0
 800feee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b084      	sub	sp, #16
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	4608      	mov	r0, r1
 800ff04:	4611      	mov	r1, r2
 800ff06:	461a      	mov	r2, r3
 800ff08:	4603      	mov	r3, r0
 800ff0a:	70fb      	strb	r3, [r7, #3]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	70bb      	strb	r3, [r7, #2]
 800ff10:	4613      	mov	r3, r2
 800ff12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff22:	78bb      	ldrb	r3, [r7, #2]
 800ff24:	883a      	ldrh	r2, [r7, #0]
 800ff26:	78f9      	ldrb	r1, [r7, #3]
 800ff28:	f7f9 fd7d 	bl	8009a26 <HAL_PCD_EP_Open>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 f96a 	bl	801020c <USBD_Get_USB_Status>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b084      	sub	sp, #16
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	460b      	mov	r3, r1
 800ff50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff52:	2300      	movs	r3, #0
 800ff54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff60:	78fa      	ldrb	r2, [r7, #3]
 800ff62:	4611      	mov	r1, r2
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f9 fdc6 	bl	8009af6 <HAL_PCD_EP_Close>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f000 f94b 	bl	801020c <USBD_Get_USB_Status>
 800ff76:	4603      	mov	r3, r0
 800ff78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff90:	2300      	movs	r3, #0
 800ff92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff94:	2300      	movs	r3, #0
 800ff96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff9e:	78fa      	ldrb	r2, [r7, #3]
 800ffa0:	4611      	mov	r1, r2
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f9 fe9e 	bl	8009ce4 <HAL_PCD_EP_SetStall>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffac:	7bfb      	ldrb	r3, [r7, #15]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f000 f92c 	bl	801020c <USBD_Get_USB_Status>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}

0800ffc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b084      	sub	sp, #16
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
 800ffca:	460b      	mov	r3, r1
 800ffcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ffdc:	78fa      	ldrb	r2, [r7, #3]
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f9 fee3 	bl	8009dac <HAL_PCD_EP_ClrStall>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffea:	7bfb      	ldrb	r3, [r7, #15]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f000 f90d 	bl	801020c <USBD_Get_USB_Status>
 800fff2:	4603      	mov	r3, r0
 800fff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fff6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	460b      	mov	r3, r1
 801000a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010012:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010018:	2b00      	cmp	r3, #0
 801001a:	da0b      	bge.n	8010034 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801001c:	78fb      	ldrb	r3, [r7, #3]
 801001e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010022:	68f9      	ldr	r1, [r7, #12]
 8010024:	4613      	mov	r3, r2
 8010026:	00db      	lsls	r3, r3, #3
 8010028:	1a9b      	subs	r3, r3, r2
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	440b      	add	r3, r1
 801002e:	333e      	adds	r3, #62	; 0x3e
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	e00b      	b.n	801004c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010034:	78fb      	ldrb	r3, [r7, #3]
 8010036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801003a:	68f9      	ldr	r1, [r7, #12]
 801003c:	4613      	mov	r3, r2
 801003e:	00db      	lsls	r3, r3, #3
 8010040:	1a9b      	subs	r3, r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	440b      	add	r3, r1
 8010046:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801004a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801004c:	4618      	mov	r0, r3
 801004e:	3714      	adds	r7, #20
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	460b      	mov	r3, r1
 8010062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010068:	2300      	movs	r3, #0
 801006a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010072:	78fa      	ldrb	r2, [r7, #3]
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7f9 fcb0 	bl	80099dc <HAL_PCD_SetAddress>
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010080:	7bfb      	ldrb	r3, [r7, #15]
 8010082:	4618      	mov	r0, r3
 8010084:	f000 f8c2 	bl	801020c <USBD_Get_USB_Status>
 8010088:	4603      	mov	r3, r0
 801008a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801008c:	7bbb      	ldrb	r3, [r7, #14]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}

08010096 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010096:	b580      	push	{r7, lr}
 8010098:	b086      	sub	sp, #24
 801009a:	af00      	add	r7, sp, #0
 801009c:	60f8      	str	r0, [r7, #12]
 801009e:	607a      	str	r2, [r7, #4]
 80100a0:	603b      	str	r3, [r7, #0]
 80100a2:	460b      	mov	r3, r1
 80100a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100aa:	2300      	movs	r3, #0
 80100ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80100b4:	7af9      	ldrb	r1, [r7, #11]
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	f7f9 fdc9 	bl	8009c50 <HAL_PCD_EP_Transmit>
 80100be:	4603      	mov	r3, r0
 80100c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 f8a1 	bl	801020c <USBD_Get_USB_Status>
 80100ca:	4603      	mov	r3, r0
 80100cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80100ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	607a      	str	r2, [r7, #4]
 80100e2:	603b      	str	r3, [r7, #0]
 80100e4:	460b      	mov	r3, r1
 80100e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100e8:	2300      	movs	r3, #0
 80100ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80100f6:	7af9      	ldrb	r1, [r7, #11]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	687a      	ldr	r2, [r7, #4]
 80100fc:	f7f9 fd45 	bl	8009b8a <HAL_PCD_EP_Receive>
 8010100:	4603      	mov	r3, r0
 8010102:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	4618      	mov	r0, r3
 8010108:	f000 f880 	bl	801020c <USBD_Get_USB_Status>
 801010c:	4603      	mov	r3, r0
 801010e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010110:	7dbb      	ldrb	r3, [r7, #22]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b082      	sub	sp, #8
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	460b      	mov	r3, r1
 8010124:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801012c:	78fa      	ldrb	r2, [r7, #3]
 801012e:	4611      	mov	r1, r2
 8010130:	4618      	mov	r0, r3
 8010132:	f7f9 fd75 	bl	8009c20 <HAL_PCD_EP_GetRxCount>
 8010136:	4603      	mov	r3, r0
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	460b      	mov	r3, r1
 801014a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801014c:	78fb      	ldrb	r3, [r7, #3]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d002      	beq.n	8010158 <HAL_PCDEx_LPM_Callback+0x18>
 8010152:	2b01      	cmp	r3, #1
 8010154:	d01f      	beq.n	8010196 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010156:	e03b      	b.n	80101d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d007      	beq.n	8010170 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8010160:	f7f0 fab4 	bl	80006cc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010164:	4b1c      	ldr	r3, [pc, #112]	; (80101d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8010166:	691b      	ldr	r3, [r3, #16]
 8010168:	4a1b      	ldr	r2, [pc, #108]	; (80101d8 <HAL_PCDEx_LPM_Callback+0x98>)
 801016a:	f023 0306 	bic.w	r3, r3, #6
 801016e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	6812      	ldr	r2, [r2, #0]
 801017e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010182:	f023 0301 	bic.w	r3, r3, #1
 8010186:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801018e:	4618      	mov	r0, r3
 8010190:	f7fe fb3e 	bl	800e810 <USBD_LL_Resume>
    break;
 8010194:	e01c      	b.n	80101d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	6812      	ldr	r2, [r2, #0]
 80101a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101a8:	f043 0301 	orr.w	r3, r3, #1
 80101ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fe fb15 	bl	800e7e4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6a1b      	ldr	r3, [r3, #32]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d005      	beq.n	80101ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101c2:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	4a04      	ldr	r2, [pc, #16]	; (80101d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80101c8:	f043 0306 	orr.w	r3, r3, #6
 80101cc:	6113      	str	r3, [r2, #16]
    break;
 80101ce:	bf00      	nop
}
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	e000ed00 	.word	0xe000ed00

080101dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80101dc:	b480      	push	{r7}
 80101de:	b083      	sub	sp, #12
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80101e4:	4b03      	ldr	r3, [pc, #12]	; (80101f4 <USBD_static_malloc+0x18>)
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop
 80101f4:	200001b0 	.word	0x200001b0

080101f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]

}
 8010200:	bf00      	nop
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	4603      	mov	r3, r0
 8010214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801021a:	79fb      	ldrb	r3, [r7, #7]
 801021c:	2b03      	cmp	r3, #3
 801021e:	d817      	bhi.n	8010250 <USBD_Get_USB_Status+0x44>
 8010220:	a201      	add	r2, pc, #4	; (adr r2, 8010228 <USBD_Get_USB_Status+0x1c>)
 8010222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010226:	bf00      	nop
 8010228:	08010239 	.word	0x08010239
 801022c:	0801023f 	.word	0x0801023f
 8010230:	08010245 	.word	0x08010245
 8010234:	0801024b 	.word	0x0801024b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010238:	2300      	movs	r3, #0
 801023a:	73fb      	strb	r3, [r7, #15]
    break;
 801023c:	e00b      	b.n	8010256 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801023e:	2303      	movs	r3, #3
 8010240:	73fb      	strb	r3, [r7, #15]
    break;
 8010242:	e008      	b.n	8010256 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010244:	2301      	movs	r3, #1
 8010246:	73fb      	strb	r3, [r7, #15]
    break;
 8010248:	e005      	b.n	8010256 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801024a:	2303      	movs	r3, #3
 801024c:	73fb      	strb	r3, [r7, #15]
    break;
 801024e:	e002      	b.n	8010256 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010250:	2303      	movs	r3, #3
 8010252:	73fb      	strb	r3, [r7, #15]
    break;
 8010254:	bf00      	nop
  }
  return usb_status;
 8010256:	7bfb      	ldrb	r3, [r7, #15]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3714      	adds	r7, #20
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <__libc_init_array>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	4d0d      	ldr	r5, [pc, #52]	; (801029c <__libc_init_array+0x38>)
 8010268:	4c0d      	ldr	r4, [pc, #52]	; (80102a0 <__libc_init_array+0x3c>)
 801026a:	1b64      	subs	r4, r4, r5
 801026c:	10a4      	asrs	r4, r4, #2
 801026e:	2600      	movs	r6, #0
 8010270:	42a6      	cmp	r6, r4
 8010272:	d109      	bne.n	8010288 <__libc_init_array+0x24>
 8010274:	4d0b      	ldr	r5, [pc, #44]	; (80102a4 <__libc_init_array+0x40>)
 8010276:	4c0c      	ldr	r4, [pc, #48]	; (80102a8 <__libc_init_array+0x44>)
 8010278:	f000 f820 	bl	80102bc <_init>
 801027c:	1b64      	subs	r4, r4, r5
 801027e:	10a4      	asrs	r4, r4, #2
 8010280:	2600      	movs	r6, #0
 8010282:	42a6      	cmp	r6, r4
 8010284:	d105      	bne.n	8010292 <__libc_init_array+0x2e>
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	f855 3b04 	ldr.w	r3, [r5], #4
 801028c:	4798      	blx	r3
 801028e:	3601      	adds	r6, #1
 8010290:	e7ee      	b.n	8010270 <__libc_init_array+0xc>
 8010292:	f855 3b04 	ldr.w	r3, [r5], #4
 8010296:	4798      	blx	r3
 8010298:	3601      	adds	r6, #1
 801029a:	e7f2      	b.n	8010282 <__libc_init_array+0x1e>
 801029c:	08010344 	.word	0x08010344
 80102a0:	08010344 	.word	0x08010344
 80102a4:	08010344 	.word	0x08010344
 80102a8:	08010348 	.word	0x08010348

080102ac <memset>:
 80102ac:	4402      	add	r2, r0
 80102ae:	4603      	mov	r3, r0
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d100      	bne.n	80102b6 <memset+0xa>
 80102b4:	4770      	bx	lr
 80102b6:	f803 1b01 	strb.w	r1, [r3], #1
 80102ba:	e7f9      	b.n	80102b0 <memset+0x4>

080102bc <_init>:
 80102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102be:	bf00      	nop
 80102c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102c2:	bc08      	pop	{r3}
 80102c4:	469e      	mov	lr, r3
 80102c6:	4770      	bx	lr

080102c8 <_fini>:
 80102c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ca:	bf00      	nop
 80102cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ce:	bc08      	pop	{r3}
 80102d0:	469e      	mov	lr, r3
 80102d2:	4770      	bx	lr
